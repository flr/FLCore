[{"path":[]},{"path":"/CONTRIBUTING.html","id":"report-bugs","dir":"","previous_headings":"","what":"Report bugs","title":"HOW YOU CAN CONTRIBUTE TO FLR DEVELOPMENT","text":"find problem FLR packages, please hesitate letting us know. can report bugs issue page package github repository. FLCore, example, https://github.com/flr/FLCore/issues/ can drop us line flrteam@flr-project.org.","code":""},{"path":"/CONTRIBUTING.html","id":"comment-on-the-documentation","dir":"","previous_headings":"","what":"Comment on the documentation","title":"HOW YOU CAN CONTRIBUTE TO FLR DEVELOPMENT","text":"Errors, shortcomings comment documentation FLR package can also submited issue package issue page. FLR tutorials hosted ‘doc’ repository, issues content functionality can reported https://github.com/flr/doc/issues/","code":""},{"path":"/CONTRIBUTING.html","id":"suggest-improvements-or-additions","dir":"","previous_headings":"","what":"Suggest improvements or additions","title":"HOW YOU CAN CONTRIBUTE TO FLR DEVELOPMENT","text":"idea something added made better FLR package, open discussion FLR mailing list https://lists.r-forge.r-project.org/cgi-bin/mailman/listinfo/flr-list","code":""},{"path":"/CONTRIBUTING.html","id":"contribute-an-example","dir":"","previous_headings":"","what":"Contribute an example","title":"HOW YOU CAN CONTRIBUTE TO FLR DEVELOPMENT","text":"used FLR work like show helped, contribute R Markdown (Rmd) document FLR gallery. Please fork repository https://github.com/flr/gallery submit pull request document. test upload FLR website.","code":""},{"path":"/CONTRIBUTING.html","id":"contribute-code","dir":"","previous_headings":"","what":"Contribute code","title":"HOW YOU CAN CONTRIBUTE TO FLR DEVELOPMENT","text":"happy receive pull requests FLR packages new code bug fix. contribution recognized community.","code":""},{"path":"/CONTRIBUTING.html","id":"increase-flr-usage-and-awareness","dir":"","previous_headings":"","what":"Increase FLR usage and awareness","title":"HOW YOU CAN CONTRIBUTE TO FLR DEVELOPMENT","text":"forget mention use FLR documents publications. Use get text BibTeX versions main reference FLR. can also link website readers can find project.","code":"citation('FLCore')"},{"path":"/CONTRIBUTORS.html","id":null,"dir":"","previous_headings":"","what":"CONTRIBUTORS to FLCore","title":"CONTRIBUTORS to FLCore","text":"Manuela AZEVEDO Santiago CERVINO Jean Marc FROMENTIN Dorleta GARCIA Philippe GROSJEAN Katell HAMON Richard HILLARY Ernesto JARDIM Laurence KELL Arni MAGNUSSON Simon MARDLE Colin MILLAR Iago MOSQUEIRA Alberto MURTA Jose DE OLIVEIRA Martin PASTOORS Jan Jaap POOS Finlay SCOTT Robert SCOTT Alex TIDD Clara ULRICH Ibrahim UMAR Henning WINKER","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Iago Mosqueira. Maintainer. Laurence T. Kell. Author. Philippe Grosjean. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kell, L.T., Mosqueira, ., Grosjean, P., Fromentin, J-M., Garcia, D., Hillary, R., Jardim, E., Mardle, S., Pastoors, M.., Poos, J.J., Scott, F., Scott, R.D. 2007. FLR: open-source framework evaluation development management strategies. ICES Journal Marine Science, 64: 640-646.","code":"@Article{,   title = {FLR: an open-source framework for the evaluation and development of management strategies},   author = {L.T. Kell and I. Mosqueira and P. Grosjean and J-M. Fromentin and D. Garcia and R. Hillary and E. Jardim and S. Mardle and M.A. Pastoors and J.J. Poos and F. Scott and R.D. Scott},   journal = {ICES Journal of Marine Science},   year = {2007},   volume = {64},   pages = {640-646}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Core Package of FLR, Fisheries Modelling in R","text":"FLCore contains core classes methods FLR, framework fisheries modelling management strategy simulation R.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Core Package of FLR, Fisheries Modelling in R","text":"install package, start R enter: directly github repository using:","code":"install.packages(\"FLCore\", repos=\"http://flr-project.org/R\") remotes::install_github(\"flr/FLCore\")"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Core Package of FLR, Fisheries Modelling in R","text":"quick introduction FLR overview FLCore classes Loading data FLR Modelling stock recruitment FLSR Plotting FLR objects using lattice Help pages","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Core Package of FLR, Fisheries Modelling in R","text":"Kell, L. T., . Mosqueira, P. Grosjean, J-M. Fromentin, D. Garcia, R. Hillary, E. Jardim, S. Mardle, M. . Pastoors, J. J. Poos, F. Scott, R. D. Scott. 2007. FLR: open-source framework evaluation development management strategies. ICES J Mar Sci, 64 (4): 640-646. doi: 10.1093/icesjms/fsm012","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Core Package of FLR, Fisheries Modelling in R","text":"Copyright (c) 2004-2022 FLR Team. Released GPL v2.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Core Package of FLR, Fisheries Modelling in R","text":"welcome : Submit suggestions bug-reports : https://github.com/flr/FLCore/issues Send pull request : https://github.com/flr/FLCore/ Compose friendly e-mail : flrteam@flr-project.org Author: FLR Team various contributors. Maintainer: Iago Mosqueira (WMR) iago.mosqueira@wur.nl","code":""},{"path":"/reference/AIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Method AIC — AIC","title":"Method AIC — AIC","text":"Akaike's information criterion (AIC) method method calculate Akaike's 'Information Criterion' (AIC) FLModel object value obtained log-likelihood stored logLik slot.","code":""},{"path":"/reference/AIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method AIC — AIC","text":"","code":"# S4 method for FLModel,numeric AIC(object, k = 2)"},{"path":"/reference/AIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method AIC — AIC","text":"object FLModel object k penalty per parameter used; default 'k = 2' classical AIC.","code":""},{"path":"/reference/AIC.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method AIC — AIC","text":"AIC(object, k)","code":""},{"path":[]},{"path":"/reference/AIC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method AIC — AIC","text":"FLR Team","code":""},{"path":"/reference/AIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method AIC — AIC","text":"","code":"data(nsher) AIC(nsher) #> [1] -27.7245"},{"path":"/reference/Arith-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic operators for FLCore classes — Arith,numeric,FLArray-method","title":"Arithmetic operators for FLCore classes — Arith,numeric,FLArray-method","text":"Overloaded arithmetic operators FLCore classes","code":""},{"path":"/reference/Arith-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic operators for FLCore classes — Arith,numeric,FLArray-method","text":"","code":"# S4 method for numeric,FLArray Arith(e1, e2)  # S4 method for FLArray,numeric Arith(e1, e2)  # S4 method for FLArray,FLArray Arith(e1, e2)  # S4 method for FLPar,FLPar Arith(e1, e2)  # S4 method for FLArray,FLPar Arith(e1, e2)  # S4 method for FLPar,FLArray Arith(e1, e2)"},{"path":"/reference/Arith-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Arithmetic operators for FLCore classes — Arith,numeric,FLArray-method","text":"methods apply standard arithmetic operators included Arith group (\"+\", \"-\", \"*\", \"^\", \"%%\", \"%/%\", \"/\"), return object appropriate class. operation involves objects two classes (e.g. FLPar FLQuant), class returned object complexs object, case FLQuant.","code":""},{"path":[]},{"path":"/reference/Arith-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Arithmetic operators for FLCore classes — Arith,numeric,FLArray-method","text":"FLR Team","code":""},{"path":"/reference/Arith-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic operators for FLCore classes — Arith,numeric,FLArray-method","text":"","code":"flq <- FLQuant(rlnorm(90), dim=c(3,10), units='kg') flp <- FLPar(a=99)  # FLQuant and numeric flq * 25 #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1        2        3        4        5        6        7        8        #>     1   6.1647  24.8611   4.0433  18.8435 197.1374   3.8801  43.0289  35.9391 #>     2  32.2718  46.5454  19.5222  14.3705   4.8934  14.8331  10.0222   6.7824 #>     3   2.1850  78.8295  19.5833  46.8925  41.7334  23.7189  39.9261  52.2820 #>      year #> quant 9        10       #>     1 165.2370  24.6044 #>     2  22.6788  10.9363 #>     3   9.8063   5.5095 #>  #> units:  kg  # Two FLQuant objects flq + flq #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1        2        3        4        5        6        7        8        #>     1  0.49317  1.98889  0.32346  1.50748 15.77099  0.31041  3.44231  2.87513 #>     2  2.58174  3.72363  1.56177  1.14964  0.39147  1.18665  0.80177  0.54259 #>     3  0.17480  6.30636  1.56666  3.75140  3.33868  1.89752  3.19409  4.18256 #>      year #> quant 9        10       #>     1 13.21896  1.96835 #>     2  1.81430  0.87490 #>     3  0.78451  0.44076 #>  #> units:  kg   # FLQuant and FLPar flq / flp #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1          2          3          4          5          6          #>     1 0.00249077 0.01004489 0.00163365 0.00761355 0.07965146 0.00156772 #>     2 0.01303910 0.01880623 0.00788774 0.00580626 0.00197713 0.00599318 #>     3 0.00088283 0.03185031 0.00791244 0.01894647 0.01686200 0.00958341 #>      year #> quant 7          8          9          10         #>     1 0.01738542 0.01452087 0.06676242 0.00994117 #>     2 0.00404937 0.00274037 0.00916315 0.00441870 #>     3 0.01613176 0.02112404 0.00396216 0.00222607 #>  #> units:  NA"},{"path":"/reference/BIC.html","id":null,"dir":"Reference","previous_headings":"","what":"Method BIC\nBayesian information criterion (BIC) method — BIC","title":"Method BIC\nBayesian information criterion (BIC) method — BIC","text":"method calculate Bayesian information criterion (BIC), also known Schwarz's Bayesian criterion FLModel object value obtained log-likelihood stored logLik slot.","code":""},{"path":"/reference/BIC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method BIC\nBayesian information criterion (BIC) method — BIC","text":"","code":"# S4 method for FLModel BIC(object)"},{"path":"/reference/BIC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method BIC\nBayesian information criterion (BIC) method — BIC","text":"object fitted FLModel object exists 'logLik' method extract corresponding log-likelihood.","code":""},{"path":"/reference/BIC.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method BIC\nBayesian information criterion (BIC) method — BIC","text":"BIC(object)","code":""},{"path":[]},{"path":"/reference/BIC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method BIC\nBayesian information criterion (BIC) method — BIC","text":"FLR Team","code":""},{"path":"/reference/BIC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method BIC\nBayesian information criterion (BIC) method — BIC","text":"","code":"data(nsher) BIC(nsher) #> [1] -24.11118"},{"path":"/reference/Extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract — Extract","title":"Extract — Extract","text":"Extract replace parts FLR Object","code":""},{"path":"/reference/Extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract — Extract","text":"","code":"# S4 method for FLArray,ANY,ANY,ANY [(x, i, j, k, l, m, n, ..., drop = FALSE)  # S4 method for FLArray,array,missing,missing [(x, i)  # S4 method for FLArray,ANY,ANY,ANY [(x, i, j, k, l, m, n, ...) <- value  # S4 method for FLArray,ANY,ANY,FLArray [(x, i, j, k, l, m, n, ...) <- value  # S4 method for FLQuant $(x, name)  # S4 method for FLQuantDistr,ANY,ANY,ANY [(x, i, j, k, l, m, n)  # S4 method for FLQuantDistr,array,missing,missing [(x, i)  # S4 method for FLPar,ANY,ANY,ANY [(x, i, j, k, l, m, n, ..., drop = FALSE)  # S4 method for FLPar,array,missing,missing [(x, i)  # S4 method for FLPar,ANY,ANY,ANY [(x, i, j, k, l, m, n, ...) <- value  # S4 method for FLPar $(x, name)  # S4 method for FLPar $(x, name) <- value  # S4 method for FLComp,ANY,ANY,ANY [(x, i, j, k, l, m, n, ..., drop = FALSE)  # S4 method for FLComp,ANY,ANY,ANY [(x, i, j, k, l, m, n, ...) <- value  # S4 method for FLStock,ANY,ANY,ANY [(x, i, j, k, l, m, n, ..., drop = FALSE)  # S4 method for FLStock,ANY,ANY,FLStock [(x, i, j, k, l, m, n, ...) <- value  # S4 method for FLI,ANY,ANY,ANY [(x, i, j, k, l, m, n, ..., drop = FALSE)  # S4 method for predictModel,ANY,missing,ANY [(x, i, k, l, m, n, ..., drop = FALSE)  # S4 method for FLlst,ANY,missing [[(x, i, j) <- value  # S4 method for FLlst $(x, name) <- value  # S4 method for FLlst,ANY,missing,ANY [(x, i, j) <- value  # S4 method for FLlst,ANY,missing,ANY [(x, i, drop)"},{"path":"/reference/Extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract — Extract","text":"x object extract replace element(s) , j, k, l, m, n indices specifying elements extract replace six dimensions. ... indices specifying elements extract replace dimension name. drop 'TRUE' result coerced lowest possible dimension, might change class (e.g. drop='TRUE' FLQuant might return array less dimensions, matrix vector. value object class, simpler drop=TRUE, 'x'. name See Extract details.","code":""},{"path":"/reference/Extract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract — Extract","text":"Operators acting FLQuant, FLCohort, FLPar, FLComp, derived classes extract replace sections object. Please note differences referencing sections object position using values class numeric, using dimnames class character. See examples . classes derived FLComp (example, FLStock FLBiol) can subset along six dimensions FLQuant slots. Classes derived FLlst (example, FLStocks FLBiols) can subset similar way ordinary list objects. '$' FLPar FLQuant classes operate along first dimension ('params' 'quant'), provided used specially formulas.","code":""},{"path":"/reference/Extract.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Extract — Extract","text":"x,,j,drop  [<-(x,,j,value)  [[<-(x,,j,value)  \\$<-(x,name,value)","code":""},{"path":[]},{"path":"/reference/Extract.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract — Extract","text":"FLR Team","code":""},{"path":"/reference/Extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract — Extract","text":"","code":"flq <- FLQuant(rnorm(200), dimnames=list(age=0:4, year=1991:2000,   season=1:4))  # Extracting by position...   flq[1,] #> An object of class \"FLQuant\" #> , , unit = unique, season = 1, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      1996      1997      #>   0  0.424188  1.672883 -0.387214 -0.690538 -0.208883  2.126850  2.039369 #>    year #> age 1998      1999      2000      #>   0  0.022295 -1.146200  0.454342 #>  #> , , unit = unique, season = 2, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      1996      1997      #>   0 -0.162676  1.321781  0.429147  0.677684 -1.900061 -0.788259 -0.102909 #>    year #> age 1998      1999      2000      #>   0  1.035931 -1.041668  1.993110 #>  #> , , unit = unique, season = 3, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      1996      1997      #>   0  1.123839  0.132992 -0.429380  0.065487 -1.153398  0.075106 -0.338936 #>    year #> age 1998      1999      2000      #>   0  1.233390  0.237425 -0.639535 #>  #> , , unit = unique, season = 4, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      1996      1997      #>   0 -0.902815  1.382911 -0.830214 -0.828604  0.149679 -2.102152  0.060899 #>    year #> age 1998      1999      2000      #>   0  1.877744  1.012002  1.129835 #>  #> units:  NA    flq[,1:5] #> An object of class \"FLQuant\" #> , , unit = unique, season = 1, area = unique #>  #>    year #> age 1991       1992       1993       1994       1995       #>   0  0.4241876  1.6728826 -0.3872136 -0.6905379 -0.2088827 #>   1  1.0631020 -0.3543612 -0.7854327 -0.5585420 -1.3994105 #>   2  1.0487126  0.9463479 -1.0567369 -0.5366633  0.2585373 #>   3 -0.0381029  1.3168264 -0.7955414  0.2271271 -0.4417995 #>   4  0.4861489 -0.2966400 -1.7562754  0.9784549  0.5685999 #>  #> , , unit = unique, season = 2, area = unique #>  #>    year #> age 1991       1992       1993       1994       1995       #>   0 -0.1626763  1.3217810  0.4291474  0.6776836 -1.9000608 #>   1 -0.8273102 -1.1197108  0.1221034  0.0384995  0.9357843 #>   2  1.8765056  0.5145998 -1.1380124 -0.3563812 -0.3090515 #>   3  0.7664402 -1.5090998 -0.5580151  0.7828441  0.2630667 #>   4  0.9799567  1.5327415  1.0525385  0.8044116 -1.7905919 #>  #> , , unit = unique, season = 3, area = unique #>  #>    year #> age 1991       1992       1993       1994       1995       #>   0  1.1238388  0.1329921 -0.4293801  0.0654866 -1.1533984 #>   1 -0.3970015  0.3764993  1.3604613 -1.0985089 -0.3406379 #>   2 -0.8232612  1.1387077 -0.0708574 -0.6331782  0.7863626 #>   3 -0.5788846  1.2412631 -0.2721537 -2.0636545 -1.2705131 #>   4  1.7637894  0.6120909 -2.4466800  2.6489320  0.5421415 #>  #> , , unit = unique, season = 4, area = unique #>  #>    year #> age 1991       1992       1993       1994       1995       #>   0 -0.9028149  1.3829109 -0.8302143 -0.8286035  0.1496794 #>   1  1.3176337  0.0031259 -0.5035929  0.2897745 -1.4333211 #>   2  1.1001897 -0.0778868 -1.1936412 -0.4800535 -0.0103033 #>   3  1.2037678  0.4414282 -0.7517233 -0.6048294 -0.2122360 #>   4 -1.4312708  0.1289229  1.4558414  1.4601102 -0.9063402 #>  #> units:  NA    flq[1:2,,,c(1,3)] #> An object of class \"FLQuant\" #> , , unit = unique, season = 1, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      1996      1997      #>   0  0.424188  1.672883 -0.387214 -0.690538 -0.208883  2.126850  2.039369 #>   1  1.063102 -0.354361 -0.785433 -0.558542 -1.399410  0.424858  0.449454 #>    year #> age 1998      1999      2000      #>   0  0.022295 -1.146200  0.454342 #>   1  0.603611  0.846185 -0.855203 #>  #> , , unit = unique, season = 3, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      1996      1997      #>   0  1.123839  0.132992 -0.429380  0.065487 -1.153398  0.075106 -0.338936 #>   1 -0.397001  0.376499  1.360461 -1.098509 -0.340638  0.558514 -0.075574 #>    year #> age 1998      1999      2000      #>   0  1.233390  0.237425 -0.639535 #>   1  0.340424 -1.312814 -0.845196 #>  #> units:  NA   # ...by dimnames   flq['0',] #> An object of class \"FLQuant\" #> , , unit = unique, season = 1, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      1996      1997      #>   0  0.424188  1.672883 -0.387214 -0.690538 -0.208883  2.126850  2.039369 #>    year #> age 1998      1999      2000      #>   0  0.022295 -1.146200  0.454342 #>  #> , , unit = unique, season = 2, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      1996      1997      #>   0 -0.162676  1.321781  0.429147  0.677684 -1.900061 -0.788259 -0.102909 #>    year #> age 1998      1999      2000      #>   0  1.035931 -1.041668  1.993110 #>  #> , , unit = unique, season = 3, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      1996      1997      #>   0  1.123839  0.132992 -0.429380  0.065487 -1.153398  0.075106 -0.338936 #>    year #> age 1998      1999      2000      #>   0  1.233390  0.237425 -0.639535 #>  #> , , unit = unique, season = 4, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      1996      1997      #>   0 -0.902815  1.382911 -0.830214 -0.828604  0.149679 -2.102152  0.060899 #>    year #> age 1998      1999      2000      #>   0  1.877744  1.012002  1.129835 #>  #> units:  NA    flq[,'1991'] #> An object of class \"FLQuant\" #> , , unit = unique, season = 1, area = unique #>  #>    year #> age 1991      #>   0  0.424188 #>   1  1.063102 #>   2  1.048713 #>   3 -0.038103 #>   4  0.486149 #>  #> , , unit = unique, season = 2, area = unique #>  #>    year #> age 1991      #>   0 -0.162676 #>   1 -0.827310 #>   2  1.876506 #>   3  0.766440 #>   4  0.979957 #>  #> , , unit = unique, season = 3, area = unique #>  #>    year #> age 1991      #>   0  1.123839 #>   1 -0.397001 #>   2 -0.823261 #>   3 -0.578885 #>   4  1.763789 #>  #> , , unit = unique, season = 4, area = unique #>  #>    year #> age 1991      #>   0 -0.902815 #>   1  1.317634 #>   2  1.100190 #>   3  1.203768 #>   4 -1.431271 #>  #> units:  NA    flq[,as.character(1991:1995),,'1'] #> An object of class \"FLQuant\" #> , , unit = unique, season = 1, area = unique #>  #>    year #> age 1991      1992      1993      1994      1995      #>   0  0.424188  1.672883 -0.387214 -0.690538 -0.208883 #>   1  1.063102 -0.354361 -0.785433 -0.558542 -1.399410 #>   2  1.048713  0.946348 -1.056737 -0.536663  0.258537 #>   3 -0.038103  1.316826 -0.795541  0.227127 -0.441799 #>   4  0.486149 -0.296640 -1.756275  0.978455  0.568600 #>  #> units:  NA   # Dimensions of length one can be drop   flq[1, drop=TRUE] #> [1] 0.4241876  # Replacing part of the object   flq['0',,,1]<-0"},{"path":"/reference/FLArray.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLArray — FLArray","title":"Class FLArray — FLArray","text":"basic 6D array class. objects class created FLCore, used method inheritance.","code":""},{"path":"/reference/FLArray.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLArray — FLArray","text":".Data Internal S4 data representation, class array.","code":""},{"path":"/reference/FLArray.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"Class FLArray — FLArray","text":"Dimensions: Array must 6 dimensions Content: Array must class numeric","code":""},{"path":[]},{"path":"/reference/FLArray.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLArray — FLArray","text":"FLR Team","code":""},{"path":"/reference/FLBiol.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLBiol — FLBiol","title":"Class FLBiol — FLBiol","text":"class modelling age / length biomass structured populations.","code":""},{"path":"/reference/FLBiol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLBiol — FLBiol","text":"","code":"FLBiol(object, ...)  # S4 method for FLQuant FLBiol(object, plusgroup = dims(object)$max, ...)"},{"path":"/reference/FLBiol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLBiol — FLBiol","text":"object FLQuant object used sizing ... objects assigned name class slots plusgroup Plusgroup age, stored range","code":""},{"path":"/reference/FLBiol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLBiol — FLBiol","text":"FLBiol class representation biological fish population. includes information abundances, natural mortality fecundity.","code":""},{"path":"/reference/FLBiol.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLBiol — FLBiol","text":"n Numbers population. FLQuant. m Mortality rate population. FLQuant. wt Mean weight individual. FLQuant. mat predictModel. fec predictModel. rec predictModel. spwn Proportion time step spawning ocurrs. FLQuant. name Name object. character. desc Brief description object. character. range Named numeric vector describing range object. numeric.","code":""},{"path":"/reference/FLBiol.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"Class FLBiol — FLBiol","text":"slots class accessor replacement methods defined allow retrieving substituting individual slots. values passed replacement need class slot. numeric vector can also used replacing FLQuant slots, vector used substitute values slot, attributes.","code":""},{"path":"/reference/FLBiol.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLBiol — FLBiol","text":"construction method exists class can take named arguments slots. slots created match requirements class validity. unnamed FLQuant object provided, used sizing stored slot.","code":""},{"path":"/reference/FLBiol.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"Class FLBiol — FLBiol","text":"Dimensions FLQuant slots must iters equal 1 'n'. Iters dimname iter1 '1'. Dimnames name quant dimension must FLQuant slots.","code":""},{"path":[]},{"path":"/reference/FLBiol.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLBiol — FLBiol","text":"FLR Team","code":""},{"path":"/reference/FLBiol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLBiol — FLBiol","text":"","code":"# An FLBiol example dataset data(ple4.biol)  summary(ple4.biol) #> An object of class \"FLBiol\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t61\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear  #> \t1\t10\t10\t1957\t2017\t #>  #> mat           ~ mat  #>   mat         : [ 10 61 1 1 1 1 ], units =    #>   NA          : [ 1 1 ], units =  NA  #> fec           ~ fec  #>   fec         : [ 10 61 1 1 1 1 ], units =    #>   NA          : [ 1 1 ], units =  NA  #> rec           ~ rec a * ssb * exp(-b * ssb)  #>   residuals   : [ 1 60 1 1 1 1 ], units =    #>   a, b        : [ 2 1 ], units ="},{"path":"/reference/FLBiols.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLBiols — FLBiols","title":"Class FLBiols — FLBiols","text":"list FLBiol objects.","code":""},{"path":"/reference/FLBiols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLBiols — FLBiols","text":"","code":"FLBiols(object, ...)  # S4 method for FLBiol FLBiols(object, ...)  # S4 method for missing FLBiols(object, ...)  # S4 method for list FLBiols(object, ...)"},{"path":"/reference/FLBiols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLBiols — FLBiols","text":"object unnamed object added list ... named unnamed objects","code":""},{"path":"/reference/FLBiols.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLBiols — FLBiols","text":".Data Internal S4 data representation, class list. desc textual description object contents lock Can object extended/trimmed? TRUE FALSE. names character vector element names","code":""},{"path":"/reference/FLBiols.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLBiols — FLBiols","text":"constructor method exists class can take named arguments list elements.","code":""},{"path":[]},{"path":"/reference/FLBiols.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLBiols — FLBiols","text":"FLR Team","code":""},{"path":"/reference/FLCohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLCohort — FLCohort","title":"Class FLCohort — FLCohort","text":"class modelling cohorts.","code":""},{"path":"/reference/FLCohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLCohort — FLCohort","text":"","code":"FLCohort(object, ...)  # S4 method for FLQuant FLCohort(object, ...)  # S4 method for FLCohort FLCohort(object, units = units(object))  # S4 method for array FLCohort(   object,   dim = rep(1, 6),   dimnames = \"missing\",   units = \"NA\",   iter = 1,   fill.iter = TRUE )  # S4 method for vector FLCohort(   object,   dim = c(length(object), rep(1, 5)),   dimnames = \"missing\",   units = \"NA\",   iter = 1 )  # S4 method for missing FLCohort(object, dim = rep(1, 6), dimnames = \"missing\", units = \"NA\", iter = 1)"},{"path":"/reference/FLCohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLCohort — FLCohort","text":"object Input numeric object ... Additonal arguments","code":""},{"path":"/reference/FLCohort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLCohort — FLCohort","text":"class represents cohorts columns. simply shifts typical matrix representation cohorts found diagonals, matrix cohorts found columns. usefull analysis want make use cohorts instead years.","code":""},{"path":"/reference/FLCohort.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLCohort — FLCohort","text":".Data Internal S4 data representation. array. units data units understandable metric. character","code":""},{"path":"/reference/FLCohort.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLCohort — FLCohort","text":"Objects class generally constructed FLQuant object.","code":""},{"path":[]},{"path":"/reference/FLCohort.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLCohort — FLCohort","text":"FLR Team","code":""},{"path":"/reference/FLCohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLCohort — FLCohort","text":"","code":"data(ple4) flq <- catch.n(ple4) flc <- FLCohort(flq) plot(trim(flc, cohort=1960:2000))"},{"path":"/reference/FLCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLCohorts — FLCohorts","title":"Class FLCohorts — FLCohorts","text":"FLCohorts class extends list FLlst implements set features give little structure list objects. elements FLCohorts must class FLCohort. implements lock mechanism , turned , allow user increase decrease object length.","code":""},{"path":"/reference/FLCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLCohorts — FLCohorts","text":"","code":"FLCohorts(object, ...)"},{"path":"/reference/FLCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLCohorts — FLCohorts","text":"object unnamed object added list ... named unnamed objects","code":""},{"path":"/reference/FLCohorts.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLCohorts — FLCohorts","text":".Data data. list names Names list elements. character desc Description object. character lock Lock mechanism, turned length list can modified adding removing elements. logical","code":""},{"path":"/reference/FLCohorts.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLCohorts — FLCohorts","text":"constructor method exists class can take named arguments list elements.","code":""},{"path":[]},{"path":"/reference/FLCohorts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLCohorts — FLCohorts","text":"FLR Team","code":""},{"path":"/reference/FLComp.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLComp — FLComp","title":"Class FLComp — FLComp","text":"virtual class forms basis FLR classes composed slots class FLQuant. objects class can constructed.","code":""},{"path":"/reference/FLComp.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"Class FLComp — FLComp","text":"Dimensions FLQuant slots must iters equal 1 'n'. Iters dimname iter1 '1'. Dimnames name quant dimension must FLQuant slots.","code":""},{"path":"/reference/FLComp.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLComp — FLComp","text":"name character vector object name. desc textual description object contents. range named numeric vector various values quant year ranges, plusgroup, fishing mortality ranges, etc. Elements specific child class.","code":""},{"path":[]},{"path":"/reference/FLComp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLComp — FLComp","text":"FLR Team","code":""},{"path":"/reference/FLComps.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLComps — FLComps","title":"Class FLComps — FLComps","text":"virtual class forms basis many FLR list classes. objects class can constructed.","code":""},{"path":"/reference/FLComps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLComps — FLComps","text":"object unnamed object added list ... named unnamed objects","code":""},{"path":"/reference/FLComps.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"Class FLComps — FLComps","text":"Elements elements must class inherits FLComp","code":""},{"path":"/reference/FLComps.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLComps — FLComps","text":".Data data. list. names Names list elements. character. desc Description object. character. lock Lock mechanism, turned length list can modified adding removing elements. logical.","code":""},{"path":"/reference/FLComps.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLComps — FLComps","text":"constructor method exists class can take named arguments list elements.","code":""},{"path":[]},{"path":"/reference/FLComps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLComps — FLComps","text":"FLR Team","code":""},{"path":"/reference/FLI.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLI — FLI","title":"Class FLI — FLI","text":"VIRTUAL class holds data parameters related abundance indices.","code":""},{"path":"/reference/FLI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLI — FLI","text":"object FLQuant object used sizing ... objects assigned name class slots","code":""},{"path":"/reference/FLI.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLI — FLI","text":"distribution Statistical distribution index values (character). index Index values (FLQuant). index.var Variance index (FLQuant). catch.n Catch numbers used create index (FLQuant). catch.wt Catch weight index (FLQuant). effort Effort used create index (FLQuant). sel.pattern Selection pattern index (FLQuant). index.q Catchability index (FLQuant). name Name stock (character). desc General description object (character). range Range object (numeric)","code":""},{"path":"/reference/FLI.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"Class FLI — FLI","text":"slots class accessor replacement methods defined allow retrieving substituting individual slots. values passed replacement need class slot. numeric vector can also used replacing FLQuant slots, vector used substitute values slot, attributes.","code":""},{"path":"/reference/FLI.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLI — FLI","text":"construction method exists class can take named arguments slots. slots created match requirements class validity. unnamed FLQuant object provided, used sizing stored slot.","code":""},{"path":"/reference/FLI.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"Class FLI — FLI","text":"Dimensions FLQuant slots must iters equal 1 'n'. Iters dimname iter1 '1'. Dimnames name quant dimension must FLQuant slots.","code":""},{"path":[]},{"path":"/reference/FLI.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLI — FLI","text":"FLR Team","code":""},{"path":"/reference/FLIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLIndex — FLIndex","title":"Class FLIndex — FLIndex","text":"class modelling abundance indices.","code":""},{"path":"/reference/FLIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLIndex — FLIndex","text":"","code":"FLIndex(object, ...)  # S4 method for FLQuant FLIndex(object, plusgroup = dims(object)$max, ...)  # S4 method for missing FLIndex(object, ...)"},{"path":"/reference/FLIndex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLIndex — FLIndex","text":"FLIndex object holds data parameters related abundance indices.","code":""},{"path":"/reference/FLIndex.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLIndex — FLIndex","text":"type Type index (character). distribution Statistical distribution index values (character). index Index values (FLQuant). index.var Variance index (FLQuant). catch.n Catch numbers used create index (FLQuant). catch.wt Catch weight index (FLQuant). effort Effort used create index (FLQuant). sel.pattern Selection pattern index (FLQuant). index.q Catchability index (FLQuant). name Name stock (character). desc General description object (character). range Named numeric vector containing quant year ranges, plusgroup, period year, expressed proportions year, corresponds index (numeric).","code":""},{"path":[]},{"path":"/reference/FLIndex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLIndex — FLIndex","text":"FLR Team","code":""},{"path":"/reference/FLIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLIndex — FLIndex","text":"","code":"# Create an FLIndex object. fli <- FLIndex(index=FLQuant(rnorm(8), dim=c(1,8)), name=\"myTestFLindex\") summary(fli) #> An object of class \"FLIndex\" #>  #> Name: myTestFLindex  #> Description:   #> Type :    #> Distribution :    #> Quant: quant  #> Dims:  quant \tyear\tunit\tseason\tarea\titer #> \t1\t8\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tstartf\tendf  #> \tNA\tNA\tNA\t1\t8\tNA\tNA\t #>  index(fli) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1        2        3        4        5        6        7        8        #>   all -0.17409 -0.22174 -1.00953  0.48073  1.60441 -1.51502 -1.41602  0.87678 #>  #> units:  NA   # Creat an FLIndex object using an existing FLQuant object.   data(ple4)   # Create a perfect index of abundance from abundance at age     fli2 <- FLIndex(index=stock.n(ple4))   # Add some noise around the signal     index(fli2) <- index(fli2)*exp(rnorm(1, index(fli2)-index(fli2), 0.1))"},{"path":"/reference/FLIndexBiomass.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLIndexBiomass — FLIndexBiomass","title":"Class FLIndexBiomass — FLIndexBiomass","text":"class modelling biomass indices.","code":""},{"path":"/reference/FLIndexBiomass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLIndexBiomass — FLIndexBiomass","text":"","code":"FLIndexBiomass(object, ...)  # S4 method for FLQuant FLIndexBiomass(object, plusgroup = dims(object)$max, ...)  # S4 method for missing FLIndexBiomass(object, ...)"},{"path":"/reference/FLIndexBiomass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLIndexBiomass — FLIndexBiomass","text":"object FLQuant object used sizing ... objects assigned name class slots","code":""},{"path":"/reference/FLIndexBiomass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLIndexBiomass — FLIndexBiomass","text":"FLIndexBiomass object holds data parameters related biomass indices.","code":""},{"path":"/reference/FLIndexBiomass.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLIndexBiomass — FLIndexBiomass","text":"distribution Statistical distribution index values (character). index Index values (FLQuant). index.var Variance index (FLQuant). catch.n Catch numbers used create index (FLQuant). catch.wt Catch weight index (FLQuant). effort Effort used create index (FLQuant). sel.pattern Selection pattern index (FLQuant). index.q Catchability index (FLQuant). name Name stock (character). desc General description object (character). range Range object (numeric)","code":""},{"path":"/reference/FLIndexBiomass.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"Class FLIndexBiomass — FLIndexBiomass","text":"slots class accessor replacement methods defined allow retrieving substituting individual slots. values passed replacement need class slot. numeric vector can also used replacing FLQuant slots, vector used substitute values slot, attributes.","code":""},{"path":"/reference/FLIndexBiomass.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLIndexBiomass — FLIndexBiomass","text":"construction method exists class can take named arguments slots. slots created match requirements class validity. unnamed FLQuant object provided, used sizing stored slot.","code":""},{"path":"/reference/FLIndexBiomass.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"Class FLIndexBiomass — FLIndexBiomass","text":"Dimensions FLQuant slots must iters equal 1 'n'. Iters dimname iter1 '1'. Dimnames name quant dimension must FLQuant slots.","code":""},{"path":[]},{"path":"/reference/FLIndexBiomass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLIndexBiomass — FLIndexBiomass","text":"FLR Team","code":""},{"path":"/reference/FLIndexBiomass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLIndexBiomass — FLIndexBiomass","text":"","code":"idx <- FLIndexBiomass(index=FLQuant(1:10, quant='age'))  data(ple4) ida <- FLIndexBiomass(index=ssb(ple4),   catch.n=catch.n(ple4))"},{"path":"/reference/FLIndices.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLIndices — FLIndices","title":"Class FLIndices — FLIndices","text":"FLIndices class extends list FLlst implements set features give little structure list objects. elements FLIndices must class FLIndex. implements lock mechanism , turned , allow user increase decrease object length.","code":""},{"path":"/reference/FLIndices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLIndices — FLIndices","text":"","code":"FLIndices(object, ...)  # S4 method for FLI FLIndices(object, ...)  # S4 method for missing FLIndices(object, ...)  # S4 method for list FLIndices(object, ...)"},{"path":"/reference/FLIndices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLIndices — FLIndices","text":"object unnamed object added list ... named unnamed objects","code":""},{"path":"/reference/FLIndices.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLIndices — FLIndices","text":".Data data. list. names Names list elements. character. desc Description object. character. lock Lock mechanism, turned length list can modified adding removing elements. logical.","code":""},{"path":"/reference/FLIndices.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLIndices — FLIndices","text":"constructor method exists class can take named arguments list elements.","code":""},{"path":[]},{"path":"/reference/FLIndices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLIndices — FLIndices","text":"FLR Team","code":""},{"path":"/reference/FLIndices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLIndices — FLIndices","text":"","code":"data(ple4.index) flis <- FLIndices(INDa=ple4.index, INDb=window(ple4.index, end=2000))"},{"path":"/reference/FLModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLModel — FLModel","title":"Class FLModel — FLModel","text":"virtual class statistical models","code":""},{"path":"/reference/FLModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLModel — FLModel","text":"","code":"FLModel(model, ...)"},{"path":"/reference/FLModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLModel — FLModel","text":"FLModel class provides virtual class developers various statistical models can use implement classes allow models tested, fitted presented. Slots class attempt map usual outputs modelling exercise, together standard inputs. Input data stored slots created specified class based FLModel. See example FLSR class used stock-recruitment models. initial slot contains function used obtain initial values numerical solver. can also contain two attributes, upper lower limit sarch area parameter. Various fitting algorithms, similar present basic R packages, currently available FLModel, including fmle, nls-FLCore glm.","code":""},{"path":"/reference/FLModel.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLModel — FLModel","text":"name Name object, character. desc Description object, character. range Range, numeric. distribution Associated error probability dfistribution, factor. fitted Estimated values, FLQuant. residuals Residuals obtained model fit, FLQuant. model Model formula, formula. gr Function returning gradient likelihood, function. logl Log-likelihood function. function. initial Function returning initial parameter values optimizer, object class FLPar, function. params Estimated parameter values, FLPar. logLik Value log-likelihood, logLik. vcov Variance-covariance matrix, array. hessian Hessian matrix obtained parameter fitting, array. details extra information model fit procedure, list.","code":""},{"path":[]},{"path":"/reference/FLModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLModel — FLModel","text":"FLR Team","code":""},{"path":"/reference/FLModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLModel — FLModel","text":"","code":"# Normally, FLModel objects won't be created if \"class\" is not set   summary(FLModel(length~width*alpha)) #> An object of class \"FLModel\" #>  #> Name:   #> Description:   #> Quant: quant  #> Dims:  quant \tyear\tunit\tseason\tarea\titer #> \t1\t1\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tminyear\tmaxyear  #> \tNA\tNA\t1\t1\t #>  #>  #> Model: \tlength ~ width * alpha #> An object of class \"FLPar\" #> params #> length  width  alpha  #>     NA     NA     NA  #> units:  NA  #> Log-likelihood:  NA(NA)  #> Variance-covariance:         params #> params   length width alpha #>   length     NA    NA    NA #>   width      NA    NA    NA #>   alpha      NA    NA    NA  # Objects of FLModel-based classes use their own constructor, # which internally calls FLModel   fsr <- FLModel(rec~ssb*a, class='FLSR')   is(fsr) #> [1] \"FLSR\"    \"FLModel\" \"FLComp\"    summary(fsr) #> An object of class \"FLSR\" #>  #> Name:   #> Description:   #> Quant: quant  #> Dims:  quant \tyear\tunit\tseason\tarea\titer #> \t1\t1\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tminyear\tmaxyear  #> \tNA\tNA\t1\t1\t #>  #>  #> Model: \trec ~ ssb * a #> An object of class \"FLPar\" #> params #>  a  #> NA  #> units:  NA  #> Log-likelihood:  NA(NA)  #> Variance-covariance:       params #> params  a #>      a NA  # An example constructor method for an FLModel-based class   # Create class FLGrowth with a single new slot, 'mass'     setClass('FLGrowth', representation('FLModel', mass='FLArray'))    # Define a creator method based on FLModel      setGeneric(\"FLGrowth\", function(object, ...) standardGeneric(\"FLGrowth\")) #> [1] \"FLGrowth\"     setMethod('FLGrowth', signature(object='ANY'),       function(object, ...) return(FLModel(object, ..., class='FLGrowth')))     setMethod('FLGrowth', signature(object='missing'),       function(...) return(FLModel(formula(NULL), ..., class='FLGrowth')))    # Define an accessor method     setMethod('mass', signature(object='FLGrowth'),       function(object) return(slot(object, 'mass')))"},{"path":"/reference/FLModelSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLModelSim — FLModelSim","title":"Class FLModelSim — FLModelSim","text":"virtual class statistical simulation models","code":""},{"path":"/reference/FLModelSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLModelSim — FLModelSim","text":"","code":"FLModelSim(object, ...)  # S4 method for missing FLModelSim(object, ...)"},{"path":"/reference/FLModelSim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLModelSim — FLModelSim","text":"FLModelSim class provides virtual class developers various statistical models can use implement classes allow models tested, fitted presented. Slots class attempt map usual outputs modelling exercise, together standard inputs. Input data stored slots created specified class based FLModelSim. See example FLSR class used stock-recruitment models. Various fitting algorithms, similar present basic R packages, currently available FLModelSim, including fmle, nls-FLCore glm.","code":""},{"path":"/reference/FLModelSim.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLModelSim — FLModelSim","text":"params Estimated parameter values. FLPar. distr character vcov array model formula","code":""},{"path":[]},{"path":"/reference/FLModelSim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLModelSim — FLModelSim","text":"FLR Team","code":""},{"path":"/reference/FLModelSims.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLModelSims — FLModelSims","title":"Class FLModelSims — FLModelSims","text":"list FLModelSim objects.","code":""},{"path":"/reference/FLModelSims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLModelSims — FLModelSims","text":"","code":"FLModelSims(object, ...)  # S4 method for ANY FLModelSims(object, ...)  # S4 method for missing FLModelSims(object, ...)  # S4 method for list FLModelSims(object)  # S4 method for FLModelSims FLModelSims(object)"},{"path":"/reference/FLModelSims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLModelSims — FLModelSims","text":"object unnamed object added list ... named unnamed objects","code":""},{"path":"/reference/FLModelSims.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLModelSims — FLModelSims","text":".Data data. list. names Names list elements. character. desc Description object. character. lock Lock mechanism, turned length list can modified adding removing elements. logical.","code":""},{"path":"/reference/FLModelSims.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLModelSims — FLModelSims","text":"constructor method exists class can take named arguments list elements.","code":""},{"path":[]},{"path":"/reference/FLModelSims.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLModelSims — FLModelSims","text":"FLR Team","code":""},{"path":"/reference/FLPar.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLPar — FLPar","title":"Class FLPar — FLPar","text":"class storing parameters model.","code":""},{"path":"/reference/FLPar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLPar — FLPar","text":"","code":"FLPar(object, ...)"},{"path":"/reference/FLPar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLPar — FLPar","text":"FLPar class based array class can store Monte Carlo samples names relevant parameter vectors. Methods class include subsetting replacement FLQuant class. methods extracting statistics sample (mean, median etc.) plotting parameter samples.","code":""},{"path":"/reference/FLPar.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLPar — FLPar","text":".Data Describe slot. array. units Units measurement. character.","code":""},{"path":[]},{"path":"/reference/FLPar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLPar — FLPar","text":"FLR Team","code":""},{"path":"/reference/FLPar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLPar — FLPar","text":"","code":"FLPar(rnorm(4), params=c('a','b','c','sigma2')) #> An object of class \"FLPar\" #> params #>       a       b       c  sigma2  #>  1.2404  0.6857 -0.0268  0.3096  #> units:  NA NA NA NA   FLPar(rnorm(20), dimnames=list(params=c('a','b'), year=1990:1999, iter=1),   units='NA') #> An object of class \"FLPar\" #>       year #> params 1990     1991     1992     1993     1994     1995     1996     1997     #>      a  0.24986  0.59938  0.09072 -0.48178 -0.85954  1.21506 -0.08591 -0.21826 #>      b -1.35646  0.00865 -0.65706  0.01776  1.35770  1.45391 -0.61757 -1.32601 #>       year #> params 1998     1999     #>      a -2.36221  0.25440 #>      b -1.40997  0.29587 #> units:  NA   # with iters   FLPar(rnorm(80), params=c('a', 'b'), iter=1:40) #> An object of class \"FLPar\" #> iters:  40  #>  #> params #>              a              b  #> 0.12703(1.477) 0.20103(0.714)  #> units:  NA NA"},{"path":"/reference/FLParJK.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLParJK — FLParJK","title":"Class FLParJK — FLParJK","text":"class storing parameters jackknifed model fit.","code":""},{"path":"/reference/FLParJK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLParJK — FLParJK","text":"","code":"# S4 method for ANY FLParJK(object, orig)  # S4 method for FLParJK orig(object)"},{"path":"/reference/FLParJK.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLParJK — FLParJK","text":".Data Jackknifed object, FLPar. units units measurement, character. orig original object jackknifed, FLPar.","code":""},{"path":"/reference/FLParJK.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"Class FLParJK — FLParJK","text":"can inspect class validity function using getValidity(getClassDef('FLParJK'))","code":""},{"path":"/reference/FLParJK.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"Class FLParJK — FLParJK","text":"slots class accessor replacement methods defined allow retrieving substituting individual slots. values passed replacement need class slot. numeric vector can also used replacing FLQuant slots, vector used substitute values slot, attributes.","code":""},{"path":"/reference/FLParJK.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLParJK — FLParJK","text":"Objects class commonly created calling jackknife() method construction method exists class can take named arguments slots. slots created match requirements class validity.","code":""},{"path":[]},{"path":"/reference/FLParJK.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLParJK — FLParJK","text":"FLR Team","code":""},{"path":"/reference/FLPars.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLPars — FLPars","title":"Class FLPars — FLPars","text":"list FLPar objects.","code":""},{"path":"/reference/FLPars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLPars — FLPars","text":"","code":"FLPars(object, ...)  # S4 method for ANY FLPars(object, ...)  # S4 method for missing FLPars(object, ...)  # S4 method for list FLPars(object)  # S4 method for FLPars FLPars(object)"},{"path":"/reference/FLPars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLPars — FLPars","text":"object unnamed object added list ... named unnamed objects","code":""},{"path":"/reference/FLPars.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLPars — FLPars","text":".Data Internal S4 data representation, class list. desc textual description object contents lock Can object extended/trimmed? TRUE FALSE. names character vector element names","code":""},{"path":"/reference/FLPars.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLPars — FLPars","text":"constructor method exists class can take named arguments list elements.","code":""},{"path":[]},{"path":"/reference/FLPars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLPars — FLPars","text":"FLR Team","code":""},{"path":"/reference/FLQuant.html","id":null,"dir":"Reference","previous_headings":"","what":"FLQuant class for numerical data — FLQuant","title":"FLQuant class for numerical data — FLQuant","text":"FLQuant class six-dimensional array designed store quantitative data used fisheries population modelling.","code":""},{"path":"/reference/FLQuant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FLQuant class for numerical data — FLQuant","text":"","code":"FLQuant(object, ...)  # S4 method for missing FLQuant(   object,   dim = rep(1, 6),   dimnames = \"missing\",   quant = NULL,   units = \"NA\",   iter = 1 )  # S4 method for vector FLQuant(   object,   dim = rep(1, 6),   dimnames = \"missing\",   quant = NULL,   units = \"NA\",   iter = 1,   fill.iter = TRUE )  # S4 method for array FLQuant(   object,   dim = rep(1, 6),   dimnames = \"missing\",   quant = NULL,   units = \"NA\",   iter = 1,   fill.iter = TRUE )  # S4 method for matrix FLQuant(object, dim = lapply(dimnames, length), dimnames = \"missing\", ...)  # S4 method for FLQuant FLQuant(   object,   quant = attributes(object)[[\"quant\"]],   units = attributes(object)[[\"units\"]],   dimnames = attributes(object)[[\"dimnames\"]],   iter = dim(object)[6],   fill.iter = TRUE,   dim = attributes(object)[[\"dim\"]] )"},{"path":"/reference/FLQuant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FLQuant class for numerical data — FLQuant","text":"object Input numeric object ... Additional arguments dim Vector dimension lengths dimnames List dimension names quant Character vector name first dimension units Character vctor units measurement, see uom iter Number iterations, .e. length 6th dimension fill.iter iterations filled content first?","code":""},{"path":"/reference/FLQuant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FLQuant class for numerical data — FLQuant","text":"six dimensions named. name first dimension can altered user default, quant. typically age length data related natural populations. name accepted 'cohort', data structured along cohort stored using FLCohort class instead. dimensions always names follows: year, calendar year datapoint; unit, kind division population, e.g. sex; season, temporal strata shorter year; area, kind spatial stratification; iter, replicates obtained bootstrap, simulation Bayesian analysis. addition, FLQuant objects contain units attribute, class character, intended contain units measurement relevant data.","code":""},{"path":"/reference/FLQuant.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"FLQuant class for numerical data — FLQuant","text":".Data 6-D array numeric data. array. units Units measurement. character.","code":""},{"path":"/reference/FLQuant.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"FLQuant class for numerical data — FLQuant","text":"Dimensions: Array must 6 dimensions Content: Array must class numeric Dimnames: Dimensions 2 6 must named \"year\", \"unit\", \"season\", \"area\" \"iter\"","code":""},{"path":"/reference/FLQuant.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"FLQuant class for numerical data — FLQuant","text":"FLQuant method provides flexible constructor objects class. Inputs can class: vector: numeric vector placed along year dimension default. matrix: matrix placed along dimensions 1 2, unless otherwise specified 'dim'. matrix dimnames used unless overriden 'dimnames'. array: missing: input given, empty FLQuant  (NA) returned, dimensions dimnames can still specified. Additional arguments constructor: units: units measurement, character string. dim: dimensions object, numeric vector length 6. dimnames: list object providing dimnames array. different default ones need specified. quant: name first dimension, different 'quant', character string.","code":""},{"path":[]},{"path":"/reference/FLQuant.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"FLQuant class for numerical data — FLQuant","text":"FLR Team","code":""},{"path":"/reference/FLQuant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FLQuant class for numerical data — FLQuant","text":"","code":"# creating a new FLQuant flq <- FLQuant() flq <- FLQuant(1:10, dim=c(2,5)) summary(flq) #> An object of class \"FLQuant\" with: #> dim  :  2 5 1 1 1 1  #> quant:  quant  #> units:  NA  #>  #> Min    :  1  #> 1st Qu.:  3.25  #> Mean   :  5.5  #> Median :  5.5  #> 3rd Qu.:  7.75  #> Max    :  10  #> NAs    :  0 %  # Vectors are used column first... dim(FLQuant(1:10)) #> [1]  1 10  1  1  1  1 # ...while matrices go row first. dim(FLQuant(matrix(1:10))) #> [1] 10  1  1  1  1  1  FLQuant(matrix(rnorm(100), ncol=20)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1         2         3         4         5         6         7         #>     1  0.671420  1.250601 -1.574575 -1.653281 -0.386304 -2.377515 -0.205677 #>     2  1.230022 -1.876237 -0.196319 -2.761868 -0.242499 -0.065409  0.234881 #>     3  1.645468 -0.368788  0.915060  0.264369  0.220593 -0.469705  0.110628 #>     4 -0.182926 -2.129297  1.078637  1.024572 -1.481090 -0.280516  0.274202 #>     5 -1.379258  0.337646  1.452803 -0.659186  0.724691  0.574837  1.574920 #>      year #> quant 8         9         10        11        12        13        14        #>     1  0.567768 -0.579388 -0.420207  1.138668 -0.096206  0.427619 -0.395441 #>     2 -0.059612  0.942199 -0.255375  0.190523  0.694509 -0.566479 -0.130702 #>     3 -0.149588 -0.706361 -0.369238 -1.366394 -0.474591 -0.833835 -1.999494 #>     4  0.266169 -1.275402  1.212448 -1.298103  1.763131  0.398259 -0.995931 #>     5  0.528403  0.733260 -0.445363 -2.137098  2.025846 -1.474538  0.420114 #>      year #> quant 15        16        17        18        19        20        #>     1 -0.062862 -0.780270  1.513670 -0.610945 -0.144902 -0.094504 #>     2 -0.080132 -1.776959  0.033989  1.251884 -0.324447  0.032556 #>     3 -0.032283 -0.427835  0.740793  0.250319 -0.172565  0.461290 #>     4 -0.718981 -2.031027 -1.270808 -1.705582 -1.236063  1.381400 #>     5 -1.116561  2.750765 -0.163564 -0.855413 -1.902304 -0.416476 #>  #> units:  NA   FLQuant(array(rnorm(100), dim=c(5,2,1,1,1,10))) #> An object of class \"FLQuant\" #> iters:  10  #>  #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1               2               #>     1 -0.25995(1.298)  0.34655(0.434) #>     2 -0.46356(0.383) -0.57083(1.013) #>     3 -0.22391(1.044) -0.61925(0.631) #>     4 -0.51552(0.419) -0.46943(0.615) #>     5 -0.23508(0.617)  0.39845(0.978) #>  #> units:  NA  FLQuant(array(rnorm(100), dim=c(5,2)), iter=10) #> An object of class \"FLQuant\" #> iters:  10  #>  #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1            2            #>     1  0.696270(0) -0.830808(0) #>     2  2.008870(0)  1.402474(0) #>     3 -0.056978(0) -0.723869(0) #>     4  0.240416(0)  1.330580(0) #>     5 -0.021890(0) -0.811333(0) #>  #> units:  NA   # working with FLQuant objects flq <- FLQuant(rnorm(200), dimnames=list(age=1:5, year=2000:2008), units='diff') summary(flq) #> An object of class \"FLQuant\" with: #> dim  :  5 9 1 1 1 1  #> quant:  age  #> units:  diff  #>  #> Min    :  -1.69018  #> 1st Qu.:  -0.715704  #> Mean   :  -0.02313333  #> Median :  -0.08009077  #> 3rd Qu.:  0.5949239  #> Max    :  1.915691  #> NAs    :  0 %  flq[1,] #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2000     2001     2002     2003     2004     2005     2006     2007     #>   1 -0.27494  0.81959 -0.38404 -0.34301  0.47958 -0.79594 -0.94297 -0.18924 #>    year #> age 2008     #>   1 -0.45863 #>  #> units:  diff  flq[,1] #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2000     #>   1 -0.27494 #>   2  0.48545 #>   3  0.91698 #>   4 -0.98534 #>   5 -1.49119 #>  #> units:  diff  flq[1,1] <- 0  units(flq) #> [1] \"diff\" quant(flq) #> [1] \"age\"  plot(flq)    FLQuant() #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1  #>   all NA #>  #> units:  NA  summary(FLQuant()) #> An object of class \"FLQuant\" with: #> dim  :  1 1 1 1 1 1  #> quant:  quant  #> units:  NA  #>  #> Min    :  NA #> 1st Qu.:  NA #> Mean   :  NA #> Median :  NA #> 3rd Qu.:  NA #> Max    :  NA #> NAs    :  100 %  FLQuant(1:10) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1  2  3  4  5  6  7  8  9  10 #>   all  1  2  3  4  5  6  7  8  9 10 #>  #> units:  NA   FLQuant(array(rnorm(9), dim=c(3,3,3))) #> An object of class \"FLQuant\" #> , , unit = 1, season = all, area = unique #>  #>      year #> quant 1         2         3         #>     1  0.971396  0.225973  0.334415 #>     2 -0.579663 -0.514857 -0.093491 #>     3  1.604180 -0.823788  0.304062 #>  #> , , unit = 2, season = all, area = unique #>  #>      year #> quant 1         2         3         #>     1  0.971396  0.225973  0.334415 #>     2 -0.579663 -0.514857 -0.093491 #>     3  1.604180 -0.823788  0.304062 #>  #> , , unit = 3, season = all, area = unique #>  #>      year #> quant 1         2         3         #>     1  0.971396  0.225973  0.334415 #>     2 -0.579663 -0.514857 -0.093491 #>     3  1.604180 -0.823788  0.304062 #>  #> units:  NA  FLQuant(matrix(rnorm(12), nrow=4, ncol=3)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1         2         3         #>     1 -0.476508  0.093501 -0.583969 #>     2 -0.241312 -0.366949 -0.193450 #>     3  0.824156 -0.129409 -0.269547 #>     4 -1.555644  0.407796  0.073658 #>  #> units:  NA   FLQuant(FLQuant(array(rnorm(9), dim=c(3,3,3)), units='kg'), units='t') #> An object of class \"FLQuant\" #> , , unit = 1, season = all, area = unique #>  #>      year #> quant 1         2         3         #>     1  0.357236 -1.609575  0.176436 #>     2  0.550428 -1.049710  1.128307 #>     3  0.038402  2.052034  0.435002 #>  #> , , unit = 2, season = all, area = unique #>  #>      year #> quant 1         2         3         #>     1  0.357236 -1.609575  0.176436 #>     2  0.550428 -1.049710  1.128307 #>     3  0.038402  2.052034  0.435002 #>  #> , , unit = 3, season = all, area = unique #>  #>      year #> quant 1         2         3         #>     1  0.357236 -1.609575  0.176436 #>     2  0.550428 -1.049710  1.128307 #>     3  0.038402  2.052034  0.435002 #>  #> units:  t"},{"path":"/reference/FLQuantDistr.html","id":null,"dir":"Reference","previous_headings":"","what":"A class for samples of a probability distribution — FLQuantDistr","title":"A class for samples of a probability distribution — FLQuantDistr","text":"extended FLQuant class holds measure central tendendy (mean, median) dispersion (tipically variance), later used generate, example, random numbers mean variances.","code":""},{"path":"/reference/FLQuantDistr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class for samples of a probability distribution — FLQuantDistr","text":"","code":"FLQuantDistr(object, var, ...)  # S4 method for ANY,ANY FLQuantDistr(object, var, ...)  # S4 method for FLQuant,FLQuant FLQuantDistr(object, var, units = object@units, distr = \"norm\")"},{"path":"/reference/FLQuantDistr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A class for samples of a probability distribution — FLQuantDistr","text":"object Input numeric object ... Additonal arguments","code":""},{"path":"/reference/FLQuantDistr.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A class for samples of a probability distribution — FLQuantDistr","text":".Data Unnamed slot storing mean (measure expectation) (FLQuant). var Variance, measure dispersion, (FLQuant). distr Name probability distribution, see Details (character).","code":""},{"path":"/reference/FLQuantDistr.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"A class for samples of a probability distribution — FLQuantDistr","text":"slot dims .Data var slots must dimensions. slot dimnames .Data var slots must dimnames. can inspect class validity function using getValidity(getClassDef('FLQuantDistr'))","code":""},{"path":"/reference/FLQuantDistr.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"A class for samples of a probability distribution — FLQuantDistr","text":"slots class accessor replacement methods defined allow retrieving substituting individual slots. values passed replacement need class slot. numeric vector can also used replacing FLQuant slots, vector used substitute values slot, attributes. contents unnamed slot (.Data) can accessed e() method, see Example .","code":""},{"path":"/reference/FLQuantDistr.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"A class for samples of a probability distribution — FLQuantDistr","text":"construction method exists class can take named arguments slots. slots created match requirements class validity. unnamed FLQuant object provided, used .Data slot.","code":""},{"path":"/reference/FLQuantDistr.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"A class for samples of a probability distribution — FLQuantDistr","text":"Methods exist various calculations based values stored class: Arith .","code":""},{"path":"/reference/FLQuantDistr.html","id":"arithmetic","dir":"Reference","previous_headings":"","what":"Arithmetic","title":"A class for samples of a probability distribution — FLQuantDistr","text":"methods Arith group defined objects class, operations two FLQuantDistr objects objects class FLQuant (FLArray) follows: +, FLQuantDistr,FLArray . -, FLQuantDistr,FLArray . , FLQuantDistr,FLArray. /, FLQuantDistr,FLArray. +, FLQuantDistr,FLQuantDistr. -, FLQuantDistr,FLQuantDistr. , FLQuantDistr,FLQuantDistr .","code":""},{"path":[]},{"path":"/reference/FLQuantDistr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A class for samples of a probability distribution — FLQuantDistr","text":"FLR Team","code":""},{"path":"/reference/FLQuantDistr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A class for samples of a probability distribution — FLQuantDistr","text":"","code":"data(ple4) fqd <- FLQuantDistr(catch.n(ple4), var=catch.n(ple4) * 10, distr='norm')"},{"path":"/reference/FLQuantJK.html","id":null,"dir":"Reference","previous_headings":"","what":"A class for jackknifing fisheries data — FLQuantJK","title":"A class for jackknifing fisheries data — FLQuantJK","text":"extended FLQuant class holds jackknifed FLQuant, one iter missing one element, original object, separate FLQuant orig slot.","code":""},{"path":"/reference/FLQuantJK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class for jackknifing fisheries data — FLQuantJK","text":"","code":"# S4 method for ANY FLQuantJK(object, orig)  # S4 method for FLQuantJK orig(object)  # S4 method for FLQuants orig(object)"},{"path":"/reference/FLQuantJK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A class for jackknifing fisheries data — FLQuantJK","text":"object Input numeric object ... Additonal arguments","code":""},{"path":"/reference/FLQuantJK.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A class for jackknifing fisheries data — FLQuantJK","text":".Data Unnamed slot containing jackknifed object(FLQuant). orig Original object, (FLQuant).","code":""},{"path":"/reference/FLQuantJK.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"A class for jackknifing fisheries data — FLQuantJK","text":"slot dims .Data orig slots must dimensions 1-5. slot dimnames .Data var slots must dimnames 1-5. can inspect class validity function using getValidity(getClassDef('FLQuantJK'))","code":""},{"path":"/reference/FLQuantJK.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"A class for jackknifing fisheries data — FLQuantJK","text":"slots class accessor replacement methods defined allow retrieving substituting individual slots. values passed replacement need class slot. numeric vector can also used replacing FLQuant slots, vector used substitute values slot, attributes.","code":""},{"path":"/reference/FLQuantJK.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"A class for jackknifing fisheries data — FLQuantJK","text":"Objects class must constructed FLQuant jackknifed, jackknife method.","code":""},{"path":"/reference/FLQuantJK.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"A class for jackknifing fisheries data — FLQuantJK","text":"methods defined FLQuant class available, operate jackknifed (.Data) slot. Please use orig() apply original object stored class.","code":""},{"path":[]},{"path":"/reference/FLQuantJK.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A class for jackknifing fisheries data — FLQuantJK","text":"FLR Team","code":""},{"path":"/reference/FLQuantJK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A class for jackknifing fisheries data — FLQuantJK","text":"","code":"data(ple4) fjk <- jackknife(stock(ple4)) # New object has as many iters as length of jackknifed dimension (defaults to 'year') dim(fjk) #> [1]  1 61  1  1  1 61"},{"path":"/reference/FLQuantPoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLQuantPoint — FLQuantPoint","title":"Class FLQuantPoint — FLQuantPoint","text":"FLQuantPoint class summarizes contents FLQuant object multiple iterations along sixth dimension using number descriptive statistics.","code":""},{"path":"/reference/FLQuantPoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLQuantPoint — FLQuantPoint","text":"","code":"FLQuantPoint(object, ...)  # S4 method for missing FLQuantPoint(..., units = \"NA\", n = 1)  # S4 method for FLQuant FLQuantPoint(object, ..., probs = c(0.25, 0.75))  # S4 method for FLQuantPoint n(object, ...)"},{"path":"/reference/FLQuantPoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLQuantPoint — FLQuantPoint","text":"object Input numeric object ... Additonal arguments","code":""},{"path":"/reference/FLQuantPoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLQuantPoint — FLQuantPoint","text":"object class set structure along sixth dimension (iter), always length 5, dimnames mean, median, var, uppq lowq. refer, respectively, sample mean, sample median, variance, lower (0.25) upper (0.75) quantiles. Objects class wil typically created FLQuant. various statistics calculated along iter dimension original FLQuant using apply.","code":""},{"path":"/reference/FLQuantPoint.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLQuantPoint — FLQuantPoint","text":".Data main array holding computed statistics. array. units Units measurement. character.","code":""},{"path":"/reference/FLQuantPoint.html","id":"accesors","dir":"Reference","previous_headings":"","what":"Accesors","title":"Class FLQuantPoint — FLQuantPoint","text":"mean,mean<-: 'mean' element 6th dimension, arithmetic mean. median,median<-: 'median' element 6th dimension, median. var,var<-: 'var' element 6th dimension, variance. lowq,lowq<-: 'lowq' element 6th dimension, lower quantile (0.25 default). uppq,uppq<-: 'uppq' element 6th dimension, upper quantile (0.75 default). quantile: returns 'lowq' 'uppq' iter, depending value 'probs' (0.25 0.75).","code":""},{"path":"/reference/FLQuantPoint.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLQuantPoint — FLQuantPoint","text":"Inputs can class: FLQuant: FLQuant object iters (.e. dim6 > 1)","code":""},{"path":"/reference/FLQuantPoint.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"Class FLQuantPoint — FLQuantPoint","text":"iter: iter dimension length 5. Dimnames: iter dimnames 'mean', 'median', 'var', 'uppq' 'lowq'","code":""},{"path":[]},{"path":"/reference/FLQuantPoint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLQuantPoint — FLQuantPoint","text":"FLR Team","code":""},{"path":"/reference/FLQuantPoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLQuantPoint — FLQuantPoint","text":"","code":"flq <- FLQuant(rlnorm(2000), dim=c(10,20,1,1,1,200), units=\"kg\") flqp <- FLQuantPoint(flq) flqp <- FLQuantPoint(flq, probs=c(0.05, 0.95)) summary(flqp) #> An object of class \"FLQuantPoint\" with: #> dim  :  10 20 1 1 1 5  #> quant:  quant  #> units:  kg  #>  #> 1st Qu.:  0.2798872  #> Mean   :  1.652017  #> Median :  1.072711  #> Var    :  4.229131  #> 3rd Qu.:  5.681206  mean(flqp) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       2       3       4       5       6       7       8       9       #>    1  1.64518 3.29503 0.91802 2.28167 1.79148 1.21329 1.04418 1.31054 1.59807 #>    2  1.30500 2.70891 1.51304 0.65337 1.26083 2.03442 1.24816 1.84421 1.78849 #>    3  1.72608 1.28226 1.87914 0.90563 2.98732 1.09821 1.56460 1.74708 1.50160 #>    4  1.46081 1.68573 3.36316 1.14047 2.53486 1.33153 1.89569 0.83789 2.07323 #>    5  1.11749 1.92763 0.86117 1.18337 2.33317 1.50922 1.32713 1.04796 1.39750 #>    6  2.25480 2.32396 2.29371 1.38517 1.59304 2.20574 1.33174 1.14754 1.08192 #>    7  1.59368 1.02706 1.27412 2.13379 1.03769 2.39800 1.73798 1.41104 1.56261 #>    8  1.12317 1.20965 1.30224 1.60504 2.38692 1.54433 0.92678 2.15185 1.90446 #>    9  2.00305 1.31471 1.76567 2.12799 2.20142 1.83648 1.55606 1.49897 1.01159 #>    10 2.78900 1.57454 1.84430 1.03200 1.67608 1.44640 0.90141 2.08572 1.48879 #>      year #> quant 10      11      12      13      14      15      16      17      18      #>    1  1.56385 0.69410 1.84355 1.17989 0.78158 2.42777 1.65084 0.94388 2.09289 #>    2  1.10761 0.89736 1.22099 1.89994 1.76549 4.46254 2.02941 1.08578 1.65101 #>    3  1.73257 2.27441 2.05426 2.10051 0.94218 1.26533 1.35407 1.87850 2.98190 #>    4  1.27797 1.93892 1.19289 1.01922 1.61901 2.16790 1.68390 1.58832 1.03811 #>    5  0.92071 1.80061 1.95344 1.86233 1.21863 1.66589 1.40279 1.68220 1.61940 #>    6  1.72523 1.69635 1.14565 0.96003 2.07596 1.55076 0.96603 1.66420 0.82132 #>    7  2.36870 1.03941 2.61099 1.93239 1.36250 1.85875 3.44759 2.26322 1.84290 #>    8  1.37974 1.57554 1.53029 1.66965 3.04222 0.90560 1.36770 2.68153 2.11631 #>    9  0.86522 3.63644 1.06735 1.15863 1.99009 2.30144 1.29083 2.15369 1.14241 #>    10 1.32750 1.20672 1.79150 1.39005 1.80739 0.89218 1.79581 1.45571 0.82504 #>      year #> quant 19      20      #>    1  0.92426 1.09014 #>    2  1.88627 1.64884 #>    3  1.51402 1.35284 #>    4  1.36715 1.42840 #>    5  0.98822 2.28207 #>    6  4.54409 1.28512 #>    7  1.25515 0.91270 #>    8  1.19856 2.69694 #>    9  2.24212 2.63695 #>    10 1.17621 1.46418 #>  #> units:  kg  var(flqp) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1          2          3          4          5          6          #>    1    0.773828  33.013582   0.228222   8.754118   9.362816   1.574253 #>    2    0.350902   3.593010   2.171765   0.132745   1.630882   4.395036 #>    3    4.202308   1.563639   2.142253   0.521406   4.429209   0.809702 #>    4    3.482882   2.885003  37.890217   0.728480   8.297854   4.574640 #>    5    0.606156   2.881837   0.491559   1.439986   4.687646   1.141950 #>    6    3.747210   3.940274  11.886978   2.625321   3.616634   5.002037 #>    7    0.620601   0.394341   1.677674   1.714849   1.000042   4.465067 #>    8    0.536856   1.124677   1.146664   1.535522   8.600610   2.507955 #>    9    3.370610   0.533425   4.943101   3.000160   8.153028   1.129520 #>    10   6.223457   1.315425   3.192170   0.673410   1.813376   1.317185 #>      year #> quant 7          8          9          10         11         12         #>    1    0.931391   1.329629   1.736199   1.371791   0.235844   4.142285 #>    2    1.396252   2.164757   1.011559   1.336895   0.963449   0.848331 #>    3    0.828194   1.675462   0.908875   5.756017  10.346841   2.733438 #>    4    6.455043   0.323461   4.674825   2.081296   3.852284   1.478778 #>    5    0.637611   0.190585   2.216282   0.982077   2.057045   4.307113 #>    6    0.272101   0.605174   1.346165   6.373578   1.262074   0.309458 #>    7    2.273265   0.995984   2.489106   6.969697   1.369903  18.785591 #>    8    2.678302   8.404959   3.326250   2.532460   2.024053   1.246508 #>    9    1.602273   0.887670   0.426192   0.320899  14.333967   1.322233 #>    10   0.521493   9.489667   1.572506   1.508843   0.757442   5.428854 #>      year #> quant 13         14         15         16         17         18         #>    1    0.847675   0.359355  13.193909   2.034201   0.268396   2.864472 #>    2    6.730991   1.750119  13.059929   1.491208   1.240315   1.244067 #>    3    3.370519   0.566554   1.775179   0.767225   3.671908   5.531114 #>    4    0.326756   2.823079   4.319991   5.439551   1.434438   0.645693 #>    5    1.813838   0.271813   2.077980   1.269502   3.237958   4.431929 #>    6    0.576954   5.800504   1.424055   0.808698   1.213016   0.209303 #>    7    5.524967   1.411770   2.656463  40.457672   4.629545   1.698692 #>    8    1.370653   8.769808   0.212540   1.318109  14.448975   1.382577 #>    9    1.482416   7.974917  14.192154   0.768127   7.079203   0.595614 #>    10   3.127598   4.492923   0.268376   2.294440   1.433046   0.258266 #>      year #> quant 19         20         #>    1    0.098087   0.679265 #>    2    3.594618   0.751188 #>    3    0.997108   1.313655 #>    4    1.335136   0.699928 #>    5    0.399927  15.457441 #>    6  112.211678   1.547067 #>    7    1.330136   0.188752 #>    8    0.843808  37.126654 #>    9    2.770756  23.788691 #>    10   1.374000   1.600941 #>  #> units:  kg  rnorm(200, flqp) #> An object of class \"FLQuant\" #> iters:  200  #>  #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1               2               3               4               #>    1  1.67773( 1.019) 2.79742( 5.173) 0.92174( 0.451) 2.75226( 2.953) #>    2  1.20156( 0.499) 2.62503( 1.805) 1.35318( 1.395) 0.69246( 0.392) #>    3  1.25338( 1.852) 1.38833( 1.061) 1.81636( 1.330) 0.81357( 0.744) #>    4  1.59239( 1.823) 1.67853( 1.733) 3.17443( 6.112) 1.07165( 0.748) #>    5  1.07626( 0.794) 1.97588( 1.668) 0.81847( 0.588) 1.06652( 1.349) #>    6  1.93827( 1.650) 2.29044( 2.097) 2.51356( 3.547) 1.32694( 1.439) #>    7  1.59633( 0.760) 1.08860( 0.637) 1.30988( 1.394) 2.18072( 1.320) #>    8  1.03983( 0.769) 1.27310( 0.968) 1.29644( 1.023) 1.49768( 1.340) #>    9  2.00135( 2.085) 1.32907( 0.727) 1.44506( 2.129) 2.21526( 1.819) #>    10 2.64249( 2.355) 1.68938( 1.227) 1.44610( 1.984) 0.98585( 0.781) #>      year #> quant 5               6               7               8               #>    1  1.52225( 3.500) 1.15206( 1.120) 0.98372( 0.929) 1.37355( 1.149) #>    2  1.23594( 1.338) 1.99427( 2.175) 1.25985( 1.010) 1.79425( 1.487) #>    3  3.14167( 1.860) 1.14661( 0.877) 1.52139( 1.013) 1.67668( 1.370) #>    4  2.40385( 2.587) 1.25102( 2.143) 1.78835( 2.340) 0.89011( 0.544) #>    5  2.49375( 1.959) 1.61615( 1.045) 1.28612( 0.796) 1.05873( 0.446) #>    6  1.37344( 1.728) 2.26892( 2.279) 1.32682( 0.474) 1.07545( 0.760) #>    7  1.04509( 0.981) 2.28524( 2.105) 1.64015( 1.636) 1.43620( 0.970) #>    8  2.75003( 3.190) 1.77417( 1.651) 1.01307( 1.718) 1.77110( 3.105) #>    9  2.03563( 2.833) 1.81603( 0.995) 1.71698( 1.361) 1.55714( 1.020) #>    10 1.47178( 1.456) 1.52543( 1.119) 0.95600( 0.714) 2.41489( 3.274) #>      year #> quant 9               10              11              12              #>    1  1.52213( 1.266) 1.54261( 1.190) 0.63911( 0.512) 1.94004( 2.013) #>    2  1.83411( 0.996) 1.21350( 1.070) 0.96055( 1.040) 1.30801( 1.051) #>    3  1.58561( 0.977) 1.83113( 2.538) 1.88451( 3.056) 2.16063( 1.738) #>    4  2.28693( 2.044) 1.24561( 1.506) 1.80938( 1.771) 1.21654( 1.239) #>    5  1.44150( 1.481) 0.86161( 0.837) 1.74544( 1.480) 1.95573( 2.096) #>    6  0.93106( 1.101) 1.68451( 2.635) 1.40890( 1.254) 1.19512( 0.499) #>    7  1.63187( 1.629) 2.33292( 2.311) 1.05828( 1.210) 2.82641( 4.279) #>    8  1.59665( 1.878) 1.42625( 1.574) 1.70571( 1.213) 1.42958( 1.029) #>    9  1.03911( 0.690) 0.88049( 0.548) 2.88800( 4.185) 0.90842( 1.147) #>    10 1.35472( 1.366) 1.18378( 1.353) 1.24765( 0.859) 1.81168( 2.149) #>      year #> quant 13              14              15              16              #>    1  1.04557( 0.926) 0.73765( 0.545) 2.29027( 3.929) 1.61029( 1.513) #>    2  2.03138( 2.859) 1.63707( 1.193) 3.95733( 3.334) 2.03255( 1.339) #>    3  2.10061( 1.844) 0.90685( 0.882) 1.16351( 1.360) 1.44278( 0.927) #>    4  1.03296( 0.613) 1.61995( 1.682) 1.96936( 2.389) 1.51504( 2.308) #>    5  1.92218( 1.516) 1.19131( 0.518) 1.81635( 1.538) 1.29339( 1.019) #>    6  1.01386( 0.867) 2.07077( 2.397) 1.42662( 1.332) 0.85362( 0.924) #>    7  1.88584( 2.287) 1.45788( 1.276) 2.02199( 1.579) 3.27482( 5.897) #>    8  1.73950( 0.987) 3.27551( 3.193) 0.91520( 0.428) 1.29996( 1.128) #>    9  1.02784( 1.418) 2.28569( 3.053) 2.67612( 3.865) 1.20793( 0.848) #>    10 1.54345( 2.026) 1.91687( 1.992) 0.80519( 0.526) 1.75438( 1.676) #>      year #> quant 17              18              19              20              #>    1  0.92830( 0.486) 2.19043( 1.479) 0.88994( 0.358) 1.03843( 0.774) #>    2  0.96903( 1.172) 1.47229( 1.215) 2.09426( 1.721) 1.65030( 0.773) #>    3  1.75553( 1.958) 2.73600( 2.236) 1.60659( 1.151) 1.21382( 1.024) #>    4  1.52115( 1.362) 0.98726( 0.769) 1.34391( 1.141) 1.50673( 0.865) #>    5  2.07968( 2.104) 1.38206( 2.095) 0.97864( 0.644) 1.56586( 4.502) #>    6  1.64590( 1.083) 0.86576( 0.378) 5.82077(10.229) 1.45342( 1.226) #>    7  2.47404( 2.099) 2.00410( 1.352) 1.28344( 1.127) 0.98570( 0.424) #>    8  2.67289( 3.564) 1.94825( 1.304) 1.05250( 1.027) 2.45178( 5.420) #>    9  2.43746( 2.605) 1.17187( 0.706) 2.56057( 1.818) 2.39662( 5.306) #>    10 1.52610( 0.980) 0.78980( 0.482) 1.20188( 1.196) 1.45607( 1.110) #>  #> units:  kg"},{"path":"/reference/FLQuants.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLQuants — FLQuants","title":"Class FLQuants — FLQuants","text":"FLQuants list FLQuant objects. similar standard list class. implements lock mechanism , turned , allow user increase decrease object length. elements FLQuants must class FLQuant.","code":""},{"path":"/reference/FLQuants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLQuants — FLQuants","text":"","code":"FLQuants(object, ...)  # S4 method for ANY FLQuants(object, ...)  # S4 method for FLComp FLQuants(object, ...)  # S4 method for missing FLQuants(object, ...)  # S4 method for list FLQuants(object, ...)  # S4 method for FLQuants FLQuants(object, ...)"},{"path":"/reference/FLQuants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLQuants — FLQuants","text":"object unnamed object added list ... named unnamed objects","code":""},{"path":"/reference/FLQuants.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLQuants — FLQuants","text":".Data data. list. names Names list elements. character. desc Description object. character. lock Lock mechanism, turned length list can modified adding removing elements. logical.","code":""},{"path":"/reference/FLQuants.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLQuants — FLQuants","text":"constructor method exists class can take named arguments list elements.","code":""},{"path":[]},{"path":"/reference/FLQuants.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLQuants — FLQuants","text":"FLR Team","code":""},{"path":"/reference/FLQuants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLQuants — FLQuants","text":"","code":"# Compute various FLStock indicators   data(ple4)   fqs <- FLQuants(ssb=ssb(ple4), catch=catch(ple4), rec=rec(ple4),     f=fbar(ple4))   summary(fqs) #> An object of class \"FLQuants\" #>  #> Elements: ssb catch rec f  #>  #> Name: ssb  #> \tdim  :  1 61 1 1 1 1  #> \tquant:  age  #> \tunits:  t  #>  #> \tMin    :  203390.9  #> \t1st Qu.:  290780.2  #> \tMean   :  387524  #> \tMedian :  361610.5  #> \t3rd Qu.:  430475.2  #> \tMax    :  913289.6  #> \tNAs    :  0 % #> Name: catch  #> \tdim  :  1 61 1 1 1 1  #> \tquant:  age  #> \tunits:  t  #>  #> \tMin    :  78360.36  #> \t1st Qu.:  131216.1  #> \tMean   :  160583.9  #> \tMedian :  149389.9  #> \t3rd Qu.:  175881.4  #> \tMax    :  315244.7  #> \tNAs    :  0 % #> Name: rec  #> \tdim  :  1 61 1 1 1 1  #> \tquant:  age  #> \tunits:  1000  #>  #> \tMin    :  367450  #> \t1st Qu.:  674010  #> \tMean   :  1108991  #> \tMedian :  915553  #> \t3rd Qu.:  1375880  #> \tMax    :  4303680  #> \tNAs    :  0 % #> Name: f  #> \tdim  :  1 61 1 1 1 1  #> \tquant:  age  #> \tunits:  f  #>  #> \tMin    :  0.1964252  #> \t1st Qu.:  0.3251898  #> \tMean   :  0.4379137  #> \tMedian :  0.448585  #> \t3rd Qu.:  0.5824118  #> \tMax    :  0.72432  #> \tNAs    :  0 %   xyplot(data~year|qname, fqs, type='b', scales=list(relation='free'))"},{"path":"/reference/FLS.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLS — FLS","title":"Class FLS — FLS","text":"virtual class forms basis FLStock FLStockLen classes. objects class can constructed.","code":""},{"path":"/reference/FLS.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"Class FLS — FLS","text":"None particular validity checks","code":""},{"path":"/reference/FLS.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLS — FLS","text":"catch Total catch weight (FLQuant). catch.n Catch numbers (FLQuant). catch.wt Mean catch weights (FLQuant). desc Description stock (character). discards Total discards weight (FLQuant). discards.n Discard numbers (FLQuant). discards.wt Mean discard weights (FLQuant). landings Total landings weight (FLQuant). landings.n Landing numbers (FLQuant). landings.wt Landing weights (FLQuant). stock Total stock weight (FLQuant). stock.n Stock numbers (FLQuant). stock.wt Mean stock weights (FLQuant). m Natural mortality (FLQuant). m.spwn Proportion natural mortality spawning (FLQuant). mat Proportion mature (FLQuant). harvest Harvest rate fishing mortality. units slot set 'harvest' 'f' accordingly (FLQuant). harvest.spwn Proportion harvest/fishing mortality spawning (FLQuant). name Name stock (character). range Named numeric vector containing quant year ranges, plusgroup quant range average fishing mortality calculated (numeric).","code":""},{"path":[]},{"path":"/reference/FLS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLS — FLS","text":"FLR Team","code":""},{"path":"/reference/FLSR.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLSR — FLSR","title":"Class FLSR — FLSR","text":"Class stock-recruitment models.","code":""},{"path":"/reference/FLSR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLSR — FLSR","text":"","code":"FLSR(model, ...)  # S4 method for ANY FLSR(model, ...)  # S4 method for missing FLSR(model, ...)"},{"path":"/reference/FLSR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLSR — FLSR","text":"series commonly-used stock-recruitment models already available, including corresponding likelihood functions calculation initial values. See SRModels details exact formulation implemented .","code":""},{"path":"/reference/FLSR.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLSR — FLSR","text":"name Name object (character). desc Description object (character). range Range (numeric). rec Recruitment series (FLQuant). ssb Index reproductive potential, e.g. SSB egg oor egg production (FLQuant). fitted Estimated values rec (FLQuant). residuals Residuals obtained model fit (FLArray). covar Covariates SR model (FLQuants). model Model formula (formula). gr Function returning gradient likelihood (function). logl Log-likelihood function (function). initial Function returning initial parameter values optimizer (function). params Estimated parameter values (FLPar). logLik Value log-likelihood (logLik). vcov Variance-covariance matrix (array). details Extra information model fit procedure (list). logerror error log scale (logical). distribution (factor). hessian Resulting Hessian matrix fit (array).","code":""},{"path":[]},{"path":"/reference/FLSR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLSR — FLSR","text":"FLR Team","code":""},{"path":"/reference/FLSR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLSR — FLSR","text":"","code":"# Create an empty FLSR object.   sr1 <- FLSR()    # Create an  FLSR object using the existing SR models.   sr2 <- FLSR(model = 'ricker')   sr2@model #> rec ~ a * ssb * exp(-b * ssb) #> <environment: 0x557b14ecccb8>   sr2@initial #> function(rec, ssb) { #> \t\t# The function to provide initial values #>     res  <-coefficients(lm(log(c(rec)/c(ssb))~c(ssb))) #>     return(FLPar(a=max(exp(res[1])), b=-max(res[2])))} #> <bytecode: 0x557b14ed25b8> #> <environment: 0x557b14ecccb8> #> attr(,\"lower\") #> [1] -Inf -Inf #> attr(,\"upper\") #> [1] Inf Inf   sr2@logl #> function(a, b, rec, ssb) #>       loglAR1(log(rec), log(a*ssb*exp(-b*ssb))) #> <bytecode: 0x557b14ed5f28> #> <environment: 0x557b14ecccb8>    sr3 <- FLSR(model = 'bevholt')   sr3@model #> rec ~ a * ssb/(b + ssb) #> <environment: 0x557b1499cd80>   sr3@initial #> function(rec, ssb) { #>     a <- max(quantile(c(rec), 0.75, na.rm = TRUE)) #>     b <- max(quantile(c(rec)/c(ssb), 0.9, na.rm = TRUE)) #>     return(FLPar(a = a, b = a/b))} #> <bytecode: 0x557b149b1a08> #> <environment: 0x557b1499cd80> #> attr(,\"lower\") #> [1] -Inf -Inf #> attr(,\"upper\") #> [1] Inf Inf   sr3@logl #> function(a, b, rec, ssb) #>       loglAR1(log(rec), log(a*ssb/(b+ssb))) #> <bytecode: 0x557b149b6348> #> <environment: 0x557b1499cd80>    # Create an FLSR using a function.   mysr1 <- function(){     model <- rec ~ a*ssb^b     return(list(model = model))}    sr4 <- FLSR(model = mysr1)    # Create an FLSR using a function and check that it works.   mysr2 <- function(){     formula <- rec ~ a+ssb*b      logl <- function(a, b, sigma, rec, ssb) sum(dnorm(rec,       a + ssb*b, sqrt(sigma), TRUE))     initial <- structure(function(rec, ssb) {       a   <- mean(rec)       b   <- 1       sigma <- sqrt(var(rec))        return(list(a=a, b=b, sigma=sigma))},         lower = c(0, 1e-04, 1e-04), upper = rep(Inf, 3))     return(list(model = formula, initial = initial, logl = logl))   }    ssb <- FLQuant(runif(10, 10000, 100000))   rec <- 10000 + 2*ssb + rnorm(10,0,1)   sr5 <- FLSR(model = mysr2, ssb = ssb, rec = rec)    sr5.mle <- fmle(sr5) #>   Nelder-Mead direct search function minimizer #> function value for initial parameters = 163406.701688 #>   Scaled convergence tolerance is 0.00243495 #> Stepsize computed as 7496.820439 #> BUILD              4 9181163641994.675781 141540.160296 #> LO-REDUCTION       6 2129977522396.011719 141540.160296 #> HI-REDUCTION       8 538828068094.632690 141540.160296 #> HI-REDUCTION      10 135471725247.814880 141540.160296 #> HI-REDUCTION      12 33943657773.507915 141540.160296 #> HI-REDUCTION      14 8485095365.236800 141540.160296 #> HI-REDUCTION      16 2116059492.850708 141540.160296 #> HI-REDUCTION      18 525861882.708607 141540.160296 #> HI-REDUCTION      20 129877061.405528 141540.160296 #> HI-REDUCTION      22 31729980.268444 141540.160296 #> HI-REDUCTION      24 7626132.270864 141540.160296 #> HI-REDUCTION      26 1817676.813873 141540.160296 #> HI-REDUCTION      28 474446.919157 141540.160296 #> HI-REDUCTION      30 219409.298128 141540.160296 #> REFLECTION        32 193097.769001 128665.987280 #> LO-REDUCTION      34 163406.701688 128665.987280 #> EXTENSION         36 141540.160296 86398.126977 #> LO-REDUCTION      38 136930.633178 86398.126977 #> HI-REDUCTION      40 128665.987280 86398.126977 #> EXTENSION         42 99061.935418 57313.041709 #> LO-REDUCTION      44 97008.208272 57313.041709 #> EXTENSION         46 86398.126977 31904.956474 #> REFLECTION        48 61527.247440 31099.754288 #> HI-REDUCTION      50 57313.041709 31099.754288 #> EXTENSION         52 41725.116784 9994.304172 #> LO-REDUCTION      54 31904.956474 9994.304172 #> EXTENSION         56 31099.754288 7899.295274 #> EXTENSION         58 16622.579730 2362.855801 #> REFLECTION        60 9994.304172 865.531551 #> HI-REDUCTION      62 7899.295274 865.531551 #> LO-REDUCTION      64 2362.855801 697.123217 #> LO-REDUCTION      66 2061.396804 131.370456 #> HI-REDUCTION      68 865.531551 131.370456 #> LO-REDUCTION      70 697.123217 131.370456 #> HI-REDUCTION      72 300.924786 131.370456 #> HI-REDUCTION      74 157.736501 121.566363 #> HI-REDUCTION      76 141.827460 73.447339 #> LO-REDUCTION      78 131.370456 72.115881 #> HI-REDUCTION      80 121.566363 72.115881 #> LO-REDUCTION      82 86.968056 72.115881 #> HI-REDUCTION      84 80.304614 72.115881 #> LO-REDUCTION      86 74.328873 72.115881 #> HI-REDUCTION      88 73.447339 71.407375 #> HI-REDUCTION      90 72.905934 70.943981 #> LO-REDUCTION      92 72.115881 70.785005 #> HI-REDUCTION      94 71.407375 70.785005 #> HI-REDUCTION      96 71.092687 70.785005 #> HI-REDUCTION      98 70.943981 70.785005 #> HI-REDUCTION     100 70.917673 70.763889 #> LO-REDUCTION     102 70.829585 70.752861 #> HI-REDUCTION     104 70.785005 70.752861 #> HI-REDUCTION     106 70.763889 70.749545 #> REFLECTION       108 70.761302 70.748467 #> REFLECTION       110 70.752861 70.744787 #> HI-REDUCTION     112 70.749545 70.740893 #> EXTENSION        114 70.748467 70.724123 #> HI-REDUCTION     116 70.744787 70.724123 #> LO-REDUCTION     118 70.740893 70.724123 #> EXTENSION        120 70.734920 70.722481 #> LO-REDUCTION     122 70.734458 70.722481 #> EXTENSION        124 70.724123 70.695721 #> LO-REDUCTION     126 70.723645 70.695721 #> LO-REDUCTION     128 70.722481 70.695721 #> EXTENSION        130 70.715444 70.676064 #> EXTENSION        132 70.703208 70.637697 #> LO-REDUCTION     134 70.695721 70.637697 #> EXTENSION        136 70.676064 70.611820 #> EXTENSION        138 70.644578 70.541271 #> LO-REDUCTION     140 70.637697 70.541271 #> LO-REDUCTION     142 70.611820 70.541271 #> EXTENSION        144 70.563786 70.443727 #> LO-REDUCTION     146 70.552506 70.443727 #> EXTENSION        148 70.541271 70.403008 #> EXTENSION        150 70.455309 70.266001 #> LO-REDUCTION     152 70.443727 70.266001 #> LO-REDUCTION     154 70.403008 70.266001 #> LO-REDUCTION     156 70.347710 70.266001 #> EXTENSION        158 70.325720 70.207409 #> EXTENSION        160 70.281998 70.174752 #> EXTENSION        162 70.266001 69.966123 #> LO-REDUCTION     164 70.207409 69.966123 #> LO-REDUCTION     166 70.174752 69.966123 #> EXTENSION        168 70.102607 69.665746 #> EXTENSION        170 70.010629 69.402631 #> LO-REDUCTION     172 69.966123 69.402631 #> EXTENSION        174 69.665746 68.343674 #> LO-REDUCTION     176 69.467717 68.343674 #> EXTENSION        178 69.402631 67.340172 #> EXTENSION        180 68.578834 63.479393 #> LO-REDUCTION     182 68.343674 63.479393 #> Warning: NaNs produced #> HI-REDUCTION     184 67.340172 63.479393 #> Warning: NaNs produced #> REFLECTION       186 66.915483 61.301086 #> Warning: NaNs produced #> HI-REDUCTION     188 65.241403 61.301086 #> HI-REDUCTION     190 64.548113 61.301086 #> LO-REDUCTION     192 64.162698 61.301086 #> EXTENSION        194 63.479393 58.547281 #> Warning: NaNs produced #> REFLECTION       196 62.922467 58.529138 #> Warning: NaNs produced #> HI-REDUCTION     198 61.301086 58.529138 #> LO-REDUCTION     200 61.266886 58.529138 #> Warning: NaNs produced #> HI-REDUCTION     202 59.761060 58.529138 #> Warning: NaNs produced #> REFLECTION       204 58.630956 56.896382 #> LO-REDUCTION     206 58.547281 56.896382 #> Warning: NaNs produced #> HI-REDUCTION     208 58.529138 56.896382 #> REFLECTION       210 57.675235 56.452485 #> Warning: NaNs produced #> REFLECTION       212 57.185361 56.267132 #> HI-REDUCTION     214 56.896382 56.267132 #> EXTENSION        216 56.452485 55.396118 #> LO-REDUCTION     218 56.429536 55.260150 #> EXTENSION        220 56.267132 51.721751 #> LO-REDUCTION     222 55.396118 51.721751 #> HI-REDUCTION     224 55.260150 51.721751 #> LO-REDUCTION     226 54.477910 51.721751 #> EXTENSION        228 53.896320 47.475276 #> HI-REDUCTION     230 52.586416 47.475276 #> LO-REDUCTION     232 52.326430 47.475276 #> Warning: NaNs produced #> HI-REDUCTION     234 51.721751 47.475276 #> EXTENSION        236 50.948154 47.004641 #> Warning: NaNs produced #> HI-REDUCTION     238 49.353867 47.004641 #> LO-REDUCTION     240 49.073246 47.004641 #> HI-REDUCTION     242 47.760300 47.004641 #> HI-REDUCTION     244 47.612588 47.004641 #> EXTENSION        246 47.475276 46.317208 #> REFLECTION       248 47.262919 45.622102 #> LO-REDUCTION     250 47.004641 45.027214 #> LO-REDUCTION     252 46.317208 44.861974 #> HI-REDUCTION     254 45.622102 44.861974 #> HI-REDUCTION     256 45.329985 44.861974 #> REFLECTION       258 45.088177 44.810057 #> REFLECTION       260 45.027214 44.266724 #> REFLECTION       262 44.861974 44.138604 #> HI-REDUCTION     264 44.810057 44.138604 #> HI-REDUCTION     266 44.427386 44.138604 #> REFLECTION       268 44.337632 44.032394 #> REFLECTION       270 44.266724 43.951003 #> REFLECTION       272 44.138604 43.800632 #> LO-REDUCTION     274 44.032394 43.774492 #> HI-REDUCTION     276 43.951003 43.774492 #> EXTENSION        278 43.840938 43.473799 #> EXTENSION        280 43.800632 43.313788 #> REFLECTION       282 43.774492 43.281572 #> EXTENSION        284 43.473799 42.844823 #> EXTENSION        286 43.313788 42.373266 #> EXTENSION        288 43.281572 42.182610 #> LO-REDUCTION     290 42.844823 42.182610 #> EXTENSION        292 42.373266 40.670656 #> LO-REDUCTION     294 42.207204 40.670656 #> LO-REDUCTION     296 42.182610 40.670656 #> EXTENSION        298 41.638092 39.458445 #> EXTENSION        300 41.153727 36.769684 #> LO-REDUCTION     302 40.670656 36.769684 #> LO-REDUCTION     304 39.458445 36.769684 #> Warning: NaNs produced #> REFLECTION       306 37.921832 35.200274 #> HI-REDUCTION     308 37.448116 35.200274 #> EXTENSION        310 37.010754 33.039041 #> Warning: NaNs produced #> REFLECTION       312 36.769684 29.418643 #> Warning: NaNs produced #> HI-REDUCTION     314 35.200274 29.418643 #> LO-REDUCTION     316 34.772622 29.418643 #> Warning: NaNs produced #> REFLECTION       318 33.039041 26.451462 #> Warning: NaNs produced #> REFLECTION       320 32.651520 24.329467 #> Warning: NaNs produced #> HI-REDUCTION     322 30.273241 24.329467 #> Warning: NaNs produced #> HI-REDUCTION     324 29.418643 24.329467 #> LO-REDUCTION     326 28.501430 24.208132 #> Warning: NaNs produced #> HI-REDUCTION     328 26.551550 24.208132 #> Warning: NaNs produced #> REFLECTION       330 26.451462 19.349720 #> Warning: NaNs produced #> HI-REDUCTION     332 24.329467 19.349720 #> HI-REDUCTION     334 24.208132 19.349720 #> Warning: NaNs produced #> REFLECTION       336 24.021515 14.604988 #> Warning: NaNs produced #> HI-REDUCTION     338 21.734688 14.604988 #> Warning: NaNs produced #> HI-REDUCTION     340 21.122190 14.604988 #> Warning: NaNs produced #> HI-REDUCTION     342 20.117199 14.604988 #> Warning: NaNs produced #> HI-REDUCTION     344 19.469040 14.604988 #> HI-REDUCTION     346 19.349720 14.604988 #> LO-REDUCTION     348 18.821741 14.604988 #> LO-REDUCTION     350 18.286990 14.604988 #> LO-REDUCTION     352 18.228687 14.604988 #> Warning: NaNs produced #> HI-REDUCTION     354 16.729009 14.604988 #> Warning: NaNs produced #> REFLECTION       356 15.451851 13.780624 #> Warning: NaNs produced #> REFLECTION       358 14.672805 11.868968 #> HI-REDUCTION     360 14.604988 11.868968 #> Warning: NaNs produced #> HI-REDUCTION     362 13.780624 11.868968 #> LO-REDUCTION     364 13.604789 11.868968 #> EXTENSION        366 13.377487 10.876970 #> LO-REDUCTION     368 13.143379 10.807862 #> Warning: NaNs produced #> HI-REDUCTION     370 12.008277 10.807862 #> HI-REDUCTION     372 11.868968 10.807862 #> LO-REDUCTION     374 11.419716 10.807862 #> REFLECTION       376 10.876970 10.432530 #> REFLECTION       378 10.836609 10.333558 #> LO-REDUCTION     380 10.807862 10.275494 #> REFLECTION       382 10.432530 10.076943 #> LO-REDUCTION     384 10.333558 10.076943 #> LO-REDUCTION     386 10.275494 10.007425 #> REFLECTION       388 10.081922 9.871004 #> HI-REDUCTION     390 10.076943 9.871004 #> REFLECTION       392 10.007425 9.832550 #> EXTENSION        394 9.906016 9.608536 #> EXTENSION        396 9.871004 9.477899 #> REFLECTION       398 9.832550 9.431202 #> REFLECTION       400 9.608536 9.391317 #> EXTENSION        402 9.477899 9.064771 #> LO-REDUCTION     404 9.431202 9.064771 #> LO-REDUCTION     406 9.391317 9.064771 #> EXTENSION        408 9.208730 8.588939 #> EXTENSION        410 9.081577 8.388029 #> LO-REDUCTION     412 9.064771 8.388029 #> REFLECTION       414 8.588939 8.109063 #> LO-REDUCTION     416 8.432654 8.109063 #> HI-REDUCTION     418 8.388029 8.109063 #> REFLECTION       420 8.241052 8.094280 #> LO-REDUCTION     422 8.165604 8.080601 #> HI-REDUCTION     424 8.109063 8.080601 #> REFLECTION       426 8.094280 8.069875 #> HI-REDUCTION     428 8.093345 8.069875 #> HI-REDUCTION     430 8.080601 8.069875 #> Exiting from Nelder Mead minimizer #>     432 function evaluations used   sr5.nls <- nls(sr5)  # NS Herring stock-recruitment dataset data(nsher)  # already fitted with a Ricker SR model summary(nsher) #> An object of class \"FLSR\" #>  #> Name:   #> Description:   #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t1\t45\t1\t1\t1\t1\t #>  #> Range:  min\tminyear\tmax\tmaxyear  #> \t0\t1960\t0\t2004\t #>  #>  #> Model: \trec ~ a * ssb * exp(-b * ssb) #> An object of class \"FLPar\" #> params #>        a        b  #> 1.19e+02 9.45e-03  #> units:  NA  #> Log-likelihood:  15.862(0)  #> Variance-covariance:     #>               a            b #>   a 255.3388181 1.808870e-02 #>   b   0.0180887 1.992659e-06  plot(nsher)   # change model model(nsher) <- bevholt()  # fit through MLE nsher <- fmle(nsher) #>   Nelder-Mead direct search function minimizer #> function value for initial parameters = -10.336211 #>   Scaled convergence tolerance is 1.54022e-07 #> Stepsize computed as 501.110000 #> BUILD              3 44.842344 -11.603908 #> Warning: NaNs produced #> HI-REDUCTION       5 31.685209 -11.603908 #> Warning: NaNs produced #> HI-REDUCTION       7 17.913114 -11.603908 #> Warning: NaNs produced #> HI-REDUCTION       9 5.415279 -11.603908 #> Warning: NaNs produced #> HI-REDUCTION      11 -3.412974 -11.603908 #> HI-REDUCTION      13 -8.018030 -11.603908 #> LO-REDUCTION      15 -10.336211 -11.603908 #> LO-REDUCTION      17 -11.081040 -11.603908 #> EXTENSION         19 -11.295930 -12.061705 #> LO-REDUCTION      21 -11.603908 -12.061705 #> REFLECTION        23 -11.813826 -12.087620 #> REFLECTION        25 -12.061705 -12.199591 #> LO-REDUCTION      27 -12.087620 -12.199591 #> LO-REDUCTION      29 -12.158184 -12.199591 #> LO-REDUCTION      31 -12.191726 -12.199591 #> HI-REDUCTION      33 -12.192269 -12.199591 #> HI-REDUCTION      35 -12.197784 -12.199591 #> LO-REDUCTION      37 -12.198015 -12.199591 #> HI-REDUCTION      39 -12.199555 -12.199776 #> REFLECTION        41 -12.199591 -12.200058 #> HI-REDUCTION      43 -12.199776 -12.200092 #> HI-REDUCTION      45 -12.200058 -12.200142 #> HI-REDUCTION      47 -12.200092 -12.200155 #> HI-REDUCTION      49 -12.200142 -12.200160 #> HI-REDUCTION      51 -12.200155 -12.200177 #> HI-REDUCTION      53 -12.200160 -12.200177 #> LO-REDUCTION      55 -12.200171 -12.200179 #> HI-REDUCTION      57 -12.200177 -12.200179 #> HI-REDUCTION      59 -12.200178 -12.200179 #> HI-REDUCTION      61 -12.200179 -12.200179 #> HI-REDUCTION      63 -12.200179 -12.200179 #> HI-REDUCTION      65 -12.200179 -12.200179 #> Exiting from Nelder Mead minimizer #>     67 function evaluations used  plot(nsher)"},{"path":"/reference/FLSRs.html","id":null,"dir":"Reference","previous_headings":"","what":"FLSRS is a class that extends list through FLlst but\nimplements a set of features that give a little bit more structure to list\nobjects. The elements of FLSRs must all be of class\nFLSR. It implements a lock mechanism that, when turned on, does\nnot allow the user to increase or decrease the object length. — FLSRs","title":"FLSRS is a class that extends list through FLlst but\nimplements a set of features that give a little bit more structure to list\nobjects. The elements of FLSRs must all be of class\nFLSR. It implements a lock mechanism that, when turned on, does\nnot allow the user to increase or decrease the object length. — FLSRs","text":"FLSRS class extends list FLlst implements set features give little bit structure list objects. elements FLSRs must class FLSR. implements lock mechanism , turned , allow user increase decrease object length.","code":""},{"path":"/reference/FLSRs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FLSRS is a class that extends list through FLlst but\nimplements a set of features that give a little bit more structure to list\nobjects. The elements of FLSRs must all be of class\nFLSR. It implements a lock mechanism that, when turned on, does\nnot allow the user to increase or decrease the object length. — FLSRs","text":"","code":"FLSRs(object, ...)  # S4 method for FLSR FLSRs(object, ...)  # S4 method for missing FLSRs(object, ...)  # S4 method for list FLSRs(object, ...)"},{"path":"/reference/FLSRs.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"FLSRS is a class that extends list through FLlst but\nimplements a set of features that give a little bit more structure to list\nobjects. The elements of FLSRs must all be of class\nFLSR. It implements a lock mechanism that, when turned on, does\nnot allow the user to increase or decrease the object length. — FLSRs","text":".Data data. list. names Names list elements. character. desc Description object. character. lock Lock mechanism, turned length list can modified adding removing elements. logical.","code":""},{"path":[]},{"path":"/reference/FLSRs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"FLSRS is a class that extends list through FLlst but\nimplements a set of features that give a little bit more structure to list\nobjects. The elements of FLSRs must all be of class\nFLSR. It implements a lock mechanism that, when turned on, does\nnot allow the user to increase or decrease the object length. — FLSRs","text":"FLR Team","code":""},{"path":"/reference/FLSRs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FLSRS is a class that extends list through FLlst but\nimplements a set of features that give a little bit more structure to list\nobjects. The elements of FLSRs must all be of class\nFLSR. It implements a lock mechanism that, when turned on, does\nnot allow the user to increase or decrease the object length. — FLSRs","text":"","code":"data(nsher) bnsher <- nsher model(bnsher) <- bevholt bnsher <- fmle(bnsher) #>   Nelder-Mead direct search function minimizer #> function value for initial parameters = -10.336211 #>   Scaled convergence tolerance is 1.54022e-07 #> Stepsize computed as 501.110000 #> BUILD              3 44.842344 -11.603908 #> Warning: NaNs produced #> HI-REDUCTION       5 31.685209 -11.603908 #> Warning: NaNs produced #> HI-REDUCTION       7 17.913114 -11.603908 #> Warning: NaNs produced #> HI-REDUCTION       9 5.415279 -11.603908 #> Warning: NaNs produced #> HI-REDUCTION      11 -3.412974 -11.603908 #> HI-REDUCTION      13 -8.018030 -11.603908 #> LO-REDUCTION      15 -10.336211 -11.603908 #> LO-REDUCTION      17 -11.081040 -11.603908 #> EXTENSION         19 -11.295930 -12.061705 #> LO-REDUCTION      21 -11.603908 -12.061705 #> REFLECTION        23 -11.813826 -12.087620 #> REFLECTION        25 -12.061705 -12.199591 #> LO-REDUCTION      27 -12.087620 -12.199591 #> LO-REDUCTION      29 -12.158184 -12.199591 #> LO-REDUCTION      31 -12.191726 -12.199591 #> HI-REDUCTION      33 -12.192269 -12.199591 #> HI-REDUCTION      35 -12.197784 -12.199591 #> LO-REDUCTION      37 -12.198015 -12.199591 #> HI-REDUCTION      39 -12.199555 -12.199776 #> REFLECTION        41 -12.199591 -12.200058 #> HI-REDUCTION      43 -12.199776 -12.200092 #> HI-REDUCTION      45 -12.200058 -12.200142 #> HI-REDUCTION      47 -12.200092 -12.200155 #> HI-REDUCTION      49 -12.200142 -12.200160 #> HI-REDUCTION      51 -12.200155 -12.200177 #> HI-REDUCTION      53 -12.200160 -12.200177 #> LO-REDUCTION      55 -12.200171 -12.200179 #> HI-REDUCTION      57 -12.200177 -12.200179 #> HI-REDUCTION      59 -12.200178 -12.200179 #> HI-REDUCTION      61 -12.200179 -12.200179 #> HI-REDUCTION      63 -12.200179 -12.200179 #> HI-REDUCTION      65 -12.200179 -12.200179 #> Exiting from Nelder Mead minimizer #>     67 function evaluations used fls <- FLSRs(Ricker=nsher, BevHolt=bnsher) summary(fls) #> An object of class \"FLSRs\" #>  #> Elements: Ricker BevHolt  #>  #> Name:   #> \tDescription:   #> \tRange:\t min\tminyear\tmax\tmaxyear  #> \t\t0\t1960\t0\t2004\t #> \tQuant: age  #> \tdim: 1 45 1 1 1  #> Name:   #> \tDescription:   #> \tRange:\t min\tminyear\tmax\tmaxyear  #> \t\t0\t1960\t0\t2004\t #> \tQuant: age  #> \tdim: 1 45 1 1 1"},{"path":"/reference/FLStock.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLStock — FLStock","title":"Class FLStock — FLStock","text":"class modelling fish stock.","code":""},{"path":"/reference/FLStock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLStock — FLStock","text":"","code":"FLStock(object, ...)  # S4 method for FLQuant FLStock(object, plusgroup = dims(object)$max, ...)  # S4 method for missing FLStock(object, ...)  # S4 method for FLQuants FLStock(object, ...)"},{"path":"/reference/FLStock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLStock — FLStock","text":"object FLQuant object used sizing ... objects assigned name class slots plusgroup Plusgroup age, stored range","code":""},{"path":"/reference/FLStock.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLStock — FLStock","text":"FLStock object contains representation fish stock constructed purposes scientific analysis advice. includes information removals (.e. catches, landings discards), maturity, natural mortality results analytical assessment (.e. estimates abundance removal rates) .","code":""},{"path":"/reference/FLStock.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLStock — FLStock","text":"catch Total catch weight (FLQuant). catch.n Catch numbers (FLQuant). catch.wt Mean catch weights (FLQuant). discards Total discards weight (FLQuant). discards.n Discard numbers (FLQuant). discards.wt Mean discard weights (FLQuant). landings Total landings weight (FLQuant). landings.n Landing numbers (FLQuant). landings.wt Landing weights (FLQuant). stock Total stock weight (FLQuant). stock.n Stock numbers (FLQuant). stock.wt Mean stock weights (FLQuant). m Natural mortality (FLQuant). mat Proportion mature (FLQuant). harvest Harvest rate fishing mortality. units slot set 'hr' 'f' accordingly (FLQuant). harvest.spwn Proportion harvest/fishing mortality spawning (FLQuant). m.spwn Proportion natural mortality spawning (FLQuant). name Name stock (character). desc Description stock (character). range Named numeric vector containing quant year ranges, plusgroup quant range average fishing mortality calculated (numeric).","code":""},{"path":"/reference/FLStock.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"Class FLStock — FLStock","text":"slots class accessor replacement methods defined allow retrieving substituting individual slots. values passed replacement need class slot. numeric vector can also used replacing FLQuant slots, vector used substitute values slot, attributes.","code":""},{"path":"/reference/FLStock.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLStock — FLStock","text":"construction method exists class can take named arguments slots. slots created match requirements class validity. unnamed FLQuant object provided, used sizing stored slot.","code":""},{"path":[]},{"path":"/reference/FLStock.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLStock — FLStock","text":"FLR Team","code":""},{"path":"/reference/FLStock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLStock — FLStock","text":"","code":"data(ple4) summary(ple4) #> An object of class \"FLStock\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t61\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t1\t10\t10\t1957\t2017\t2\t6\t #>  #> Metrics:  #>   rec: 367450 - 4303680  (1000)  #>   ssb: 203391 - 913290  (t)  #>   catch: 78360 - 315245  (t)  #>   fbar: 0.20 - 0.72  (f)   # get the landings slot and assign values to it   landings(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all  70926  74157  78178  88764  85267  90305 103162 111121 105424  98334 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 103947 121020 122661 111783 117301 130443 133768 115181  94458 122166 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 108524 128366 119827 150640 151304 145669 143690 162681 182374 166633 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 155005 168118 187666 174414 147844 134793 141800 126195 109681  93642 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all  82875  74217  97340 100318  66596  87138  74770  82529  61501  62161 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all  59713  64574  68842  74246  74437  82307  97123  86424  91033  86381 #>      year #> age   2017   #>   all  84750 #>  #> units:  t    landings(ple4) <- apply(landings.n(ple4)*landings.wt(ple4),2,sum)  # perform similar calculation as the preceding apply function   discards(ple4) <- computeDiscards(ple4)   catch(ple4) <- computeCatch(ple4)   catch(ple4) <- computeCatch(ple4, slot=\"all\")  # set the units of the harvest slot of an FLStock object   harvest(ple4) <- 'f'  # subset and trim the FLStock   ple4[,1] #> An object of class \"FLStock\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t1\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t1\t10\t10\t1957\t1957\t2\t6\t #>  #> Metrics:  #>   rec: 477074 - 477074  (1000)  #>   ssb: 342223 - 342223  (t)  #>   catch: 78360 - 78360  (t)  #>   fbar: 0.24 - 0.24  (f)    trim(ple4, age=2:6, year=1980:1990) #> An object of class \"FLStock\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t5\t11\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t2\t6\tNA\t1980\t1990\t2\t6\t #>  #> Metrics:  #>   rec: 603278 - 2866780  (1000)  #>   ssb: 221023 - 422517  (t)  #>   catch: 184494 - 315245  (t)  #>   fbar: 0.52 - 0.63  (f)   # Calculate SSB, and SSB per recruit at zero fishing mortality   ssb(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t    ssbpurec(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   #>   all 5.8363 #>  #> units:  NA   # Coerce an FLStock to an FLBiol   biol <- as(ple4, \"FLBiol\")  # Initialise an FLSR object from an FLStock   flsr <- as.FLSR(ple4)"},{"path":"/reference/FLStockLen.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLStockLen — FLStockLen","title":"Class FLStockLen — FLStockLen","text":"class modelling length-structured fish stock.","code":""},{"path":"/reference/FLStockLen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLStockLen — FLStockLen","text":"","code":"FLStockLen(object, ...)  # S4 method for FLQuant FLStockLen(object, ...)  # S4 method for missing FLStockLen(object, ...)"},{"path":"/reference/FLStockLen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class FLStockLen — FLStockLen","text":"FLStockLen object contains length based representation fish stock. includes information removals (.e. catches, landings discards), maturity, natural mortality results analytical assessment (.e. estimates abundance removal rates).","code":""},{"path":"/reference/FLStockLen.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLStockLen — FLStockLen","text":"halfwidth middle length bins (numeric). catch Total catch weight (FLQuant). catch.n Catch numbers (FLQuant). catch.wt Mean catch weights (FLQuant). discards Total discards weight (FLQuant). discards.n Discard numbers (FLQuant). discards.wt Mean discard weights (FLQuant). landings Total landings weight (FLQuant). landings.n Landing numbers (FLQuant). landings.wt Landing weights (FLQuant). stock Total stock weight (FLQuant). stock.n Stock numbers (FLQuant). stock.wt Mean stock weights (FLQuant). m Natural mortality (FLQuant). mat Proportion mature (FLQuant). harvest Harvest rate fishing mortality. units slot set 'harvest' 'f' accordingly (FLQuant). harvest.spwn Proportion harvest/fishing mortality spawning (FLQuant). m.spwn Proportion natural mortality spawning (FLQuant). name Name stock (character). desc Description stock (character). range Named numeric vector containing quant year ranges, plusgroup quant range average fishing mortality calculated (numeric).","code":""},{"path":[]},{"path":"/reference/FLStockLen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLStockLen — FLStockLen","text":"FLR Team","code":""},{"path":"/reference/FLStockLen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLStockLen — FLStockLen","text":"","code":"stkl <- FLStockLen(m=FLQuant(0.2, dimnames=list(len=seq(5, 50, by=2), year=2015:2020))) summary(stkl) #> An object of class \"FLStockLen\" #>  #> Name:   #> Description:   #> Quant: len  #> Dims:  len \tyear\tunit\tseason\tarea\titer #> \t23\t6\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t5\t49\t2015\t2020\t5\t49\t #>  # Unnamed FLQuant used for sizing stkl <- FLStockLen(FLQuant(0.2, dimnames=list(len=seq(5, 50, by=2), year=2015:2020))) summary(stkl) #> An object of class \"FLStockLen\" #>  #> Name:   #> Description:   #> Quant: len  #> Dims:  len \tyear\tunit\tseason\tarea\titer #> \t23\t6\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t5\t49\t2015\t2020\t5\t49\t #>  m(stkl) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> len  2015 2016 2017 2018 2019 2020 #>   5  NA   NA   NA   NA   NA   NA   #>   7  NA   NA   NA   NA   NA   NA   #>   9  NA   NA   NA   NA   NA   NA   #>   11 NA   NA   NA   NA   NA   NA   #>   13 NA   NA   NA   NA   NA   NA   #>   15 NA   NA   NA   NA   NA   NA   #>   17 NA   NA   NA   NA   NA   NA   #>   19 NA   NA   NA   NA   NA   NA   #>   21 NA   NA   NA   NA   NA   NA   #>   23 NA   NA   NA   NA   NA   NA   #>   25 NA   NA   NA   NA   NA   NA   #>   27 NA   NA   NA   NA   NA   NA   #>   29 NA   NA   NA   NA   NA   NA   #>   31 NA   NA   NA   NA   NA   NA   #>   33 NA   NA   NA   NA   NA   NA   #>   35 NA   NA   NA   NA   NA   NA   #>   37 NA   NA   NA   NA   NA   NA   #>   39 NA   NA   NA   NA   NA   NA   #>   41 NA   NA   NA   NA   NA   NA   #>   43 NA   NA   NA   NA   NA   NA   #>   45 NA   NA   NA   NA   NA   NA   #>   47 NA   NA   NA   NA   NA   NA   #>   49 NA   NA   NA   NA   NA   NA   #>  #> units:  len"},{"path":"/reference/FLStocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLStocks — FLStocks","title":"Class FLStocks — FLStocks","text":"FLStocks class extends list FLlst implements set features give little bit structure list objects. elements FLStocks must class FLStock. implements lock mechanism , turned , allow user increase decrease object length.","code":""},{"path":"/reference/FLStocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLStocks — FLStocks","text":"","code":"FLStocks(object, ...)  # S4 method for FLStock FLStocks(object, ...)  # S4 method for missing FLStocks(object, ...)  # S4 method for list FLStocks(object, ...)"},{"path":"/reference/FLStocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLStocks — FLStocks","text":"object unnamed object added list ... named unnamed objects","code":""},{"path":"/reference/FLStocks.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLStocks — FLStocks","text":".Data data. list. names Names list elements. character. desc Description object. character. lock Lock mechanism, turned length list can modified adding removing elements. logical.","code":""},{"path":"/reference/FLStocks.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLStocks — FLStocks","text":"constructor method exists class can take named arguments list elements.","code":""},{"path":[]},{"path":"/reference/FLStocks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLStocks — FLStocks","text":"FLR Team","code":""},{"path":"/reference/FLStocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLStocks — FLStocks","text":"","code":"data(ple4) fls <- FLStocks(sa=ple4, sb=window(ple4, end=1980)) summary(fls) #> An object of class \"FLStocks\" #>  #> Elements: sa sb  #>  #> Name: PLE  #> \tDescription: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> \tRange:\t min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t\t1\t10\t10\t1957\t2017\t2\t6\t #> \tQuant: age  #> \tdim: 10 61 1 1 1  #> Name: PLE  #> \tDescription: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> \tRange:\t min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t\t1\t10\t10\t1957\t1980\t2\t6\t #> \tQuant: age  #> \tdim: 10 24 1 1 1"},{"path":"/reference/FLlst.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FLlst — FLlst","title":"Class FLlst — FLlst","text":"FLlst class extends list implements set features give little structure list objects. First elements FLlst must class. Second implements lock mechanism , turned , allow user increase decrease object length.","code":""},{"path":"/reference/FLlst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class FLlst — FLlst","text":"","code":"FLlst(object, ...)"},{"path":"/reference/FLlst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class FLlst — FLlst","text":"object unnamed object added list ... named unnamed objects","code":""},{"path":"/reference/FLlst.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class FLlst — FLlst","text":".Data data. list. names Names list elements. character. desc Description object. character. lock Lock mechanism, turned length list can modified adding removing elements. logical.","code":""},{"path":"/reference/FLlst.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"Class FLlst — FLlst","text":"constructor method exists class can take named arguments list elements.","code":""},{"path":[]},{"path":"/reference/FLlst.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class FLlst — FLlst","text":"FLR Team","code":""},{"path":"/reference/FLlst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class FLlst — FLlst","text":"","code":"fll01 <- new(\"FLlst\", list(a=1:10, b=10:20)) fll02 <- new(\"FLlst\", list(1:10, 10:20), names=c(\"a\",\"b\")) fll03 <- FLlst(a=1:10, b=10:20) fll04 <- FLlst(list(a=1:10, b=10:20)) fll05 <- FLlst(c(1:10), c(10:20)) names(fll05) <- names(fll01) names(fll01) #> [1] \"a\" \"b\""},{"path":"/reference/FUNCTION.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and modify the recruitment time series — FUNCTION","title":"Extract and modify the recruitment time series — FUNCTION","text":"Recruitment number fish first row 'stock.n' slot age-structured 'FLStock'. convenience functions allow clearer syntax retrieving altering content 'stock.nrec.age,', 'rec.age' usually first age object.","code":""},{"path":"/reference/FUNCTION.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and modify the recruitment time series — FUNCTION","text":"","code":"# S4 method for FLStock rec(object, rec.age = as.character(object@range[\"min\"]))"},{"path":"/reference/FUNCTION.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and modify the recruitment time series — FUNCTION","text":"object object class 'FLStock' rec.age age extract, defaults first one. 'character' select name 'numeric' position.","code":""},{"path":"/reference/FUNCTION.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and modify the recruitment time series — FUNCTION","text":"RETURN Lorem ipsum dolor sit amet","code":""},{"path":[]},{"path":"/reference/FUNCTION.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract and modify the recruitment time series — FUNCTION","text":"FLR Team","code":""},{"path":"/reference/FUNCTION.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and modify the recruitment time series — FUNCTION","text":"","code":"data(ple4) rec(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   1  477074  710748  874712  797702  870799  615691  610017 2449900  664500 #>    year #> age 1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   1  579075  428110  418228  666902  671454  433599  367450 1391430 1074920 #>    year #> age 1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   1  787372  674010 1033740  879043  915553 1078660  999968 1935350 1375880 #>    year #> age 1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   1 1302060 1792220 4303680 1910200 1774940 1250510 1083810  981356  854841 #>    year #> age 1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   1  550376  566448  932162  893056 2431310  778427  683151  857525  634808 #>    year #> age 2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   1 1792880  557844 1235790  863893  875191 1379750 1135050 1088820 1444570 #>    year #> age 2011    2012    2013    2014    2015    2016    2017    #>   1 1608190 1278010 1455050 1640700  895620 1211320 1823000 #>  #> units:  1000  # Multiple recruitment by a factor of 2 rec(ple4) <- rec(ple4) * 2"},{"path":"/reference/Funwanted.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the discards and landings-associated fishing mortalities — Funwanted","title":"Calculate the discards and landings-associated fishing mortalities — Funwanted","text":"Computes fishing mortality age (harvest) associated either landings (Fwanted) discards (Funwanted) respective proportions age. function names reflect convention used ICES.","code":""},{"path":"/reference/Funwanted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the discards and landings-associated fishing mortalities — Funwanted","text":"","code":"Funwanted(x, ages = dimnames(x)$age)"},{"path":"/reference/Funwanted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the discards and landings-associated fishing mortalities — Funwanted","text":"x FLStock object, harvest ages Ages respective Fbar calculation applies","code":""},{"path":"/reference/Funwanted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the discards and landings-associated fishing mortalities — Funwanted","text":"FLQuant","code":""},{"path":"/reference/Funwanted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the discards and landings-associated fishing mortalities — Funwanted","text":"","code":"data(ple4) Fwanted(ple4, ages=2:6) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957     1958     1959     1960     1961     1962     1963     1964     #>   all 0.201805 0.203262 0.197168 0.238148 0.219695 0.212611 0.228665 0.251027 #>      year #> age   1965     1966     1967     1968     1969     1970     1971     1972     #>   all 0.274959 0.227080 0.201600 0.224142 0.264587 0.265615 0.276443 0.321151 #>      year #> age   1973     1974     1975     1976     1977     1978     1979     1980     #>   all 0.400059 0.401399 0.303873 0.314124 0.293176 0.370529 0.382088 0.476831 #>      year #> age   1981     1982     1983     1984     1985     1986     1987     1988     #>   all 0.475766 0.448737 0.417565 0.395911 0.459501 0.451228 0.443920 0.392033 #>      year #> age   1989     1990     1991     1992     1993     1994     1995     1996     #>   all 0.406081 0.427528 0.413501 0.425600 0.483390 0.506513 0.521262 0.515784 #>      year #> age   1997     1998     1999     2000     2001     2002     2003     2004     #>   all 0.500955 0.432935 0.415823 0.419608 0.301144 0.395703 0.353625 0.299551 #>      year #> age   2005     2006     2007     2008     2009     2010     2011     2012     #>   all 0.205637 0.198040 0.157318 0.159873 0.128586 0.116353 0.106405 0.111273 #>      year #> age   2013     2014     2015     2016     2017     #>   all 0.121725 0.095258 0.098437 0.093188 0.092754 #>  #> units:  f  Funwanted(ple4, ages=1:3) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   all 0.09506 0.15374 0.18568 0.18006 0.21372 0.21149 0.24130 0.20943 0.19850 #>      year #> age   1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   all 0.21569 0.20137 0.19693 0.18563 0.21370 0.20436 0.17391 0.14681 0.20536 #>      year #> age   1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   all 0.33311 0.29054 0.31343 0.28453 0.29193 0.18805 0.17612 0.20023 0.24281 #>      year #> age   1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   all 0.25025 0.25419 0.28203 0.37235 0.38371 0.35276 0.32278 0.31714 0.30323 #>      year #> age   1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   all 0.24985 0.20708 0.16979 0.23412 0.38735 0.40383 0.30329 0.24894 0.29975 #>      year #> age   2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   all 0.33329 0.35325 0.31981 0.29025 0.25768 0.24099 0.19469 0.18102 0.15655 #>      year #> age   2011    2012    2013    2014    2015    2016    2017    #>   all 0.14002 0.14605 0.15107 0.17550 0.18162 0.16361 0.14140 #>  #> units:  f"},{"path":"/reference/SRModels.html","id":null,"dir":"Reference","previous_headings":"","what":"Stock-Recruitment models — SRModels","title":"Stock-Recruitment models — SRModels","text":"range stock-recruitment (SR) models commonly used fisheries science provided FLCore.","code":""},{"path":"/reference/SRModels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stock-Recruitment models — SRModels","text":"","code":"ricker()  bevholt()  bevholtDa()  bevholtss3()  segreg()  geomean()  shepherd()  cushing()  rickerSV()  bevholtSV()  shepherdSV()  bevholtAR1()  rickerAR1()  segregAR1()  rickerCa()  survRec(ssf, R0, Sfrac, beta, SF0 = ssf[, 1])  bevholtsig()  mixedsrr()"},{"path":"/reference/SRModels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stock-Recruitment models — SRModels","text":"rho Autoregression sigma2 Autoregression obs Observed values hat estimated values steepness Steepness. vbiomass Virgin biomass. spr0 Spawners per recruit F=0, see spr0. model character vector model name, either 'bevholt' 'ricker'.","code":""},{"path":"/reference/SRModels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stock-Recruitment models — SRModels","text":"method defined function returning list one elements follows: model: Formula model, using slot names rec ssb refer usual inputs logl: Function calculate loglikelihood given model estimated MLE (See fmle) initial: Function provide initial values parameters minimization algorithms called fmle nls. required, function also two attributes, lower upper, give lower upper limits parameter values, respectively. used methods defined optim, like \"L-BFGS-B\". model<- method FLModel can called value list described , name function returning list, function . See examples . Several functions fit commonly-used SR models available. use maximum likelihood estimate parameters method loglAR1. ricker: Ricker stock-recruitment model fit: $$R = S e^{-b S}$$ related productivity (recruits per stock unit small stock size) b density dependence. (, b > 0). bevholt: Beverton-Holt stock-recruitment model fit: $$R = \\frac{S}{b + S}$$ maximum recruitment (asymptotically) b stock level needed produce half maximum recruitment \\(\\frac{}{2}\\). (, b > 0). segreg: Segmented regression stock-recruitment model fit: $$R = \\mathbf{ifelse}(S \\leq b, S, b)$$ slope recruitment stock levels b, \\(b\\) mean recruitment stock levels b. (, b > 0). geomean: Constant recruitment model fit, equal historical geometric mean recruitment.  $$(R_1 R_2 \\ldots R_n)^{1/n} = e^{\\mathbf{mean}(\\log(R_1),\\ldots , }$$$$ \\log(R_n))$$ shepherd: Shepherd stock-recruitment model fit: $$R = \\frac{S}{1+(\\frac{S}{b})^c}$$ represents density-independent survival (similar Ricker stock-recruit model), b stock size density-dependent processes predominate density-independent ones (also referred threshold stock size), c degree compensation. cushing: Cushing stock-recruitment model fit: $$R = S e^{b}$$ model used less often, limited fact unbounded b>=1 S increases. (, b > 0). Stock recruitment models parameterized steepness virgin biomass: rickerSV: Fits ricker stock-recruitment model parameterized steepness virgin biomass. $$= e^{\\frac{b \\cdot vbiomass}{spr0}}$$ $$b = \\frac{\\log(5 \\cdot steepness)}{0.8 \\cdot vbiomass}$$ bevholtSV: Fits Beverton-Holt stock-recruitment model parameterised steepness virgin biomass. $$= \\frac{4 \\cdot vbiomass \\cdot steepness}{(spr0 \\cdot (5 \\cdot steepness-1.0}$$ $$b = \\frac{vbiomass (1.0-steepness)}{5 \\cdot steepnes-1.0}$$ sheperdSV: Fits shepher stock-recruitment model parameterized steepness virgin biomass. $$= \\frac{1.0+(\\frac{vbiomass}{b})^c}{spr0}$$ $$b = vbiomass (\\frac{0.2-steepness}{steepness (0.2)^c - 0.2})^ (\\frac{-1.0}{c})$$ Models fitted using autoregressive residuals first order: bevholtAR1, rickerAR1, segregAR1: Beverton-Holt, Ricker segmented regression stock-recruitment models autoregressive normal log residuals first order. model fit, corresponding stock-recruit model combined autoregressive normal log likelihood first order residuals. \\(R_t\\) observed recruitment \\(\\hat{R}_t\\) predicted recruitment, autoregressive model first order fitted log-residuals, \\(x_t = \\log(\\frac{R_t}{\\hat{R}_t})\\). $$x_t=\\rho x_{t-1} + e$$ \\(e\\) follows normal distribution mean 0: \\(e \\sim N(0, \\sigma^2_{AR})\\). Ricker model one covariate. covariate can used, example, account enviromental factor influences recruitment dynamics. equations, c shape parameter X covariate. rickerCa: Ricker stock-recruitment model one multiplicative covariate. $$R = (1- c X) S e^{-b S}$$","code":""},{"path":"/reference/SRModels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stock-Recruitment models — SRModels","text":"Beverton, R.J.H. Holt, S.J. (1957) dynamics exploited fish populations. MAFF Fish. Invest., Ser: II 19, 533. Needle, C.L. Recruitment models: diagnosis prognosis.  Reviews Fish Biology Fisheries 11: 95-111, 2002. Ricker, W.E. (1954) Stock recruitment. J. Fish. Res. Bd Can. 11, 559-623. Shepherd, J.G. (1982) versatile new stock-recruitment relationship fisheries construction sustainable yield curves.  J. Cons. Int. Explor. Mer 40, 67-75.","code":""},{"path":[]},{"path":"/reference/SRModels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stock-Recruitment models — SRModels","text":"FLR Team","code":""},{"path":"/reference/SRModels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stock-Recruitment models — SRModels","text":"","code":"# inspect the output of one of the model functions   bevholt() #> $logl #> function(a, b, rec, ssb) #>       loglAR1(log(rec), log(a*ssb/(b+ssb))) #> <bytecode: 0x557b149b6348> #> <environment: 0x557b1847ebe8> #>  #> $model #> rec ~ a * ssb/(b + ssb) #> <environment: 0x557b1847ebe8> #>  #> $initial #> function(rec, ssb) { #>     a <- max(quantile(c(rec), 0.75, na.rm = TRUE)) #>     b <- max(quantile(c(rec)/c(ssb), 0.9, na.rm = TRUE)) #>     return(FLPar(a = a, b = a/b))} #> <bytecode: 0x557b149b1a08> #> <environment: 0x557b1847ebe8> #> attr(,\"lower\") #> [1] -Inf -Inf #> attr(,\"upper\") #> [1] Inf Inf #>    names(bevholt()) #> [1] \"logl\"    \"model\"   \"initial\"   bevholt()$logl #> function(a, b, rec, ssb) #>       loglAR1(log(rec), log(a*ssb/(b+ssb))) #> <bytecode: 0x557b149b6348> #> <environment: 0x557b183bed40>  # once an FLSR model is in the workspace ...   data(nsher)  # the three model-definition slots can be modified # at once by calling 'model<-' with # (1) a list   model(nsher) <- bevholt()  # (2) the name of the function returning this list   model(nsher) <- 'bevholt'  # or (3) the function itself that returns this list   model(nsher) <- bevholt"},{"path":"/reference/acc.html","id":null,"dir":"Reference","previous_headings":"","what":"Catch curve estimates of total mortality at age (Z) — acc","title":"Catch curve estimates of total mortality at age (Z) — acc","text":"Catch curve estimates total mortality age (Z)","code":""},{"path":"/reference/acc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Catch curve estimates of total mortality at age (Z) — acc","text":"","code":"acc(object, ...)"},{"path":"/reference/acc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Catch curve estimates of total mortality at age (Z) — acc","text":"","code":"data(ple4)"},{"path":"/reference/accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"accessor and replacement methods for FLCore classes — accessors","title":"accessor and replacement methods for FLCore classes — accessors","text":"S4 classes defined FLCore methods accessing replacing slots. methods named slot, return content slot, accessor method, modify provided value.","code":""},{"path":"/reference/accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"accessor and replacement methods for FLCore classes — accessors","text":"","code":"name(object, ...)  desc(object, ...)  range(x, i) <- value  catch(object, ...)  catch.n(object, ...) <- value  catch.wt(object, ...)  discards(object, ...)  discards.n(object, ...)  discards.wt(object, ...)  landings(object, ...)  landings.n(object, ...)  landings.wt(object, ...)  m(object, ...)  stock(object, ...)  stock.n(object, ...)  stock.wt(object, ...)  m.spwn(object, ...)  harvest(object, catch, ...)  harvest.spwn(object, ...)  mat(object, ...)  n(object, ...)  m(object, ...)  wt(object, ...)  fec(object, ...)  spwn(object, ...)  effort(object, metier, ...)  type(object, ...)  distr(object, ...)  distribution(object, ...)  index(object, ...)  index.var(object, ...)  catch.n(object, ...)  catch.wt(object, ...)  sel.pattern(object, ...)  index.q(object, ...)  model(object, ...)  logl(object, ...)  gr(object, ...)  initial(object, ...)  logLik(object, ...)  vcov(object, ...) <- value  hessian(object, ...)  logerror(object, ...)  details(object, ...)  residuals(object, ...) <- value  fitted(object, ...)  rec(object, ...)  rec.obs(object, ...)  catch.q(object, ...)  discards.sel(object, ...)  landings.sel(object, ...)  params(object, ...)  # S4 method for FLS,FLQuants catch(object) <- value"},{"path":"/reference/accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"accessor and replacement methods for FLCore classes — accessors","text":"object object slot extracted replaced value Object inserted relevant slot","code":""},{"path":"/reference/accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"accessor and replacement methods for FLCore classes — accessors","text":"required slot, accessor method, invisible modifies object, replacement one.","code":""},{"path":"/reference/accessors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"accessor and replacement methods for FLCore classes — accessors","text":"Accessors replacement methods, exception, created build time calls createFLAccessors function. accessor method created slot, simply calls slot() relevant slot name. slots class FLQuant, FLArray-based, two methods created: one value class FLQuant, another value numeric vector. later insert vector slot structure, using R's recycling rules. Users encouraged use accessor methods, rather '@' operator slot() method, isolate code internal structure class. slot altered deleted future, method provided return value, computed slots. methods might already access directly slot, instead carry calculation return requested value, depending class called . Please refer particular method implementation see case. Accessor methods slots class predictModel behave differently depending compute argument. Please refer relevant help page clarification. object class FLQuants, containing three elements named catch, catch.n catch.wt, returned computeCatch, can assigned directly object using catch<-.","code":""},{"path":[]},{"path":"/reference/accessors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"accessor and replacement methods for FLCore classes — accessors","text":"FLR Team","code":""},{"path":"/reference/accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"accessor and replacement methods for FLCore classes — accessors","text":"","code":"data(ple4)  # To access the catch slot in an FLStock, use catch(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all  78360  88785 105186 117975 119541 126290 140815 147540 151408 162266 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 154474 149820 146178 136619 141226 149390 151515 157994 165392 175881 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 165843 178166 172652 184690 184494 192439 212632 228265 247071 279228 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 308480 315245 292035 250604 218184 192691 179573 151248 132629 131719 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 152195 171240 170662 145998 128107 143807 154029 140056 114551 111864 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 104770 113397 115703 118824 119718 131872 141055 139750 137338 131216 #>      year #> age   2017   #>   all 124922 #>  #> units:  t   # while to modify it, do catch(ple4) <- catch(ple4) * 2  # A number can be used as input, to be recycled m(ple4) <- 0.3 # same as a longer vector, by age m(ple4) <- 0.4^(seq(1, 2, length=10))  # To see the methods defined by createFLAccessors, run, for example getMethod('catch', 'FLS') #> new(\"MethodDefinition\", .Data = function (object, ...)  #> { #>     .local <- function (object)  #>     return(slot(object, \"catch\")) #>     .local(object, ...) #> }, target = new(\"signature\", .Data = \"FLS\", names = \"object\",  #>     package = \"FLCore\"), defined = new(\"signature\", .Data = \"FLS\",  #>     names = \"object\", package = \"FLCore\"), generic = \"catch\") #> <bytecode: 0x557af75e91a0> #> <environment: 0x557af7640a08> #> attr(,\"target\") #> An object of class “signature” #> object  #>  \"FLS\"  #> attr(,\"defined\") #> An object of class “signature” #> object  #>  \"FLS\"  #> attr(,\"generic\") #> [1] \"catch\" #> attr(,\"generic\")attr(,\"package\") #> [1] \"FLCore\" #> attr(,\"class\") #> [1] \"MethodDefinition\" #> attr(,\"class\")attr(,\"package\") #> [1] \"methods\"  # Assign the 3 catch slots catch(ple4) <- computeCatch(ple4, slot=\"all\")"},{"path":"/reference/adjust-FLStock-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Recalculate to adjust abundances to F and M — adjust,FLStock-method","title":"Recalculate to adjust abundances to F and M — adjust,FLStock-method","text":"FLStock object projected forward using initial abundances total mortality--age per timestep. New values stock.n catch.n slots calculated, assuming harvest m correct. calculation provides test internal consistency object.","code":""},{"path":"/reference/adjust-FLStock-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recalculate to adjust abundances to F and M — adjust,FLStock-method","text":"","code":"# S4 method for FLStock adjust(object)"},{"path":"/reference/adjust-FLStock-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recalculate to adjust abundances to F and M — adjust,FLStock-method","text":"object FLStock object","code":""},{"path":"/reference/adjust-FLStock-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recalculate to adjust abundances to F and M — adjust,FLStock-method","text":"FLStock object","code":""},{"path":[]},{"path":"/reference/adjust-FLStock-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recalculate to adjust abundances to F and M — adjust,FLStock-method","text":"","code":"data(ple4) test <- adjust(ple4) # Difference in catch due to estimation error plot(FLStocks(PLE=ple4, TEST=test))"},{"path":"/reference/ageopt.html","id":null,"dir":"Reference","previous_headings":"","what":"Age at which a cohort reaches its maximum biomass, calculated by year — ageopt","title":"Age at which a cohort reaches its maximum biomass, calculated by year — ageopt","text":"optimal (critical) age transition point cohort achieves maximum biomass absemce fishing, .e. losses due natural mortality now greater gains due increase individual biomass.","code":""},{"path":"/reference/ageopt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age at which a cohort reaches its maximum biomass, calculated by year — ageopt","text":"","code":"# S4 method for FLStock ageopt(object)"},{"path":"/reference/ageopt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Age at which a cohort reaches its maximum biomass, calculated by year — ageopt","text":"object object class 'FLStock'","code":""},{"path":"/reference/ageopt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Age at which a cohort reaches its maximum biomass, calculated by year — ageopt","text":"age maximum biomass reached, 'FLQuant'.","code":""},{"path":[]},{"path":"/reference/ageopt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Age at which a cohort reaches its maximum biomass, calculated by year — ageopt","text":"FLR Team","code":""},{"path":"/reference/ageopt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Age at which a cohort reaches its maximum biomass, calculated by year — ageopt","text":"","code":"data(ple4) ageopt(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 #>   all 4    5    6    7    8    9    9    8    8    8    7    7    9    9    #>      year #> age   1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 #>   all 6    6    6    7    6    7    9    9    9    6    6    8    7    7    #>      year #> age   1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 #>   all 9    8    8    9    8    8    9    8    9    9    9    6    6    7    #>      year #> age   2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 #>   all 7    9    9    9    9    9    9    7    8    8    8    6    7    9    #>      year #> age   2014 2015 2016 2017 #>   all 7    8    8    8    #>  #> units:"},{"path":"/reference/append-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Append objects along the year dimension — append-FLCore","title":"Append objects along the year dimension — append-FLCore","text":"Method append objects along year dimensions, extending, combining substituting sections .","code":""},{"path":"/reference/append-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append objects along the year dimension — append-FLCore","text":"","code":"# S4 method for FLQuant,FLQuant append(x, values, after = dims(values)$minyear - 1)  # S4 method for FLStock,FLStock append(x, values, after = dims(values)$minyear - 1)"},{"path":"/reference/append-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append objects along the year dimension — append-FLCore","text":"x object values appended . values included modified object. year dimname values appended.","code":""},{"path":"/reference/append-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append objects along the year dimension — append-FLCore","text":"object class x values appended.","code":""},{"path":"/reference/append-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Append objects along the year dimension — append-FLCore","text":"FLR objects commonly manipulated along year dimension, append method offers simple interface substituting parts object another, combine one, extending necessary. object included added first placed defined year dimnames, unless input argument specifies otherwise. Attributes like dimnames units always taken first argument, unless necessary chnages dimnames$year","code":""},{"path":[]},{"path":"/reference/append-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Append objects along the year dimension — append-FLCore","text":"FLR Team","code":""},{"path":"/reference/append-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append objects along the year dimension — append-FLCore","text":"","code":"# append(FLQuant, FLQuant) fq1 <- FLQuant(1, dimnames=list(age=1:3, year=2000:2010)) fq2 <- FLQuant(2, dimnames=list(age=1:3, year=2011:2012)) fq3 <- FLQuant(2, dimnames=list(age=1:3, year=2014:2016))  # Appends by dimnames$year append(fq1, fq2) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 #>   1 1    1    1    1    1    1    1    1    1    1    1    2    2    #>   2 1    1    1    1    1    1    1    1    1    1    1    2    2    #>   3 1    1    1    1    1    1    1    1    1    1    1    2    2    #>  #> units:  NA  # Appends by dimnames$year with gap (2011:2013) append(fq1, fq3) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 #>   1  1    1    1    1    1    1    1    1    1    1    1   NA   NA   NA    2   #>   2  1    1    1    1    1    1    1    1    1    1    1   NA   NA   NA    2   #>   3  1    1    1    1    1    1    1    1    1    1    1   NA   NA   NA    2   #>    year #> age 2015 2016 #>   1  2    2   #>   2  2    2   #>   3  2    2   #>  #> units:  NA  # Appends inside x append(fq1, fq2, after=2009) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 #>   1 1    1    1    1    1    1    1    1    1    1    2    2    #>   2 1    1    1    1    1    1    1    1    1    1    2    2    #>   3 1    1    1    1    1    1    1    1    1    1    2    2    #>  #> units:  NA  # Appends after end of x append(fq1, fq2, after=2013) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 #>   1  1    1    1    1    1    1    1    1    1    1    1   NA   NA   NA    2   #>   2  1    1    1    1    1    1    1    1    1    1    1   NA   NA   NA    2   #>   3  1    1    1    1    1    1    1    1    1    1    1   NA   NA   NA    2   #>    year #> age 2015 #>   1  2   #>   2  2   #>   3  2   #>  #> units:  NA   # append(FLStock, FLStock) data(ple4) fs1 <- window(ple4, end=2001) fs2 <- window(ple4, start=2002) fs3 <- window(ple4, start=2005)  # Appends by dimnames$year stock.n(append(fs1, fs2)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957      1958      1959      1960      1961      1962      1963      #>   1   477074.0  710748.0  874712.0  797702.0  870799.0  615691.0  610017.0 #>   2   268185.0  391105.0  574019.0  696497.0  629331.0  688002.0  494583.0 #>   3   361589.0  204551.0  286216.0  404963.0  485155.0  441333.0  482883.0 #>   4   223134.0  251892.0  135739.0  182546.0  255875.0  308828.0  276136.0 #>   5   147904.0  148258.0  164040.0   87017.8  116368.0  163035.0  195022.0 #>   6    60608.8  103574.0  100146.0  107321.0   55977.1   74519.9  103605.0 #>   7    62627.2   44411.7   73005.1   68029.4   71202.0   36669.7   47899.3 #>   8    49418.3   45231.8   32053.7   52465.8   48326.9   49594.8   24891.5 #>   9    31996.7   35608.8   32755.0   23308.8   38248.3   35143.0   35587.0 #>   10   68585.1   74612.3   79021.3   78690.9   73222.3   82791.3   88328.2 #>     year #> age  1964      1965      1966      1967      1968      1969      1970      #>   1  2449900.0  664500.0  579075.0  428110.0  418228.0  666902.0  671454.0 #>   2   502620.0 2057370.0  561599.0  486279.0  351300.0  328477.0  499525.0 #>   3   341643.0  343934.0 1437490.0  402660.0  346712.0  239678.0  214078.0 #>   4   283950.0  189574.0  194255.0  862270.0  249951.0  214175.0  146130.0 #>   5   170312.0  170953.0  113379.0  117592.0  533809.0  158259.0  137189.0 #>   6   121552.0  104036.0  103728.0   69241.0   72675.5  333787.0   99805.0 #>   7    64386.7   73564.1   63413.5   64736.1   43515.6   44971.0  204065.0 #>   8    31671.7   42047.6   48694.7   42848.4   43754.3   28686.1   28864.1 #>   9    17425.6   21773.1   29156.9   34459.9   30486.1   30610.0   19555.5 #>   10   89949.7   74801.9   67158.6   68866.5   75287.6   76834.4   76614.6 #>     year #> age  1971      1972      1973      1974      1975      1976      1977      #>   1   433599.0  367450.0 1391430.0 1074920.0  787372.0  674010.0 1033740.0 #>   2   495583.0  322847.0  274502.0 1025520.0  767410.0  534441.0  432591.0 #>   3   324931.0  328032.0  212726.0  175441.0  635424.0  469588.0  324352.0 #>   4   130830.0  198448.0  194134.0  119185.0   95486.7  354654.0  270674.0 #>   5    92885.0   80660.2  115448.0  105314.0   62528.3   51565.8  199395.0 #>   6    86638.5   57736.0   47858.4   64234.3   56842.0   34795.5   29688.2 #>   7    61697.5   54135.3   35370.6   28087.4   36940.6   33525.3   20971.2 #>   8   130295.0   39537.1   34377.0   21998.3   17263.3   22879.5   20930.5 #>   9    19273.9   85654.3   25584.3   21899.6   13875.4   10882.2   14512.6 #>   10   66652.6   57588.9   92986.6   75118.4   60677.9   46683.2   36597.8 #>     year #> age  1978      1979      1980      1981      1982      1983      1984      #>   1   879043.0  915553.0 1078660.0  999968.0 1935350.0 1375880.0 1302060.0 #>   2   640577.0  548706.0  603278.0  759629.0  728751.0 1391630.0  948596.0 #>   3   256771.0  368443.0  308663.0  338604.0  431979.0  422976.0  820717.0 #>   4   186122.0  141111.0  188898.0  147121.0  156042.0  206296.0  214367.0 #>   5   153084.0  102391.0   74240.4   94918.5   71554.5   75327.9  100486.0 #>   6   113431.0   83438.8   54395.5   39883.2   51872.3   38991.5   40129.1 #>   7    17442.0   63121.2   45292.9   30397.5   23273.3   31032.9   23210.4 #>   8    12952.3   10501.4   37093.0   26405.0   18034.5   14363.0   19675.9 #>   9    13395.2    8318.7    6668.8   23029.0   16239.1   11328.1    9269.7 #>   10   33351.6   31239.8   26643.8   22198.4   29551.0   29398.7   26037.4 #>     year #> age  1985      1986      1987      1988      1989      1990      1991      #>   1  1792220.0 4303680.0 1910200.0 1774940.0 1250510.0 1083810.0  981356.0 #>   2   864871.0 1177750.0 2866780.0 1308470.0 1251000.0  898824.0  785747.0 #>   3   559870.0  503176.0  670566.0 1602170.0  730349.0  716388.0  530410.0 #>   4   429744.0  291704.0  253291.0  320928.0  743636.0  347377.0  357105.0 #>   5   105579.0  212338.0  142492.0  120680.0  150385.0  353208.0  169944.0 #>   6    51597.9   51971.1  101004.0   66591.7   55845.9   68749.9  159986.0 #>   7    22812.3   27066.0   25237.6   47264.9   30819.2   25576.2   30985.4 #>   8    14467.2   13364.5   14671.0   12950.5   23964.9   16156.4   13837.3 #>   9    12765.7    9167.3    8060.4    8304.2    7096.0   13682.2    9708.3 #>   10   22968.3   23691.3   21446.4   18014.1   15057.6   12910.2   16297.5 #>     year #> age  1992      1993      1994      1995      1996      1997      1998      #>   1   854841.0  550376.0  566448.0  932162.0  893056.0 2431310.0  778427.0 #>   2   709583.0  614021.0  398693.0  423980.0  722992.0  708162.0 1941390.0 #>   3   465814.0  412376.0  355244.0  239117.0  261727.0  433954.0  398394.0 #>   4   268732.0  230658.0  199926.0  173831.0  115825.0  114808.0  163844.0 #>   5   177919.0  133599.0  113279.0   96739.9   81895.9   51781.9   48217.9 #>   6    77446.0   82752.7   63227.4   53666.9   45201.5   37345.9   22897.6 #>   7    70809.8   33854.3   36415.8   28660.1   24870.8   20578.7   16297.6 #>   8    16300.8   33881.2   15013.9   16696.8   14022.1   12186.0    9697.5 #>   9     8133.4    8552.4   15995.5    7339.9    8872.5    7570.6    6374.5 #>   10   15761.0   13206.8   11093.7   14408.1   12542.4   12623.6   11589.9 #>     year #> age  1999      2000      2001      2002      2003      2004      2005      #>   1   683151.0  857525.0  634808.0 1792880.0  557844.0 1235790.0  863893.0 #>   2   617294.0  531403.0  653888.0  481832.0 1362670.0  417612.0  894667.0 #>   3  1091830.0  381345.0  349511.0  413685.0  272903.0  729522.0  238706.0 #>   4   151199.0  510105.0  205661.0  181506.0  185801.0  118238.0  365617.0 #>   5    67219.3   64650.9  232564.0   98489.7   90505.8   97419.1   66113.3 #>   6    20631.8   28114.9   27483.5  106479.0   49763.0   49696.3   57107.9 #>   7     9911.4    9398.3   13484.8   13278.2   51718.8   26043.7   29565.3 #>   8     7927.6    5445.6    5587.2    7752.1    7045.7   28478.9   16720.1 #>   9     5219.9    4778.1    3568.0    3675.4    4964.1    4649.5   20533.5 #>   10   10285.7    9459.5    9463.7    9308.9    9758.3   11423.5   12764.9 #>     year #> age  2006      2007      2008      2009      2010      2011      2012      #>   1   875191.0 1379750.0 1135050.0 1088820.0 1444570.0 1608190.0 1278010.0 #>   2   618023.0  651007.0 1067080.0  879336.0  826492.0 1109460.0 1299830.0 #>   3   552652.0  393107.0  420759.0  719298.0  627121.0  613580.0  837139.0 #>   4   136058.0  326369.0  234965.0  266894.0  493740.0  448410.0  436124.0 #>   5   219194.0   87128.7  219954.0  163268.0  188123.0  349991.0  318435.0 #>   6    41505.0  148406.0   62707.2  164048.0  123503.0  142101.0  261180.0 #>   7    37777.6   29245.7  109232.0   48044.5  129629.0   98702.9  112594.0 #>   8    21233.8   28310.9   22299.1   85182.6   38534.8  106302.0   81974.3 #>   9    12941.5   17026.1   23120.2   18460.8   71434.6   32718.3   91209.7 #>   10   27199.2   33875.1   43959.2   58555.1   67452.5  121698.0  135291.0 #>     year #> age  2013      2014      2015      2016      2017      #>   1  1455050.0 1640700.0  895620.0 1211320.0 1823000.0 #>   2  1063130.0 1193580.0 1286330.0  689025.0  973599.0 #>   3   980853.0  793858.0  880738.0  948914.0  515997.0 #>   4   582663.0  681616.0  559741.0  626799.0  672732.0 #>   5   309658.0  413410.0  483694.0  398150.0  447979.0 #>   6   234879.0  228655.0  308142.0  362736.0  298156.0 #>   7   204189.0  183635.0  180488.0  244483.0  286575.0 #>   8    93937.9  169885.0  151867.0  148885.0  202450.0 #>   9    70713.1   80901.8  145583.0  130001.0  128177.0 #>   10  198423.0  235842.0  277893.0  372467.0  443492.0 #>  #> units:  1000   # Appends by dimnames$year with gap (2011:2013) stock.n(append(fs1, fs3)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957      1958      1959      1960      1961      1962      1963      #>   1   477074.0  710748.0  874712.0  797702.0  870799.0  615691.0  610017.0 #>   2   268185.0  391105.0  574019.0  696497.0  629331.0  688002.0  494583.0 #>   3   361589.0  204551.0  286216.0  404963.0  485155.0  441333.0  482883.0 #>   4   223134.0  251892.0  135739.0  182546.0  255875.0  308828.0  276136.0 #>   5   147904.0  148258.0  164040.0   87017.8  116368.0  163035.0  195022.0 #>   6    60608.8  103574.0  100146.0  107321.0   55977.1   74519.9  103605.0 #>   7    62627.2   44411.7   73005.1   68029.4   71202.0   36669.7   47899.3 #>   8    49418.3   45231.8   32053.7   52465.8   48326.9   49594.8   24891.5 #>   9    31996.7   35608.8   32755.0   23308.8   38248.3   35143.0   35587.0 #>   10   68585.1   74612.3   79021.3   78690.9   73222.3   82791.3   88328.2 #>     year #> age  1964      1965      1966      1967      1968      1969      1970      #>   1  2449900.0  664500.0  579075.0  428110.0  418228.0  666902.0  671454.0 #>   2   502620.0 2057370.0  561599.0  486279.0  351300.0  328477.0  499525.0 #>   3   341643.0  343934.0 1437490.0  402660.0  346712.0  239678.0  214078.0 #>   4   283950.0  189574.0  194255.0  862270.0  249951.0  214175.0  146130.0 #>   5   170312.0  170953.0  113379.0  117592.0  533809.0  158259.0  137189.0 #>   6   121552.0  104036.0  103728.0   69241.0   72675.5  333787.0   99805.0 #>   7    64386.7   73564.1   63413.5   64736.1   43515.6   44971.0  204065.0 #>   8    31671.7   42047.6   48694.7   42848.4   43754.3   28686.1   28864.1 #>   9    17425.6   21773.1   29156.9   34459.9   30486.1   30610.0   19555.5 #>   10   89949.7   74801.9   67158.6   68866.5   75287.6   76834.4   76614.6 #>     year #> age  1971      1972      1973      1974      1975      1976      1977      #>   1   433599.0  367450.0 1391430.0 1074920.0  787372.0  674010.0 1033740.0 #>   2   495583.0  322847.0  274502.0 1025520.0  767410.0  534441.0  432591.0 #>   3   324931.0  328032.0  212726.0  175441.0  635424.0  469588.0  324352.0 #>   4   130830.0  198448.0  194134.0  119185.0   95486.7  354654.0  270674.0 #>   5    92885.0   80660.2  115448.0  105314.0   62528.3   51565.8  199395.0 #>   6    86638.5   57736.0   47858.4   64234.3   56842.0   34795.5   29688.2 #>   7    61697.5   54135.3   35370.6   28087.4   36940.6   33525.3   20971.2 #>   8   130295.0   39537.1   34377.0   21998.3   17263.3   22879.5   20930.5 #>   9    19273.9   85654.3   25584.3   21899.6   13875.4   10882.2   14512.6 #>   10   66652.6   57588.9   92986.6   75118.4   60677.9   46683.2   36597.8 #>     year #> age  1978      1979      1980      1981      1982      1983      1984      #>   1   879043.0  915553.0 1078660.0  999968.0 1935350.0 1375880.0 1302060.0 #>   2   640577.0  548706.0  603278.0  759629.0  728751.0 1391630.0  948596.0 #>   3   256771.0  368443.0  308663.0  338604.0  431979.0  422976.0  820717.0 #>   4   186122.0  141111.0  188898.0  147121.0  156042.0  206296.0  214367.0 #>   5   153084.0  102391.0   74240.4   94918.5   71554.5   75327.9  100486.0 #>   6   113431.0   83438.8   54395.5   39883.2   51872.3   38991.5   40129.1 #>   7    17442.0   63121.2   45292.9   30397.5   23273.3   31032.9   23210.4 #>   8    12952.3   10501.4   37093.0   26405.0   18034.5   14363.0   19675.9 #>   9    13395.2    8318.7    6668.8   23029.0   16239.1   11328.1    9269.7 #>   10   33351.6   31239.8   26643.8   22198.4   29551.0   29398.7   26037.4 #>     year #> age  1985      1986      1987      1988      1989      1990      1991      #>   1  1792220.0 4303680.0 1910200.0 1774940.0 1250510.0 1083810.0  981356.0 #>   2   864871.0 1177750.0 2866780.0 1308470.0 1251000.0  898824.0  785747.0 #>   3   559870.0  503176.0  670566.0 1602170.0  730349.0  716388.0  530410.0 #>   4   429744.0  291704.0  253291.0  320928.0  743636.0  347377.0  357105.0 #>   5   105579.0  212338.0  142492.0  120680.0  150385.0  353208.0  169944.0 #>   6    51597.9   51971.1  101004.0   66591.7   55845.9   68749.9  159986.0 #>   7    22812.3   27066.0   25237.6   47264.9   30819.2   25576.2   30985.4 #>   8    14467.2   13364.5   14671.0   12950.5   23964.9   16156.4   13837.3 #>   9    12765.7    9167.3    8060.4    8304.2    7096.0   13682.2    9708.3 #>   10   22968.3   23691.3   21446.4   18014.1   15057.6   12910.2   16297.5 #>     year #> age  1992      1993      1994      1995      1996      1997      1998      #>   1   854841.0  550376.0  566448.0  932162.0  893056.0 2431310.0  778427.0 #>   2   709583.0  614021.0  398693.0  423980.0  722992.0  708162.0 1941390.0 #>   3   465814.0  412376.0  355244.0  239117.0  261727.0  433954.0  398394.0 #>   4   268732.0  230658.0  199926.0  173831.0  115825.0  114808.0  163844.0 #>   5   177919.0  133599.0  113279.0   96739.9   81895.9   51781.9   48217.9 #>   6    77446.0   82752.7   63227.4   53666.9   45201.5   37345.9   22897.6 #>   7    70809.8   33854.3   36415.8   28660.1   24870.8   20578.7   16297.6 #>   8    16300.8   33881.2   15013.9   16696.8   14022.1   12186.0    9697.5 #>   9     8133.4    8552.4   15995.5    7339.9    8872.5    7570.6    6374.5 #>   10   15761.0   13206.8   11093.7   14408.1   12542.4   12623.6   11589.9 #>     year #> age  1999      2000      2001      2002      2003      2004      2005      #>   1   683151.0  857525.0  634808.0        NA        NA        NA  863893.0 #>   2   617294.0  531403.0  653888.0        NA        NA        NA  894667.0 #>   3  1091830.0  381345.0  349511.0        NA        NA        NA  238706.0 #>   4   151199.0  510105.0  205661.0        NA        NA        NA  365617.0 #>   5    67219.3   64650.9  232564.0        NA        NA        NA   66113.3 #>   6    20631.8   28114.9   27483.5        NA        NA        NA   57107.9 #>   7     9911.4    9398.3   13484.8        NA        NA        NA   29565.3 #>   8     7927.6    5445.6    5587.2        NA        NA        NA   16720.1 #>   9     5219.9    4778.1    3568.0        NA        NA        NA   20533.5 #>   10   10285.7    9459.5    9463.7        NA        NA        NA   12764.9 #>     year #> age  2006      2007      2008      2009      2010      2011      2012      #>   1   875191.0 1379750.0 1135050.0 1088820.0 1444570.0 1608190.0 1278010.0 #>   2   618023.0  651007.0 1067080.0  879336.0  826492.0 1109460.0 1299830.0 #>   3   552652.0  393107.0  420759.0  719298.0  627121.0  613580.0  837139.0 #>   4   136058.0  326369.0  234965.0  266894.0  493740.0  448410.0  436124.0 #>   5   219194.0   87128.7  219954.0  163268.0  188123.0  349991.0  318435.0 #>   6    41505.0  148406.0   62707.2  164048.0  123503.0  142101.0  261180.0 #>   7    37777.6   29245.7  109232.0   48044.5  129629.0   98702.9  112594.0 #>   8    21233.8   28310.9   22299.1   85182.6   38534.8  106302.0   81974.3 #>   9    12941.5   17026.1   23120.2   18460.8   71434.6   32718.3   91209.7 #>   10   27199.2   33875.1   43959.2   58555.1   67452.5  121698.0  135291.0 #>     year #> age  2013      2014      2015      2016      2017      #>   1  1455050.0 1640700.0  895620.0 1211320.0 1823000.0 #>   2  1063130.0 1193580.0 1286330.0  689025.0  973599.0 #>   3   980853.0  793858.0  880738.0  948914.0  515997.0 #>   4   582663.0  681616.0  559741.0  626799.0  672732.0 #>   5   309658.0  413410.0  483694.0  398150.0  447979.0 #>   6   234879.0  228655.0  308142.0  362736.0  298156.0 #>   7   204189.0  183635.0  180488.0  244483.0  286575.0 #>   8    93937.9  169885.0  151867.0  148885.0  202450.0 #>   9    70713.1   80901.8  145583.0  130001.0  128177.0 #>   10  198423.0  235842.0  277893.0  372467.0  443492.0 #>  #> units:  1000   # Appends inside x stock.n(append(fs1, fs3, after=2000)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957      1958      1959      1960      1961      1962      1963      #>   1   477074.0  710748.0  874712.0  797702.0  870799.0  615691.0  610017.0 #>   2   268185.0  391105.0  574019.0  696497.0  629331.0  688002.0  494583.0 #>   3   361589.0  204551.0  286216.0  404963.0  485155.0  441333.0  482883.0 #>   4   223134.0  251892.0  135739.0  182546.0  255875.0  308828.0  276136.0 #>   5   147904.0  148258.0  164040.0   87017.8  116368.0  163035.0  195022.0 #>   6    60608.8  103574.0  100146.0  107321.0   55977.1   74519.9  103605.0 #>   7    62627.2   44411.7   73005.1   68029.4   71202.0   36669.7   47899.3 #>   8    49418.3   45231.8   32053.7   52465.8   48326.9   49594.8   24891.5 #>   9    31996.7   35608.8   32755.0   23308.8   38248.3   35143.0   35587.0 #>   10   68585.1   74612.3   79021.3   78690.9   73222.3   82791.3   88328.2 #>     year #> age  1964      1965      1966      1967      1968      1969      1970      #>   1  2449900.0  664500.0  579075.0  428110.0  418228.0  666902.0  671454.0 #>   2   502620.0 2057370.0  561599.0  486279.0  351300.0  328477.0  499525.0 #>   3   341643.0  343934.0 1437490.0  402660.0  346712.0  239678.0  214078.0 #>   4   283950.0  189574.0  194255.0  862270.0  249951.0  214175.0  146130.0 #>   5   170312.0  170953.0  113379.0  117592.0  533809.0  158259.0  137189.0 #>   6   121552.0  104036.0  103728.0   69241.0   72675.5  333787.0   99805.0 #>   7    64386.7   73564.1   63413.5   64736.1   43515.6   44971.0  204065.0 #>   8    31671.7   42047.6   48694.7   42848.4   43754.3   28686.1   28864.1 #>   9    17425.6   21773.1   29156.9   34459.9   30486.1   30610.0   19555.5 #>   10   89949.7   74801.9   67158.6   68866.5   75287.6   76834.4   76614.6 #>     year #> age  1971      1972      1973      1974      1975      1976      1977      #>   1   433599.0  367450.0 1391430.0 1074920.0  787372.0  674010.0 1033740.0 #>   2   495583.0  322847.0  274502.0 1025520.0  767410.0  534441.0  432591.0 #>   3   324931.0  328032.0  212726.0  175441.0  635424.0  469588.0  324352.0 #>   4   130830.0  198448.0  194134.0  119185.0   95486.7  354654.0  270674.0 #>   5    92885.0   80660.2  115448.0  105314.0   62528.3   51565.8  199395.0 #>   6    86638.5   57736.0   47858.4   64234.3   56842.0   34795.5   29688.2 #>   7    61697.5   54135.3   35370.6   28087.4   36940.6   33525.3   20971.2 #>   8   130295.0   39537.1   34377.0   21998.3   17263.3   22879.5   20930.5 #>   9    19273.9   85654.3   25584.3   21899.6   13875.4   10882.2   14512.6 #>   10   66652.6   57588.9   92986.6   75118.4   60677.9   46683.2   36597.8 #>     year #> age  1978      1979      1980      1981      1982      1983      1984      #>   1   879043.0  915553.0 1078660.0  999968.0 1935350.0 1375880.0 1302060.0 #>   2   640577.0  548706.0  603278.0  759629.0  728751.0 1391630.0  948596.0 #>   3   256771.0  368443.0  308663.0  338604.0  431979.0  422976.0  820717.0 #>   4   186122.0  141111.0  188898.0  147121.0  156042.0  206296.0  214367.0 #>   5   153084.0  102391.0   74240.4   94918.5   71554.5   75327.9  100486.0 #>   6   113431.0   83438.8   54395.5   39883.2   51872.3   38991.5   40129.1 #>   7    17442.0   63121.2   45292.9   30397.5   23273.3   31032.9   23210.4 #>   8    12952.3   10501.4   37093.0   26405.0   18034.5   14363.0   19675.9 #>   9    13395.2    8318.7    6668.8   23029.0   16239.1   11328.1    9269.7 #>   10   33351.6   31239.8   26643.8   22198.4   29551.0   29398.7   26037.4 #>     year #> age  1985      1986      1987      1988      1989      1990      1991      #>   1  1792220.0 4303680.0 1910200.0 1774940.0 1250510.0 1083810.0  981356.0 #>   2   864871.0 1177750.0 2866780.0 1308470.0 1251000.0  898824.0  785747.0 #>   3   559870.0  503176.0  670566.0 1602170.0  730349.0  716388.0  530410.0 #>   4   429744.0  291704.0  253291.0  320928.0  743636.0  347377.0  357105.0 #>   5   105579.0  212338.0  142492.0  120680.0  150385.0  353208.0  169944.0 #>   6    51597.9   51971.1  101004.0   66591.7   55845.9   68749.9  159986.0 #>   7    22812.3   27066.0   25237.6   47264.9   30819.2   25576.2   30985.4 #>   8    14467.2   13364.5   14671.0   12950.5   23964.9   16156.4   13837.3 #>   9    12765.7    9167.3    8060.4    8304.2    7096.0   13682.2    9708.3 #>   10   22968.3   23691.3   21446.4   18014.1   15057.6   12910.2   16297.5 #>     year #> age  1992      1993      1994      1995      1996      1997      1998      #>   1   854841.0  550376.0  566448.0  932162.0  893056.0 2431310.0  778427.0 #>   2   709583.0  614021.0  398693.0  423980.0  722992.0  708162.0 1941390.0 #>   3   465814.0  412376.0  355244.0  239117.0  261727.0  433954.0  398394.0 #>   4   268732.0  230658.0  199926.0  173831.0  115825.0  114808.0  163844.0 #>   5   177919.0  133599.0  113279.0   96739.9   81895.9   51781.9   48217.9 #>   6    77446.0   82752.7   63227.4   53666.9   45201.5   37345.9   22897.6 #>   7    70809.8   33854.3   36415.8   28660.1   24870.8   20578.7   16297.6 #>   8    16300.8   33881.2   15013.9   16696.8   14022.1   12186.0    9697.5 #>   9     8133.4    8552.4   15995.5    7339.9    8872.5    7570.6    6374.5 #>   10   15761.0   13206.8   11093.7   14408.1   12542.4   12623.6   11589.9 #>     year #> age  1999      2000      2001      2002      2003      2004      2005      #>   1   683151.0  857525.0  634808.0        NA        NA        NA  863893.0 #>   2   617294.0  531403.0  653888.0        NA        NA        NA  894667.0 #>   3  1091830.0  381345.0  349511.0        NA        NA        NA  238706.0 #>   4   151199.0  510105.0  205661.0        NA        NA        NA  365617.0 #>   5    67219.3   64650.9  232564.0        NA        NA        NA   66113.3 #>   6    20631.8   28114.9   27483.5        NA        NA        NA   57107.9 #>   7     9911.4    9398.3   13484.8        NA        NA        NA   29565.3 #>   8     7927.6    5445.6    5587.2        NA        NA        NA   16720.1 #>   9     5219.9    4778.1    3568.0        NA        NA        NA   20533.5 #>   10   10285.7    9459.5    9463.7        NA        NA        NA   12764.9 #>     year #> age  2006      2007      2008      2009      2010      2011      2012      #>   1   875191.0 1379750.0 1135050.0 1088820.0 1444570.0 1608190.0 1278010.0 #>   2   618023.0  651007.0 1067080.0  879336.0  826492.0 1109460.0 1299830.0 #>   3   552652.0  393107.0  420759.0  719298.0  627121.0  613580.0  837139.0 #>   4   136058.0  326369.0  234965.0  266894.0  493740.0  448410.0  436124.0 #>   5   219194.0   87128.7  219954.0  163268.0  188123.0  349991.0  318435.0 #>   6    41505.0  148406.0   62707.2  164048.0  123503.0  142101.0  261180.0 #>   7    37777.6   29245.7  109232.0   48044.5  129629.0   98702.9  112594.0 #>   8    21233.8   28310.9   22299.1   85182.6   38534.8  106302.0   81974.3 #>   9    12941.5   17026.1   23120.2   18460.8   71434.6   32718.3   91209.7 #>   10   27199.2   33875.1   43959.2   58555.1   67452.5  121698.0  135291.0 #>     year #> age  2013      2014      2015      2016      2017      #>   1  1455050.0 1640700.0  895620.0 1211320.0 1823000.0 #>   2  1063130.0 1193580.0 1286330.0  689025.0  973599.0 #>   3   980853.0  793858.0  880738.0  948914.0  515997.0 #>   4   582663.0  681616.0  559741.0  626799.0  672732.0 #>   5   309658.0  413410.0  483694.0  398150.0  447979.0 #>   6   234879.0  228655.0  308142.0  362736.0  298156.0 #>   7   204189.0  183635.0  180488.0  244483.0  286575.0 #>   8    93937.9  169885.0  151867.0  148885.0  202450.0 #>   9    70713.1   80901.8  145583.0  130001.0  128177.0 #>   10  198423.0  235842.0  277893.0  372467.0  443492.0 #>  #> units:  1000  # Appends after end of x stock.n(append(fs1, fs3, after=2005)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957      1958      1959      1960      1961      1962      1963      #>   1   477074.0  710748.0  874712.0  797702.0  870799.0  615691.0  610017.0 #>   2   268185.0  391105.0  574019.0  696497.0  629331.0  688002.0  494583.0 #>   3   361589.0  204551.0  286216.0  404963.0  485155.0  441333.0  482883.0 #>   4   223134.0  251892.0  135739.0  182546.0  255875.0  308828.0  276136.0 #>   5   147904.0  148258.0  164040.0   87017.8  116368.0  163035.0  195022.0 #>   6    60608.8  103574.0  100146.0  107321.0   55977.1   74519.9  103605.0 #>   7    62627.2   44411.7   73005.1   68029.4   71202.0   36669.7   47899.3 #>   8    49418.3   45231.8   32053.7   52465.8   48326.9   49594.8   24891.5 #>   9    31996.7   35608.8   32755.0   23308.8   38248.3   35143.0   35587.0 #>   10   68585.1   74612.3   79021.3   78690.9   73222.3   82791.3   88328.2 #>     year #> age  1964      1965      1966      1967      1968      1969      1970      #>   1  2449900.0  664500.0  579075.0  428110.0  418228.0  666902.0  671454.0 #>   2   502620.0 2057370.0  561599.0  486279.0  351300.0  328477.0  499525.0 #>   3   341643.0  343934.0 1437490.0  402660.0  346712.0  239678.0  214078.0 #>   4   283950.0  189574.0  194255.0  862270.0  249951.0  214175.0  146130.0 #>   5   170312.0  170953.0  113379.0  117592.0  533809.0  158259.0  137189.0 #>   6   121552.0  104036.0  103728.0   69241.0   72675.5  333787.0   99805.0 #>   7    64386.7   73564.1   63413.5   64736.1   43515.6   44971.0  204065.0 #>   8    31671.7   42047.6   48694.7   42848.4   43754.3   28686.1   28864.1 #>   9    17425.6   21773.1   29156.9   34459.9   30486.1   30610.0   19555.5 #>   10   89949.7   74801.9   67158.6   68866.5   75287.6   76834.4   76614.6 #>     year #> age  1971      1972      1973      1974      1975      1976      1977      #>   1   433599.0  367450.0 1391430.0 1074920.0  787372.0  674010.0 1033740.0 #>   2   495583.0  322847.0  274502.0 1025520.0  767410.0  534441.0  432591.0 #>   3   324931.0  328032.0  212726.0  175441.0  635424.0  469588.0  324352.0 #>   4   130830.0  198448.0  194134.0  119185.0   95486.7  354654.0  270674.0 #>   5    92885.0   80660.2  115448.0  105314.0   62528.3   51565.8  199395.0 #>   6    86638.5   57736.0   47858.4   64234.3   56842.0   34795.5   29688.2 #>   7    61697.5   54135.3   35370.6   28087.4   36940.6   33525.3   20971.2 #>   8   130295.0   39537.1   34377.0   21998.3   17263.3   22879.5   20930.5 #>   9    19273.9   85654.3   25584.3   21899.6   13875.4   10882.2   14512.6 #>   10   66652.6   57588.9   92986.6   75118.4   60677.9   46683.2   36597.8 #>     year #> age  1978      1979      1980      1981      1982      1983      1984      #>   1   879043.0  915553.0 1078660.0  999968.0 1935350.0 1375880.0 1302060.0 #>   2   640577.0  548706.0  603278.0  759629.0  728751.0 1391630.0  948596.0 #>   3   256771.0  368443.0  308663.0  338604.0  431979.0  422976.0  820717.0 #>   4   186122.0  141111.0  188898.0  147121.0  156042.0  206296.0  214367.0 #>   5   153084.0  102391.0   74240.4   94918.5   71554.5   75327.9  100486.0 #>   6   113431.0   83438.8   54395.5   39883.2   51872.3   38991.5   40129.1 #>   7    17442.0   63121.2   45292.9   30397.5   23273.3   31032.9   23210.4 #>   8    12952.3   10501.4   37093.0   26405.0   18034.5   14363.0   19675.9 #>   9    13395.2    8318.7    6668.8   23029.0   16239.1   11328.1    9269.7 #>   10   33351.6   31239.8   26643.8   22198.4   29551.0   29398.7   26037.4 #>     year #> age  1985      1986      1987      1988      1989      1990      1991      #>   1  1792220.0 4303680.0 1910200.0 1774940.0 1250510.0 1083810.0  981356.0 #>   2   864871.0 1177750.0 2866780.0 1308470.0 1251000.0  898824.0  785747.0 #>   3   559870.0  503176.0  670566.0 1602170.0  730349.0  716388.0  530410.0 #>   4   429744.0  291704.0  253291.0  320928.0  743636.0  347377.0  357105.0 #>   5   105579.0  212338.0  142492.0  120680.0  150385.0  353208.0  169944.0 #>   6    51597.9   51971.1  101004.0   66591.7   55845.9   68749.9  159986.0 #>   7    22812.3   27066.0   25237.6   47264.9   30819.2   25576.2   30985.4 #>   8    14467.2   13364.5   14671.0   12950.5   23964.9   16156.4   13837.3 #>   9    12765.7    9167.3    8060.4    8304.2    7096.0   13682.2    9708.3 #>   10   22968.3   23691.3   21446.4   18014.1   15057.6   12910.2   16297.5 #>     year #> age  1992      1993      1994      1995      1996      1997      1998      #>   1   854841.0  550376.0  566448.0  932162.0  893056.0 2431310.0  778427.0 #>   2   709583.0  614021.0  398693.0  423980.0  722992.0  708162.0 1941390.0 #>   3   465814.0  412376.0  355244.0  239117.0  261727.0  433954.0  398394.0 #>   4   268732.0  230658.0  199926.0  173831.0  115825.0  114808.0  163844.0 #>   5   177919.0  133599.0  113279.0   96739.9   81895.9   51781.9   48217.9 #>   6    77446.0   82752.7   63227.4   53666.9   45201.5   37345.9   22897.6 #>   7    70809.8   33854.3   36415.8   28660.1   24870.8   20578.7   16297.6 #>   8    16300.8   33881.2   15013.9   16696.8   14022.1   12186.0    9697.5 #>   9     8133.4    8552.4   15995.5    7339.9    8872.5    7570.6    6374.5 #>   10   15761.0   13206.8   11093.7   14408.1   12542.4   12623.6   11589.9 #>     year #> age  1999      2000      2001      2002      2003      2004      2005      #>   1   683151.0  857525.0  634808.0        NA        NA        NA  863893.0 #>   2   617294.0  531403.0  653888.0        NA        NA        NA  894667.0 #>   3  1091830.0  381345.0  349511.0        NA        NA        NA  238706.0 #>   4   151199.0  510105.0  205661.0        NA        NA        NA  365617.0 #>   5    67219.3   64650.9  232564.0        NA        NA        NA   66113.3 #>   6    20631.8   28114.9   27483.5        NA        NA        NA   57107.9 #>   7     9911.4    9398.3   13484.8        NA        NA        NA   29565.3 #>   8     7927.6    5445.6    5587.2        NA        NA        NA   16720.1 #>   9     5219.9    4778.1    3568.0        NA        NA        NA   20533.5 #>   10   10285.7    9459.5    9463.7        NA        NA        NA   12764.9 #>     year #> age  2006      2007      2008      2009      2010      2011      2012      #>   1   875191.0 1379750.0 1135050.0 1088820.0 1444570.0 1608190.0 1278010.0 #>   2   618023.0  651007.0 1067080.0  879336.0  826492.0 1109460.0 1299830.0 #>   3   552652.0  393107.0  420759.0  719298.0  627121.0  613580.0  837139.0 #>   4   136058.0  326369.0  234965.0  266894.0  493740.0  448410.0  436124.0 #>   5   219194.0   87128.7  219954.0  163268.0  188123.0  349991.0  318435.0 #>   6    41505.0  148406.0   62707.2  164048.0  123503.0  142101.0  261180.0 #>   7    37777.6   29245.7  109232.0   48044.5  129629.0   98702.9  112594.0 #>   8    21233.8   28310.9   22299.1   85182.6   38534.8  106302.0   81974.3 #>   9    12941.5   17026.1   23120.2   18460.8   71434.6   32718.3   91209.7 #>   10   27199.2   33875.1   43959.2   58555.1   67452.5  121698.0  135291.0 #>     year #> age  2013      2014      2015      2016      2017      2018      #>   1  1455050.0 1640700.0  895620.0 1211320.0 1823000.0        NA #>   2  1063130.0 1193580.0 1286330.0  689025.0  973599.0        NA #>   3   980853.0  793858.0  880738.0  948914.0  515997.0        NA #>   4   582663.0  681616.0  559741.0  626799.0  672732.0        NA #>   5   309658.0  413410.0  483694.0  398150.0  447979.0        NA #>   6   234879.0  228655.0  308142.0  362736.0  298156.0        NA #>   7   204189.0  183635.0  180488.0  244483.0  286575.0        NA #>   8    93937.9  169885.0  151867.0  148885.0  202450.0        NA #>   9    70713.1   80901.8  145583.0  130001.0  128177.0        NA #>   10  198423.0  235842.0  277893.0  372467.0  443492.0        NA #>  #> units:  1000"},{"path":"/reference/apply-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"apply method for FLCore classes — apply,FLArray,numeric,function-method","title":"apply method for FLCore classes — apply,FLArray,numeric,function-method","text":"Applies function margins array-based FLCore class","code":""},{"path":"/reference/apply-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"apply method for FLCore classes — apply,FLArray,numeric,function-method","text":"","code":"# S4 method for FLArray,numeric,`function` apply(X, MARGIN, FUN, ..., simplify = TRUE)  # S4 method for FLPar,ANY,ANY apply(X, MARGIN, FUN, ..., simplify = TRUE)  # S4 method for FLQuantJK,numeric,`function` apply(X, MARGIN, FUN, ..., simplify = TRUE)  # S4 method for FLParJK,numeric,`function` apply(X, MARGIN, FUN, ..., simplify = TRUE)"},{"path":"/reference/apply-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"apply method for FLCore classes — apply,FLArray,numeric,function-method","text":"methods call R's base::apply FLArray standard arithmetic operators included Arith group (\"+\", \"-\", \"*\", `\"^\", \"%%\", \"%/%\", \"/\"), return object appropriate class. operation involves objects two classes (e.g. FLPar FLQuant), class returned object complexs object, case FLQuant.","code":""},{"path":[]},{"path":"/reference/apply-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"apply method for FLCore classes — apply,FLArray,numeric,function-method","text":"FLR Team","code":""},{"path":"/reference/apply-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"apply method for FLCore classes — apply,FLArray,numeric,function-method","text":"","code":"flq <- FLQuant(rlnorm(90), dim=c(3,10), units='kg') flp <- FLPar(a=99)  # FLQuant and numeric flq * 25 #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       2       3       4       5       6       7       8       9       #>     1 14.0885 14.9662  6.3983 17.5206 52.5904 10.5750  9.7492 61.2581 93.9552 #>     2 75.6392 19.9283 85.2276 15.0173  4.7787 31.2725 18.3706 11.3174  6.3499 #>     3  5.2799 35.6988 12.1649 11.6934 11.4983 21.6870 44.4522  5.8776 10.8897 #>      year #> quant 10      #>     1 95.7868 #>     2 14.9923 #>     3  5.8320 #>  #> units:  kg  # Two FLQuant objects flq + flq #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       2       3       4       5       6       7       8       9       #>     1 1.12708 1.19730 0.51187 1.40165 4.20723 0.84600 0.77994 4.90064 7.51641 #>     2 6.05113 1.59427 6.81820 1.20138 0.38229 2.50180 1.46965 0.90539 0.50799 #>     3 0.42239 2.85590 0.97319 0.93547 0.91986 1.73496 3.55618 0.47021 0.87118 #>      year #> quant 10      #>     1 7.66295 #>     2 1.19938 #>     3 0.46656 #>  #> units:  kg"},{"path":"/reference/ar1rlnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a time series of possible bias-corrected lognormal autocorrelated random values — ar1rlnorm","title":"Generates a time series of possible bias-corrected lognormal autocorrelated random values — ar1rlnorm","text":"Thorston, 2020.","code":""},{"path":"/reference/ar1rlnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a time series of possible bias-corrected lognormal autocorrelated random values — ar1rlnorm","text":"","code":"ar1rlnorm(   rho,   years,   iters = 1,   meanlog = 0,   sdlog = 1,   bias.correct = TRUE,   ... )"},{"path":"/reference/ar1rlnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a time series of possible bias-corrected lognormal autocorrelated random values — ar1rlnorm","text":"rho Autocorrelation coefficient. years Vector year names. iters Number iterations. meanlog Mean series log space. sdlog Marginal standard deviation log space. bias.correct bias-correction applied? Defaults TRUE.","code":""},{"path":"/reference/ar1rlnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a time series of possible bias-corrected lognormal autocorrelated random values — ar1rlnorm","text":"FLQuant object","code":""},{"path":"/reference/ar1rlnorm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a time series of possible bias-corrected lognormal autocorrelated random values — ar1rlnorm","text":"Thorson, J. T. Predicting recruitment density dependence intrinsic growth rate fishes worldwide using data-integrated life-history model. Fish Fish. 2020; 21: 237– 251. https://doi-org.ezproxy.library.wur.nl/10.1111/faf.12427","code":""},{"path":[]},{"path":"/reference/ar1rlnorm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a time series of possible bias-corrected lognormal autocorrelated random values — ar1rlnorm","text":"Iago Mosqueira (WMR), Henning Winker (JRC).","code":""},{"path":"/reference/ar1rlnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a time series of possible bias-corrected lognormal autocorrelated random values — ar1rlnorm","text":"","code":"devs <- ar1rlnorm(rho=0.6, years=2000:2030, iter=500, meanlog=0, sdlog=1) plot(devs)"},{"path":"/reference/as.FLSRs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an FLStock into a list of one or FLSR objects. — as.FLSRs","title":"Convert an FLStock into a list of one or FLSR objects. — as.FLSRs","text":"single FLStock can coerced list one objects class FLSR, typically set diefferemt stock-recruit model.","code":""},{"path":"/reference/as.FLSRs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an FLStock into a list of one or FLSR objects. — as.FLSRs","text":"","code":"as.FLSRs(x, models = NULL, ...)"},{"path":"/reference/as.FLSRs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an FLStock into a list of one or FLSR objects. — as.FLSRs","text":"x estimated FLStock object coerce. models Name(s) model(s) fit. ... extra arguments passed .FLSR.","code":""},{"path":"/reference/as.FLSRs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an FLStock into a list of one or FLSR objects. — as.FLSRs","text":"objecdt class FLSRs","code":""},{"path":[]},{"path":"/reference/as.FLSRs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert an FLStock into a list of one or FLSR objects. — as.FLSRs","text":"FLR Team, 2023.","code":""},{"path":"/reference/as.FLSRs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an FLStock into a list of one or FLSR objects. — as.FLSRs","text":"","code":"data(ple4) as.FLSRs(ple4, model=c(\"bevholt\", \"segreg\")) #> An object of class \"FLSRs\" #> [[1]] #> An object of class \"FLSR\" #>  #> Name: PLE  #> Description: 'rec' and 'ssb' slots obtained from a 'FLStock' object  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t1\t60\t1\t1\t1\t1\t #>  #> Range:  min\tminyear\tmax\tmaxyear  #> \t1\t1958\t1\t2017\t #>  #>  #> Model: \trec ~ a * ssb/(b + ssb) #> An object of class \"FLPar\" #> params #>  a  b  #> NA NA  #> units:  NA  #> Log-likelihood:  NA(NA)  #> Variance-covariance:       params #> params  a  b #>      a NA NA #>      b NA NA #>  #> [[2]] #> An object of class \"FLSR\" #>  #> Name: PLE  #> Description: 'rec' and 'ssb' slots obtained from a 'FLStock' object  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t1\t60\t1\t1\t1\t1\t #>  #> Range:  min\tminyear\tmax\tmaxyear  #> \t1\t1958\t1\t2017\t #>  #>  #> Model: \trec ~ ifelse(ssb <= b, a * ssb, a * b) #> An object of class \"FLPar\" #> params #>  a  b  #> NA NA  #> units:  NA  #> Log-likelihood:  NA(NA)  #> Variance-covariance:       params #> params  a  b #>      a NA NA #>      b NA NA #>  #> Slot \"names\": #> [1] \"bevholt\" \"segreg\"  #>  #> Slot \"desc\": #> character(0) #>  #> Slot \"lock\": #> [1] FALSE #>"},{"path":"/reference/bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Bias of estimates through jackknife — bias","title":"Bias of estimates through jackknife — bias","text":"Description: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eleifend odio ac rutrum luctus. Aenean placerat porttitor commodo. Pellentesque eget porta libero. Pellentesque molestie mi sed orci feugiat, non mollis enim tristique.","code":""},{"path":"/reference/bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bias of estimates through jackknife — bias","text":"","code":"# S4 method for FLQuantJK bias(x)  # S4 method for FLParJK bias(x)"},{"path":"/reference/bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bias of estimates through jackknife — bias","text":"x object holding estimates obtained jackknife","code":""},{"path":"/reference/bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bias of estimates through jackknife — bias","text":"value mean bias","code":""},{"path":"/reference/bias.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bias of estimates through jackknife — bias","text":"Details: Aliquam sagittis feugiat felis eget consequat. Praesent eleifend dolor massa, vitae faucibus justo lacinia . Cras sed erat et magna pharetra bibendum quis mi. Sed sodales mollis arcu, sit amet venenatis lorem fringilla vel. Vivamus vitae ipsum sem. Donec malesuada purus libero bibendum accumsan. Donec ipsum sapien, feugiat blandit arcu , dapibus dictum felis. $$\\widehat{Bias}_{(\\theta)} = (n - 1)((\\frac{1}{n}\\sum\\limits_{=1}^n\\hat{\\theta}_{()})-\\hat{\\theta})$$","code":""},{"path":[]},{"path":"/reference/bias.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bias of estimates through jackknife — bias","text":"FLR Team","code":""},{"path":"/reference/bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bias of estimates through jackknife — bias","text":"","code":"flq <- FLQuant(1:8) flj <- jackknife(flq) bias(flj) #> An object of class \"FLQuant\" #> iters:  8  #>  #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1         2         3         4         5         6         7         #>   all 1.0200(0) 1.0404(0) 1.0612(0) 1.0824(0) 1.1041(0) 1.1262(0) 1.1487(0) #>      year #> quant 8         #>   all 1.1717(0) #>  #> units:  NA"},{"path":"/reference/bubbles.html","id":null,"dir":"Reference","previous_headings":"","what":"Method Bubbles plot — bubbles","title":"Method Bubbles plot — bubbles","text":"method plots three dimensional data matrices age year age-class, common fisheries. area bubble proportional corresponding value matrix. Note bubbles accepts argument bub.scale control relative size bubbles. Positive negative values separate colours.","code":""},{"path":"/reference/bubbles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method Bubbles plot — bubbles","text":"","code":"# S4 method for formula,FLQuant bubbles(x, data, bub.scale = 2.5, col = c(\"blue\", \"red\"), ...)  # S4 method for formula,data.frame bubbles(x, data, bub.scale = 2.5, col = c(\"blue\", \"red\"), ...)  # S4 method for formula,FLCohort bubbles(x, data, bub.scale = 2.5, ...)  # S4 method for formula,FLQuants bubbles(x, data, bub.scale = 2.5, bub.col = gray(c(0.1, 0.1)), ...)"},{"path":"/reference/bubbles.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method Bubbles plot — bubbles","text":"bubbles(x, data)","code":""},{"path":[]},{"path":"/reference/bubbles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method Bubbles plot — bubbles","text":"FLR Team","code":""},{"path":"/reference/bubbles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method Bubbles plot — bubbles","text":"","code":"data(ple4) bubbles(age~year, data=catch.n(ple4))  bubbles(age~year, data=catch.n(ple4), bub.scale=5)  bubbles(age~cohort, data=FLCohort(catch.n(ple4)), bub.scale=5)   qt01 <- log(catch.n(ple4)+1) qt02 <- qt01+rnorm(length(qt01)) flqs <- FLQuants(qt01=qt01, qt02=qt02) bubbles(age~year|qname, data=flqs, bub.scale=1)   qt03 <- FLQuant(rnorm(100),dimnames=list(age=as.character(1:10),   year=as.character(1:10))) bubbles(age~year, data=qt03, bub.scale=7, col=c(\"black\",\"red\"), pch=16)"},{"path":"/reference/catch.n-FLQuant-method.html","id":null,"dir":"Reference","previous_headings":"","what":"catch.n calculation method — catch.n,FLQuant-method","title":"catch.n calculation method — catch.n,FLQuant-method","text":"Calculate catch.n (catch--age/length) abundances, F M using catch equation","code":""},{"path":"/reference/catch.n-FLQuant-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"catch.n calculation method — catch.n,FLQuant-method","text":"","code":"# S4 method for FLQuant catch.n(object, harvest, m)"},{"path":"/reference/catch.n-FLQuant-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"catch.n calculation method — catch.n,FLQuant-method","text":"catch--age/length, commonly found catch.n slot FLStock object, can simply calculated abundances--age/length, natural fishing mortalities--age/length applying catch equation $$C = N \\cdot F \\frac{F}{M+F} \\cdot (1 - {\\rm e}^(-M-F))$$","code":""},{"path":[]},{"path":"/reference/catch.n-FLQuant-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"catch.n calculation method — catch.n,FLQuant-method","text":"FLR Team","code":""},{"path":"/reference/catch.n-FLQuant-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"catch.n calculation method — catch.n,FLQuant-method","text":"","code":"data(ple4) res <- catch.n(stock.n(ple4), harvest(ple4), m(ple4)) catch.n(ple4) / res #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   1  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   2  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   3  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   4  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   5  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   6  1.00000 0.99999 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   7  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   8  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   9  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   10 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>     year #> age  1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   1  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   2  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   3  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   4  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   5  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   6  1.00001 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   7  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   8  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   9  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   10 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>     year #> age  1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   1  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   2  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   3  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   4  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   5  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   6  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   7  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   8  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   9  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   10 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>     year #> age  1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   1  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   2  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   3  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   4  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   5  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   6  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   7  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   8  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   9  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   10 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>     year #> age  1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   1  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   2  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   3  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   4  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   5  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   6  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   7  1.00000 1.00000 0.99999 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   8  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   9  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   10 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>     year #> age  2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   1  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 0.99999 1.00000 1.00000 #>   2  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   3  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   4  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   5  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   6  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   7  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   8  1.00000 1.00000 1.00000 1.00001 1.00000 1.00001 1.00000 1.00000 1.00000 #>   9  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   10 1.00000 1.00000 1.00000 0.99999 1.00000 1.00000 1.00000 1.00000 1.00000 #>     year #> age  2011    2012    2013    2014    2015    2016    2017    #>   1  1.00001 1.00000 1.00000 1.00000 1.00000 1.00000 1.00001 #>   2  1.00000 1.00000 1.00000 0.99999 0.99999 1.00000 1.00000 #>   3  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   4  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   5  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   6  1.00000 1.00000 1.00000 1.00000 1.00000 1.00001 1.00000 #>   7  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   8  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   9  1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>   10 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 1.00000 #>  #> units:  NA"},{"path":"/reference/catchMature.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportion of mature and inmature fish in the catch — catchInmature","title":"Proportion of mature and inmature fish in the catch — catchInmature","text":"proportion weight mature inmature fish catch can computed using catchMature catchInmature.","code":""},{"path":"/reference/catchMature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportion of mature and inmature fish in the catch — catchInmature","text":"","code":"catchInmature(object)  catchMature(object)"},{"path":"/reference/catchMature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportion of mature and inmature fish in the catch — catchInmature","text":"object age-structured FLStock object","code":""},{"path":"/reference/catchMature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportion of mature and inmature fish in the catch — catchInmature","text":"FLQuant object","code":""},{"path":[]},{"path":"/reference/catchMature.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Proportion of mature and inmature fish in the catch — catchInmature","text":"FLR Team","code":""},{"path":"/reference/catchMature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportion of mature and inmature fish in the catch — catchInmature","text":"","code":"data(ple4) catchInmature(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all  11792  12110  20054  25054  23842  21857  22721  25601  31779  41565 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all  18240  19683  23468  23484  28266  28470  31956  42319  54747  52910 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all  51540  54576  57286  58245  59681  70196  75922  85011  80664 112244 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 111446 114200  72999  62712  53467  49598  46376  37444  35802  39250 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all  55499  60331  64730  32075  35524  48878  54410  56284  36520  40576 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all  35517  39694  40525  36357  31164  33045  34036  29370  26922  26347 #>      year #> age   2017   #>   all  20826 #>  #> units:  t  catchMature(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all  66569  76676  85133  92921  95698 104434 118094 121939 119629 120701 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 136234 130137 122709 113135 112960 120920 119559 115675 110645 122972 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 114303 123590 115366 126446 124812 122243 136710 143254 166407 166985 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 197033 201045 219036 187892 164717 143093 133197 113805  96827  92470 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all  96696 110909 105932 113923  92582  94929  99619  83772  78031  71288 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all  69253  73702  75177  82467  88555  98827 107019 110380 110417 104870 #>      year #> age   2017   #>   all 104095 #>  #> units:  t"},{"path":"/reference/coerce-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Objects Between Classes — coerce-methods","title":"Convert Objects Between Classes — coerce-methods","text":"Objects various FLCore classes can converted classes, basic R ones, like data.frame, others defined package. specifics precise calculations carried pair classes, see .","code":""},{"path":"/reference/coerce-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Objects Between Classes — coerce-methods","text":"object Object converted. Class Name class convert object , character.","code":""},{"path":"/reference/coerce-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Objects Between Classes — coerce-methods","text":"object requested class.","code":""},{"path":"/reference/coerce-methods.html","id":"flarray-to-data-frame","dir":"Reference","previous_headings":"","what":"FLArray to data.frame","title":"Convert Objects Between Classes — coerce-methods","text":"six dimensions FLArray converted seven columns, named quant (name given first dimension object), year, unit, season, area, iter  data. last one contains actual numbers stored array. units stored attribute data.frame. year data columns type numeric, others factor.","code":""},{"path":"/reference/coerce-methods.html","id":"flpar-to-data-frame","dir":"Reference","previous_headings":"","what":"FLPar to data.frame","title":"Convert Objects Between Classes — coerce-methods","text":"two dimensions FLPar objects converted three columns. 2D objects, named params, iter data. last one contains actual numbers stored array, column type numeric, others factor.","code":""},{"path":[]},{"path":"/reference/coerce-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert Objects Between Classes — coerce-methods","text":"FLR Team","code":""},{"path":"/reference/coerce-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Objects Between Classes — coerce-methods","text":"","code":"# from FLQuant to data.frame as(FLQuant(rnorm(100), dim=c(5, 20)), \"data.frame\") #>     quant year   unit season   area iter        data #> 1       1    1 unique    all unique    1  1.78763033 #> 2       2    1 unique    all unique    1  1.29512026 #> 3       3    1 unique    all unique    1  1.34458461 #> 4       4    1 unique    all unique    1 -0.50866954 #> 5       5    1 unique    all unique    1 -1.12067009 #> 6       1    2 unique    all unique    1  2.15080494 #> 7       2    2 unique    all unique    1 -0.56171975 #> 8       3    2 unique    all unique    1 -1.31150938 #> 9       4    2 unique    all unique    1  0.28638227 #> 10      5    2 unique    all unique    1  0.48502761 #> 11      1    3 unique    all unique    1 -0.71824346 #> 12      2    3 unique    all unique    1  0.16284173 #> 13      3    3 unique    all unique    1  0.10048785 #> 14      4    3 unique    all unique    1  0.37686006 #> 15      5    3 unique    all unique    1  0.22373575 #> 16      1    4 unique    all unique    1  1.51603757 #> 17      2    4 unique    all unique    1  1.26931582 #> 18      3    4 unique    all unique    1 -0.13913783 #> 19      4    4 unique    all unique    1  0.60704860 #> 20      5    4 unique    all unique    1 -0.25928567 #> 21      1    5 unique    all unique    1 -0.59147634 #> 22      2    5 unique    all unique    1 -0.94550205 #> 23      3    5 unique    all unique    1  0.23658792 #> 24      4    5 unique    all unique    1 -0.09734917 #> 25      5    5 unique    all unique    1  2.04488154 #> 26      1    6 unique    all unique    1  1.20847318 #> 27      2    6 unique    all unique    1 -1.83053363 #> 28      3    6 unique    all unique    1  0.64945194 #> 29      4    6 unique    all unique    1  1.00227863 #> 30      5    6 unique    all unique    1 -1.35915129 #> 31      1    7 unique    all unique    1  0.19702464 #> 32      2    7 unique    all unique    1 -2.15306430 #> 33      3    7 unique    all unique    1 -1.77982626 #> 34      4    7 unique    all unique    1 -1.25637544 #> 35      5    7 unique    all unique    1  1.28399957 #> 36      1    8 unique    all unique    1  0.70016193 #> 37      2    8 unique    all unique    1  0.41712779 #> 38      3    8 unique    all unique    1 -0.09821147 #> 39      4    8 unique    all unique    1  1.23387018 #> 40      5    8 unique    all unique    1  0.38769108 #> 41      1    9 unique    all unique    1 -0.16425606 #> 42      2    9 unique    all unique    1 -0.41694062 #> 43      3    9 unique    all unique    1 -0.01955970 #> 44      4    9 unique    all unique    1 -1.28679411 #> 45      5    9 unique    all unique    1 -1.06172725 #> 46      1   10 unique    all unique    1 -0.65346943 #> 47      2   10 unique    all unique    1  0.54605449 #> 48      3   10 unique    all unique    1 -0.55388324 #> 49      4   10 unique    all unique    1  1.08120000 #> 50      5   10 unique    all unique    1  0.61657147 #> 51      1   11 unique    all unique    1  0.10733408 #> 52      2   11 unique    all unique    1 -0.00991494 #> 53      3   11 unique    all unique    1 -0.77790812 #> 54      4   11 unique    all unique    1  1.16752702 #> 55      5   11 unique    all unique    1  0.43972735 #> 56      1   12 unique    all unique    1 -0.79019806 #> 57      2   12 unique    all unique    1 -1.23396101 #> 58      3   12 unique    all unique    1  0.43384015 #> 59      4   12 unique    all unique    1  0.28184582 #> 60      5   12 unique    all unique    1 -1.73771157 #> 61      1   13 unique    all unique    1 -0.85059636 #> 62      2   13 unique    all unique    1  1.86252316 #> 63      3   13 unique    all unique    1  1.23862928 #> 64      4   13 unique    all unique    1 -0.59566744 #> 65      5   13 unique    all unique    1  0.91076876 #> 66      1   14 unique    all unique    1 -0.26576998 #> 67      2   14 unique    all unique    1  0.31774589 #> 68      3   14 unique    all unique    1  0.37823141 #> 69      4   14 unique    all unique    1 -0.90150371 #> 70      5   14 unique    all unique    1  1.21432212 #> 71      1   15 unique    all unique    1 -0.22544166 #> 72      2   15 unique    all unique    1 -0.21746329 #> 73      3   15 unique    all unique    1  1.04560399 #> 74      4   15 unique    all unique    1  1.79337756 #> 75      5   15 unique    all unique    1 -0.10441185 #> 76      1   16 unique    all unique    1  0.78948099 #> 77      2   16 unique    all unique    1 -2.07292184 #> 78      3   16 unique    all unique    1  2.21463109 #> 79      4   16 unique    all unique    1  1.57844773 #> 80      5   16 unique    all unique    1  1.22404338 #> 81      1   17 unique    all unique    1 -0.04916270 #> 82      2   17 unique    all unique    1  0.34662763 #> 83      3   17 unique    all unique    1  2.19509878 #> 84      4   17 unique    all unique    1  0.57898798 #> 85      5   17 unique    all unique    1 -0.69747658 #> 86      1   18 unique    all unique    1  0.44808265 #> 87      2   18 unique    all unique    1  0.33083346 #> 88      3   18 unique    all unique    1 -0.99741189 #> 89      4   18 unique    all unique    1 -0.14125862 #> 90      5   18 unique    all unique    1 -0.90833732 #> 91      1   19 unique    all unique    1  0.55064754 #> 92      2   19 unique    all unique    1 -0.80809562 #> 93      3   19 unique    all unique    1 -1.83893557 #> 94      4   19 unique    all unique    1  0.90553241 #> 95      5   19 unique    all unique    1 -1.45875228 #> 96      1   20 unique    all unique    1 -0.80164698 #> 97      2   20 unique    all unique    1 -0.91078482 #> 98      3   20 unique    all unique    1 -1.40536731 #> 99      4   20 unique    all unique    1  2.19468463 #> 100     5   20 unique    all unique    1 -1.13869430 # from FLPar to data.frame as(FLPar(phi=rnorm(10), rho=rlnorm(10)), \"data.frame\") #>    params iter       data #> 1     phi    1  0.1822600 #> 2     rho    1  3.6417114 #> 3     phi    2 -0.3206102 #> 4     rho    2  1.0118828 #> 5     phi    3  0.4063791 #> 6     rho    3  1.9171083 #> 7     phi    4 -0.6228697 #> 8     rho    4  0.3915606 #> 9     phi    5 -0.7322529 #> 10    rho    5  0.7894674 #> 11    phi    6  0.2540571 #> 12    rho    6  0.1592711 #> 13    phi    7  0.1513072 #> 14    rho    7  1.2529434 #> 15    phi    8 -0.4464694 #> 16    rho    8  1.0286380 #> 17    phi    9  0.2632531 #> 18    rho    9  2.6425528 #> 19    phi   10  1.7090840 #> 20    rho   10  0.8634691"},{"path":"/reference/compare-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"A method for comparing FLR objects — compare","title":"A method for comparing FLR objects — compare","text":"Comparisons complete objects FLR classes can carried report table generated better identify differences. Comparisons substitute complement provided R's .equal identical.","code":""},{"path":"/reference/compare-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A method for comparing FLR objects — compare","text":"","code":"compare(result, target, ...)"},{"path":"/reference/compare-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A method for comparing FLR objects — compare","text":"result First element comparison, result method operation. target Second element, desired output.","code":""},{"path":"/reference/compare-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A method for comparing FLR objects — compare","text":"table comparisons, class data.frame.","code":""},{"path":"/reference/compare-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A method for comparing FLR objects — compare","text":"Iago Mosqueira (WMR)","code":""},{"path":"/reference/compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods to compute quantities — compute","title":"Methods to compute quantities — compute","text":"Methods compute total quant-aggregated catch, landings, discards stock biomass age length-structured numbers mean weights. Methods compute total quant-aggregated catch, landings, discards stock biomass age length-structured numbers mean weights.","code":""},{"path":"/reference/compute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods to compute quantities — compute","text":"","code":"computeLandings(object, ...)  computeDiscards(object, ...)  computeCatch(object, ...)  computeStock(object, ...)  computeHarvest(object, catch, ...)  computeLandings(object, ...)  computeDiscards(object, ...)  computeCatch(object, ...)  computeStock(object, ...)  # S4 method for FLS computeLandings(object, na.rm = TRUE)  # S4 method for FLS computeDiscards(object, na.rm = TRUE)  # S4 method for FLS computeCatch(object, slot = \"catch\", na.rm = TRUE)  # S4 method for FLS computeStock(object, na.rm = TRUE)"},{"path":"/reference/compute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods to compute quantities — compute","text":"methods compute total catch, landings, discards stock biomass quant-structured values numbers weight per individual. calculation landings, discards stock involves product landings/discards/stock numbers (landings.n, discards.n stock.n) individual weight--quant (landings.wt, discards.wt stock.wt), $$L=L_n * L_{wt}$$ selecting slot=\"catch\", computeCatch can calculate way total catch catch--quant weight catch. two values (slots catch.n catch.wt) can also calculated (landings discards) specifying slot=\"n\" slot=\"wt\" respectively. Calling computeCatch option slot=\"\" carry three calculations. case, returned object class FLQuants, element names catch, catch.n catch.wt, can passed directly catch<- replacement method. methods compute total catch, landings, discards stock biomass quant-structured values numbers weight per individual. calculation landings, discards stock involves product landings/discards/stock numbers (landings.n, discards.n stock.n) individual weight--quant (landings.wt, discards.wt stock.wt), $$L=L_n * L_{wt}$$ selecting slot=\"catch\", computeCatch can calculate way total catch catch--quant weight catch. two values (slots catch.n catch.wt) can also calculated (landings discards) specifying slot=\"n\" slot=\"wt\" respectively. Calling computeCatch option slot=\"\" carry three calculations. case, returned object class FLQuants, element names catch, catch.n catch.wt, can passed directly catch<- replacement method.","code":""},{"path":"/reference/compute.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Methods to compute quantities — compute","text":"computeCatch(object, ...) computeLandings(object, ...) computeDiscards(object, ...) computeStock(object, ...) computeCatch(object, ...) computeLandings(object, ...) computeDiscards(object, ...) computeStock(object, ...)","code":""},{"path":[]},{"path":"/reference/compute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods to compute quantities — compute","text":"FLR Team","code":""},{"path":"/reference/compute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods to compute quantities — compute","text":"","code":"data(ple4) summary(computeLandings(ple4)) #> An object of class \"FLQuant\" with: #> dim  :  1 61 1 1 1 1  #> quant:  age  #> units:  t  #>  #> Min    :  59712.83  #> 1st Qu.:  82874.98  #> Mean   :  108795.2  #> Median :  103161.8  #> 3rd Qu.:  130443  #> Max    :  187666.1  #> NAs    :  0 % summary(computeCatch(ple4, slot=\"all\")) #> An object of class \"FLQuants\" #>  #> Elements: catch.wt catch.n catch landings discards  #>  #> Name: catch.wt  #> \tdim  :  10 61 1 1 1 1  #> \tquant:  age  #> \tunits:  kg  #>  #> \tMin    :  0.02500463  #> \t1st Qu.:  0.2190491  #> \tMean   :  0.4378413  #> \tMedian :  0.4175921  #> \t3rd Qu.:  0.6279721  #> \tMax    :  1.126954  #> \tNAs    :  0 % #> Name: catch.n  #> \tdim  :  10 61 1 1 1 1  #> \tquant:  age  #> \tunits:  1000  #>  #> \tMin    :  541.6833  #> \t1st Qu.:  7740.584  #> \tMean   :  79380  #> \tMedian :  32437.93  #> \t3rd Qu.:  114974.9  #> \tMax    :  1083226  #> \tNAs    :  0 % #> Name: catch  #> \tdim  :  1 61 1 1 1 1  #> \tquant:  age  #> \tunits:  t  #>  #> \tMin    :  78360.36  #> \t1st Qu.:  131216.1  #> \tMean   :  160583.9  #> \tMedian :  149389.9  #> \t3rd Qu.:  175881.4  #> \tMax    :  315244.7  #> \tNAs    :  0 % #> Name: landings  #> \tdim  :  1 61 1 1 1 1  #> \tquant:  age  #> \tunits:  t  #>  #> \tMin    :  59712.83  #> \t1st Qu.:  82874.98  #> \tMean   :  108795.2  #> \tMedian :  103161.8  #> \t3rd Qu.:  130443  #> \tMax    :  187666.1  #> \tNAs    :  0 % #> Name: discards  #> \tdim  :  1 61 1 1 1 1  #> \tquant:  age  #> \tunits:  t  #>  #> \tMin    :  7434.188  #> \t1st Qu.:  35985.66  #> \tMean   :  51788.75  #> \tMedian :  46770.16  #> \t3rd Qu.:  61510.89  #> \tMax    :  153474.4  #> \tNAs    :  0 % stock(ple4) <- computeStock(ple4) landings(ple4) <- computeLandings(ple4) catch.n(ple4) <- computeCatch(ple4, slot=\"n\") catch(ple4) <- computeCatch(ple4, slot=\"all\")   data(ple4) summary(computeLandings(ple4)) #> An object of class \"FLQuant\" with: #> dim  :  1 61 1 1 1 1  #> quant:  age  #> units:  t  #>  #> Min    :  59712.83  #> 1st Qu.:  82874.98  #> Mean   :  108795.2  #> Median :  103161.8  #> 3rd Qu.:  130443  #> Max    :  187666.1  #> NAs    :  0 % summary(computeCatch(ple4, slot=\"all\")) #> An object of class \"FLQuants\" #>  #> Elements: catch.wt catch.n catch landings discards  #>  #> Name: catch.wt  #> \tdim  :  10 61 1 1 1 1  #> \tquant:  age  #> \tunits:  kg  #>  #> \tMin    :  0.02500463  #> \t1st Qu.:  0.2190491  #> \tMean   :  0.4378413  #> \tMedian :  0.4175921  #> \t3rd Qu.:  0.6279721  #> \tMax    :  1.126954  #> \tNAs    :  0 % #> Name: catch.n  #> \tdim  :  10 61 1 1 1 1  #> \tquant:  age  #> \tunits:  1000  #>  #> \tMin    :  541.6833  #> \t1st Qu.:  7740.584  #> \tMean   :  79380  #> \tMedian :  32437.93  #> \t3rd Qu.:  114974.9  #> \tMax    :  1083226  #> \tNAs    :  0 % #> Name: catch  #> \tdim  :  1 61 1 1 1 1  #> \tquant:  age  #> \tunits:  t  #>  #> \tMin    :  78360.36  #> \t1st Qu.:  131216.1  #> \tMean   :  160583.9  #> \tMedian :  149389.9  #> \t3rd Qu.:  175881.4  #> \tMax    :  315244.7  #> \tNAs    :  0 % #> Name: landings  #> \tdim  :  1 61 1 1 1 1  #> \tquant:  age  #> \tunits:  t  #>  #> \tMin    :  59712.83  #> \t1st Qu.:  82874.98  #> \tMean   :  108795.2  #> \tMedian :  103161.8  #> \t3rd Qu.:  130443  #> \tMax    :  187666.1  #> \tNAs    :  0 % #> Name: discards  #> \tdim  :  1 61 1 1 1 1  #> \tquant:  age  #> \tunits:  t  #>  #> \tMin    :  7434.188  #> \t1st Qu.:  35985.66  #> \tMean   :  51788.75  #> \tMedian :  46770.16  #> \t3rd Qu.:  61510.89  #> \tMax    :  153474.4  #> \tNAs    :  0 % stock(ple4) <- computeStock(ple4) landings(ple4) <- computeLandings(ple4) catch.n(ple4) <- computeCatch(ple4, slot=\"n\") catch(ple4) <- computeCatch(ple4, slot=\"all\")"},{"path":"/reference/computeHarvest-FLStock-missing-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes fishing mortality from abundances, catches and natural mortality — computeHarvest,FLStock,missing-method","title":"Computes fishing mortality from abundances, catches and natural mortality — computeHarvest,FLStock,missing-method","text":"Objects class 'FLStock' already contain 'harvest' slot store estimates fishing mortality age, example obtained stock assessment method. Fishing mortality age can recalculated using two methods:","code":""},{"path":"/reference/computeHarvest-FLStock-missing-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes fishing mortality from abundances, catches and natural mortality — computeHarvest,FLStock,missing-method","text":"","code":"# S4 method for FLStock,missing computeHarvest(object, units = NULL)"},{"path":"/reference/computeHarvest-FLStock-missing-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes fishing mortality from abundances, catches and natural mortality — computeHarvest,FLStock,missing-method","text":"units Harvest computed 'f' 'hr', 'character'. x object class 'FLStock'.","code":""},{"path":"/reference/computeHarvest-FLStock-missing-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes fishing mortality from abundances, catches and natural mortality — computeHarvest,FLStock,missing-method","text":"'FLQuant' calculated fishing mortalities age.","code":""},{"path":[]},{"path":"/reference/computeHarvest-FLStock-missing-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes fishing mortality from abundances, catches and natural mortality — computeHarvest,FLStock,missing-method","text":"FLR Team","code":""},{"path":"/reference/computeHarvest-FLStock-missing-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes fishing mortality from abundances, catches and natural mortality — computeHarvest,FLStock,missing-method","text":"","code":"data(ple4) # Compute 'f' from stock.n and Baranov computeHarvest(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957     1958     1959     1960     1961     1962     1963     1964     #>   1  0.098696 0.113655 0.127831 0.137078 0.135619 0.119030 0.093652 0.074619 #>   2  0.170860 0.212229 0.248867 0.261595 0.254858 0.254017 0.269949 0.279385 #>   3  0.261508 0.310083 0.349745 0.359107 0.351684 0.368906 0.430976 0.488987 #>   4  0.308818 0.328890 0.344621 0.350245 0.350724 0.359672 0.383261 0.407410 #>   5  0.256277 0.292325 0.324286 0.341170 0.345691 0.353379 0.372770 0.392895 #>   6  0.210937 0.249757 0.286689 0.310303 0.322992 0.341965 0.375679 0.402185 #>   7  0.225399 0.226090 0.230368 0.241952 0.261635 0.287424 0.313677 0.326105 #>   8  0.227728 0.222745 0.218582 0.216062 0.218563 0.231906 0.256586 0.274748 #>   9  0.198669 0.232773 0.250974 0.231472 0.197441 0.189074 0.220349 0.261486 #>   10 0.198669 0.232773 0.250974 0.231471 0.197442 0.189073 0.220349 0.261487 #>     year #> age  1965     1966     1967     1968     1969     1970     1971     1972     #>   1  0.068247 0.074649 0.097740 0.141560 0.188985 0.203711 0.194942 0.191629 #>   2  0.258530 0.232696 0.238288 0.282344 0.328126 0.330045 0.312624 0.317174 #>   3  0.471278 0.411085 0.376828 0.381701 0.394800 0.392442 0.393086 0.424563 #>   4  0.414043 0.401951 0.379530 0.357032 0.345434 0.353134 0.383654 0.441707 #>   5  0.399617 0.393143 0.381217 0.369535 0.361015 0.359615 0.375481 0.421999 #>   6  0.395060 0.371453 0.364474 0.379986 0.392064 0.380975 0.370258 0.390000 #>   7  0.312587 0.292008 0.291729 0.316707 0.343419 0.348637 0.345004 0.354099 #>   8  0.266111 0.245774 0.240397 0.257263 0.283156 0.303847 0.319482 0.335261 #>   9  0.263264 0.235461 0.216581 0.219652 0.238188 0.266625 0.300163 0.332087 #>   10 0.263264 0.235460 0.216580 0.219653 0.238187 0.266625 0.300162 0.332087 #>     year #> age  1973     1974     1975     1976     1977     1978     1979     1980     #>   1  0.205132 0.236980 0.287479 0.343452 0.378569 0.371271 0.317150 0.250645 #>   2  0.347656 0.378663 0.391165 0.399392 0.421608 0.453083 0.475313 0.477547 #>   3  0.479328 0.508316 0.483150 0.450941 0.455427 0.498638 0.568079 0.640995 #>   4  0.511602 0.545058 0.516128 0.475855 0.469928 0.497604 0.542238 0.588189 #>   5  0.486283 0.516671 0.486131 0.452109 0.464093 0.506873 0.532517 0.521353 #>   6  0.432926 0.453226 0.427975 0.406338 0.431869 0.486138 0.510963 0.481921 #>   7  0.374916 0.386738 0.379070 0.371093 0.381877 0.407373 0.431628 0.439597 #>   8  0.350919 0.360848 0.361454 0.355224 0.346311 0.342764 0.354070 0.376674 #>   9  0.356453 0.369329 0.368139 0.352942 0.326880 0.303054 0.295224 0.305917 #>   10 0.356453 0.369329 0.368141 0.352940 0.326881 0.303052 0.295224 0.305917 #>     year #> age  1981     1982     1983     1984     1985     1986     1987     1988     #>   1  0.216391 0.229812 0.271866 0.309123 0.319849 0.306281 0.278349 0.249823 #>   2  0.464453 0.444017 0.428053 0.427278 0.441640 0.463239 0.481830 0.483091 #>   3  0.674706 0.639065 0.579626 0.546989 0.551965 0.586401 0.636905 0.667563 #>   4  0.620796 0.628275 0.619294 0.608230 0.605010 0.616454 0.641397 0.658018 #>   5  0.504234 0.507116 0.529749 0.566537 0.608772 0.643019 0.660706 0.670546 #>   6  0.438648 0.413737 0.418743 0.464802 0.545203 0.622353 0.659392 0.670442 #>   7  0.422074 0.382651 0.355653 0.372716 0.434698 0.512406 0.567201 0.579178 #>   8  0.386131 0.365000 0.337902 0.332633 0.356243 0.405640 0.469107 0.501606 #>   9  0.325586 0.343118 0.347356 0.329970 0.310995 0.326655 0.393461 0.458384 #>   10 0.325585 0.343119 0.347357 0.329970 0.310994 0.326654 0.393461 0.458382 #>     year #> age  1989     1990     1991     1992     1993     1994     1995     1996     #>   1  0.230220 0.221603 0.224258 0.230886 0.222410 0.189699 0.154108 0.131976 #>   2  0.457477 0.427437 0.422848 0.442742 0.447224 0.411239 0.382384 0.410460 #>   3  0.643112 0.596192 0.579936 0.602850 0.623988 0.614721 0.624873 0.724041 #>   4  0.644495 0.614942 0.596701 0.598872 0.611082 0.625921 0.652635 0.705040 #>   5  0.682723 0.691971 0.685888 0.665472 0.648105 0.647057 0.660896 0.685226 #>   6  0.680934 0.696959 0.715089 0.727515 0.720854 0.691232 0.669102 0.686874 #>   7  0.545822 0.514294 0.542302 0.637137 0.713090 0.679786 0.614871 0.613407 #>   8  0.460495 0.409336 0.431390 0.545003 0.650553 0.615654 0.532264 0.516365 #>   9  0.439977 0.389607 0.400775 0.492909 0.573663 0.531338 0.450409 0.428515 #>   10 0.439977 0.389606 0.400777 0.492910 0.573666 0.531336 0.450410 0.428513 #>     year #> age  1997     1998     1999     2000     2001     2002     2003     2004     #>   1  0.125026 0.131930 0.151195 0.171114 0.175727 0.174377 0.189527 0.223014 #>   2  0.475231 0.475549 0.381641 0.318986 0.357831 0.468479 0.524812 0.459320 #>   3  0.874024 0.868845 0.660994 0.517475 0.555246 0.700429 0.736417 0.590803 #>   4  0.767531 0.790954 0.749595 0.685451 0.636277 0.595875 0.545654 0.481330 #>   5  0.716009 0.748897 0.771661 0.755416 0.681218 0.582680 0.499483 0.434080 #>   6  0.729205 0.737348 0.686300 0.634737 0.627462 0.622126 0.547496 0.419329 #>   7  0.652392 0.620671 0.498882 0.420051 0.453605 0.533703 0.496658 0.343164 #>   8  0.547981 0.519383 0.406295 0.322806 0.318828 0.345727 0.315665 0.227106 #>   9  0.455254 0.457637 0.394177 0.308424 0.236415 0.185623 0.153697 0.130443 #>   10 0.455254 0.457640 0.394177 0.308423 0.236415 0.185623 0.153697 0.130443 #>     year #> age  2005     2006     2007     2008     2009     2010     2011     2012     #>   1  0.234923 0.195922 0.156976 0.155265 0.175660 0.163938 0.112876 0.084087 #>   2  0.381723 0.352444 0.336460 0.294405 0.238028 0.197880 0.181639 0.181566 #>   3  0.462151 0.426700 0.414645 0.355209 0.276267 0.235432 0.241384 0.262381 #>   4  0.411629 0.345695 0.294610 0.264044 0.249756 0.244102 0.242290 0.242458 #>   5  0.365556 0.290005 0.228910 0.193259 0.179128 0.180558 0.192698 0.204348 #>   6  0.313226 0.250081 0.206478 0.166349 0.135483 0.124151 0.132750 0.146164 #>   7  0.231007 0.188469 0.171186 0.148677 0.120566 0.098392 0.085709 0.081155 #>   8  0.156172 0.120847 0.102540 0.088897 0.076015 0.063627 0.053123 0.047775 #>   9  0.102324 0.069712 0.046624 0.035908 0.032590 0.032114 0.032229 0.032344 #>   10 0.102323 0.069712 0.046624 0.035908 0.032589 0.032114 0.032229 0.032344 #>     year #> age  2013     2014     2015     2016     2017     #>   1  0.098083 0.143330 0.162239 0.118466 0.068584 #>   2  0.192068 0.203952 0.204230 0.189177 0.168229 #>   3  0.263956 0.249430 0.240134 0.243971 0.255143 #>   4  0.243169 0.243014 0.240645 0.235880 0.229989 #>   5  0.203254 0.193879 0.187777 0.189212 0.194754 #>   6  0.146120 0.136550 0.131415 0.135675 0.145438 #>   7  0.083924 0.089945 0.092490 0.088653 0.081858 #>   8  0.049398 0.054375 0.055463 0.049762 0.041712 #>   9  0.032053 0.030857 0.028350 0.024854 0.021267 #>   10 0.032053 0.030857 0.028350 0.024854 0.021267 #>  #> units:  f  # Recomputes all F at age by solving catch Baranov recomputeHarvest(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957     1958     1959     1960     1961     1962     1963     1964     #>   1  0.098696 0.113654 0.127831 0.137077 0.135620 0.119031 0.093654 0.074617 #>   2  0.170865 0.212230 0.248869 0.261595 0.254859 0.254019 0.269948 0.279385 #>   3  0.261510 0.310081 0.349748 0.359114 0.351689 0.368920 0.430972 0.488987 #>   4  0.308814 0.328892 0.344626 0.350254 0.350732 0.359683 0.383249 0.407404 #>   5  0.256286 0.292328 0.324283 0.341173 0.345694 0.353381 0.372761 0.392885 #>   6  0.210941 0.249751 0.286689 0.310303 0.322991 0.341968 0.375670 0.402172 #>   7  0.225402 0.226093 0.230370 0.241952 0.261636 0.287425 0.313678 0.326106 #>   8  0.227730 0.222746 0.218581 0.216065 0.218564 0.231908 0.256588 0.274751 #>   9  0.198669 0.232773 0.250974 0.231472 0.197441 0.189074 0.220349 0.261486 #>   10 0.198669 0.232773 0.250974 0.231471 0.197442 0.189073 0.220349 0.261487 #>     year #> age  1965     1966     1967     1968     1969     1970     1971     1972     #>   1  0.068247 0.074649 0.097739 0.141559 0.188990 0.203713 0.194943 0.191621 #>   2  0.258531 0.232698 0.238291 0.282344 0.328127 0.330046 0.312624 0.317175 #>   3  0.471276 0.411084 0.376814 0.381689 0.394792 0.392436 0.393082 0.424562 #>   4  0.414037 0.401945 0.379520 0.357042 0.345439 0.353141 0.383641 0.441699 #>   5  0.399608 0.393135 0.381204 0.369548 0.361024 0.359625 0.375473 0.421997 #>   6  0.395058 0.371449 0.364484 0.379978 0.392054 0.380965 0.370270 0.389992 #>   7  0.312589 0.292007 0.291729 0.316706 0.343422 0.348644 0.345008 0.354106 #>   8  0.266110 0.245774 0.240398 0.257262 0.283156 0.303847 0.319480 0.335261 #>   9  0.263264 0.235461 0.216581 0.219652 0.238188 0.266625 0.300163 0.332087 #>   10 0.263264 0.235460 0.216580 0.219653 0.238187 0.266625 0.300162 0.332087 #>     year #> age  1973     1974     1975     1976     1977     1978     1979     1980     #>   1  0.205136 0.236977 0.287478 0.343453 0.378565 0.371259 0.317151 0.250648 #>   2  0.347660 0.378653 0.391158 0.399388 0.421605 0.453083 0.475313 0.477547 #>   3  0.479325 0.508315 0.483149 0.450938 0.455424 0.498640 0.568083 0.640980 #>   4  0.511604 0.545062 0.516128 0.475859 0.469931 0.497601 0.542233 0.588189 #>   5  0.486286 0.516664 0.486128 0.452108 0.464090 0.506867 0.532523 0.521353 #>   6  0.432925 0.453227 0.427973 0.406337 0.431863 0.486134 0.510963 0.481921 #>   7  0.374905 0.386728 0.379061 0.371085 0.381868 0.407373 0.431629 0.439596 #>   8  0.350924 0.360860 0.361462 0.355232 0.346310 0.342761 0.354073 0.376663 #>   9  0.356453 0.369329 0.368139 0.352942 0.326880 0.303054 0.295224 0.305917 #>   10 0.356453 0.369329 0.368141 0.352940 0.326881 0.303052 0.295224 0.305917 #>     year #> age  1981     1982     1983     1984     1985     1986     1987     1988     #>   1  0.216394 0.229811 0.271864 0.309120 0.319854 0.306280 0.278345 0.249823 #>   2  0.464454 0.444014 0.428054 0.427277 0.441640 0.463235 0.481828 0.483094 #>   3  0.674726 0.639052 0.579631 0.546988 0.551966 0.586399 0.636889 0.667582 #>   4  0.620786 0.628256 0.619281 0.608226 0.605009 0.616444 0.641385 0.658038 #>   5  0.504235 0.507115 0.529749 0.566534 0.608759 0.643005 0.660729 0.670558 #>   6  0.438645 0.413733 0.418740 0.464803 0.545202 0.622346 0.659400 0.670456 #>   7  0.422071 0.382644 0.355659 0.372709 0.434695 0.512406 0.567199 0.579179 #>   8  0.386125 0.365012 0.337900 0.332631 0.356248 0.405632 0.469109 0.501606 #>   9  0.325586 0.343118 0.347356 0.329970 0.310995 0.326655 0.393461 0.458384 #>   10 0.325585 0.343119 0.347357 0.329970 0.310994 0.326654 0.393461 0.458382 #>     year #> age  1989     1990     1991     1992     1993     1994     1995     1996     #>   1  0.230222 0.221606 0.224259 0.230888 0.222413 0.189693 0.154108 0.131976 #>   2  0.457473 0.427433 0.422846 0.442741 0.447222 0.411234 0.382374 0.410455 #>   3  0.643095 0.596192 0.579939 0.602845 0.623972 0.614710 0.624859 0.724052 #>   4  0.644476 0.614935 0.596703 0.598868 0.611077 0.625912 0.652659 0.705050 #>   5  0.682736 0.691986 0.685901 0.665483 0.648091 0.647042 0.660911 0.685237 #>   6  0.680945 0.696970 0.715092 0.727520 0.720861 0.691244 0.669120 0.686890 #>   7  0.545824 0.514295 0.542299 0.637120 0.713097 0.679797 0.614855 0.613400 #>   8  0.460488 0.409329 0.431385 0.545003 0.650577 0.615649 0.532269 0.516370 #>   9  0.439977 0.389607 0.400775 0.492909 0.573663 0.531338 0.450409 0.428515 #>   10 0.439977 0.389606 0.400777 0.492910 0.573666 0.531336 0.450410 0.428513 #>     year #> age  1997     1998     1999     2000     2001     2002     2003     2004     #>   1  0.125023 0.131929 0.151196 0.171117 0.175730 0.174378 0.189520 0.223014 #>   2  0.475230 0.475551 0.381633 0.318986 0.357839 0.468477 0.524814 0.459319 #>   3  0.874023 0.868849 0.661009 0.517475 0.555243 0.700436 0.736424 0.590802 #>   4  0.767544 0.790941 0.749605 0.685465 0.636265 0.595878 0.545656 0.481328 #>   5  0.716016 0.748908 0.771681 0.755433 0.681236 0.582680 0.499483 0.434078 #>   6  0.729204 0.737362 0.686316 0.634718 0.627448 0.622111 0.547498 0.419325 #>   7  0.652410 0.620663 0.498880 0.420048 0.453609 0.533699 0.496658 0.343165 #>   8  0.547980 0.519382 0.406290 0.322807 0.318829 0.345731 0.315665 0.227107 #>   9  0.455254 0.457637 0.394177 0.308424 0.236415 0.185623 0.153697 0.130443 #>   10 0.455254 0.457640 0.394177 0.308423 0.236415 0.185623 0.153697 0.130443 #>     year #> age  2005     2006     2007     2008     2009     2010     2011     2012     #>   1  0.234924 0.195926 0.156976 0.155261 0.175660 0.163938 0.112874 0.084084 #>   2  0.381715 0.352452 0.336460 0.294403 0.238031 0.197883 0.181645 0.181574 #>   3  0.462154 0.426697 0.414639 0.355217 0.276266 0.235433 0.241386 0.262383 #>   4  0.411627 0.345698 0.294612 0.264045 0.249755 0.244103 0.242291 0.242460 #>   5  0.365564 0.290004 0.228912 0.193249 0.179127 0.180564 0.192695 0.204349 #>   6  0.313227 0.250085 0.206478 0.166350 0.135489 0.124155 0.132748 0.146160 #>   7  0.231008 0.188474 0.171188 0.148677 0.120566 0.098387 0.085708 0.081156 #>   8  0.156172 0.120844 0.102538 0.088894 0.076016 0.063627 0.053125 0.047775 #>   9  0.102324 0.069712 0.046624 0.035908 0.032590 0.032114 0.032229 0.032344 #>   10 0.102323 0.069712 0.046624 0.035908 0.032589 0.032114 0.032229 0.032344 #>     year #> age  2013     2014     2015     2016     2017     #>   1  0.098081 0.143336 0.162238 0.118467 0.068584 #>   2  0.192062 0.203953 0.204229 0.189184 0.168229 #>   3  0.263958 0.249434 0.240136 0.243971 0.255143 #>   4  0.243170 0.243017 0.240647 0.235882 0.229989 #>   5  0.203257 0.193882 0.187781 0.189218 0.194754 #>   6  0.146122 0.136549 0.131416 0.135678 0.145438 #>   7  0.083927 0.089943 0.092493 0.088650 0.081858 #>   8  0.049397 0.054371 0.055460 0.049757 0.041712 #>   9  0.032053 0.030857 0.028350 0.024854 0.021267 #>   10 0.032053 0.030857 0.028350 0.024854 0.021267 #>  #> units:  f"},{"path":"/reference/cpue.html","id":null,"dir":"Reference","previous_headings":"","what":"cpue, a method to generate an observation of a CPUE index of abundance — cpue","title":"cpue, a method to generate an observation of a CPUE index of abundance — cpue","text":"observation stock abundance CPUE series commercial fleets important step generation management advice needs replicated Operating Model simulation exercise. method gemnerates observation biomass numbers--age FLstock used OM.","code":""},{"path":"/reference/cpue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cpue, a method to generate an observation of a CPUE index of abundance — cpue","text":"","code":"cpue(object, index, ...)  # S4 method for FLStock,missing cpue(   object,   sel.pattern = harvest(object),   effort = units(harvest(object)),   biomass = TRUE )"},{"path":"/reference/cpue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cpue, a method to generate an observation of a CPUE index of abundance — cpue","text":"object object generate observation. effort Units index use mimic effort series fishery, \"f\" \"hr\" sel selectivity survey, defaults 1 ages. mass index weight age?","code":""},{"path":"/reference/cpue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cpue, a method to generate an observation of a CPUE index of abundance — cpue","text":"FLQuant index abundance, age-disaggregated","code":""},{"path":[]},{"path":"/reference/cpue.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cpue, a method to generate an observation of a CPUE index of abundance — cpue","text":"Laurie Kell & Iago Mosqueira, FLR Team.","code":""},{"path":"/reference/cpue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cpue, a method to generate an observation of a CPUE index of abundance — cpue","text":"","code":"data(ple4)  cpue(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all  78051  83671  94547 105473 107196 114773 131736 135215 136997 160535 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 149615 142493 138212 127121 132826 141951 140378 140683 152634 170196 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 158271 167408 160092 175025 179501 184034 198791 215973 229085 242239 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 274837 303250 276689 238235 205251 181311 173349 146356 122400 120744 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 141943 153857 164072 142703 118790 134722 148192 143316 110487 114377 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 106431 118495 120210 121111 115815 128030 135992 133361 129688 121409 #>      year #> age   2017   #>   all 108121 #>  #> units:  t  # Am aggregated biomass CPUE quantSums(cpue(ple4)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all  78051  83671  94547 105473 107196 114773 131736 135215 136997 160535 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 149615 142493 138212 127121 132826 141951 140378 140683 152634 170196 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 158271 167408 160092 175025 179501 184034 198791 215973 229085 242239 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 274837 303250 276689 238235 205251 181311 173349 146356 122400 120744 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 141943 153857 164072 142703 118790 134722 148192 143316 110487 114377 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 106431 118495 120210 121111 115815 128030 135992 133361 129688 121409 #>      year #> age   2017   #>   all 108121 #>  #> units:  t   if (FALSE) { plot(FLQuants(om=stock(ple4), cpue=quantSums(cpue(ple4)),   hr=quantSums(cpue(ple4, effort=\"hr\")))) }"},{"path":"/reference/createFLAccesors.html","id":null,"dir":"Reference","previous_headings":"","what":"Create accesor methods for a given class — createFLAccesors","title":"Create accesor methods for a given class — createFLAccesors","text":"function creates complete set standard S4 class accessors replacers. intended direct use.","code":""},{"path":"/reference/createFLAccesors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create accesor methods for a given class — createFLAccesors","text":"","code":"createFLAccesors(class, exclude = character(1), include = missing)"},{"path":"/reference/createFLAccesors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create accesor methods for a given class — createFLAccesors","text":"class name class exclude Slot names exclude include Slot names include","code":""},{"path":"/reference/createFLAccesors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create accesor methods for a given class — createFLAccesors","text":"FLR Team","code":""},{"path":"/reference/datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"FLCore datasets — datasets","title":"FLCore datasets — datasets","text":"Example datasets classes defined FLCore.","code":""},{"path":"/reference/datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FLCore datasets — datasets","text":"ple4, FLStockA dataset North Sea (ICES Area IV) plaice. Catch, landings, discards, natural mortality, weight--age maturity, together VPA estimated abundances fishing mortalities. ple4sex, FLStockA dataset North Sea (ICES Area IV) plaice disaggregated sex. Catch, yield, landings, discards, natural mortality, weight--age maturity, together VPA estimated abundances fishing mortalities. ple4.index, FLIndexA dataset North Sea (ICES Area IV) plaice survey catch per unit effort, index index variance. ple4.indices, FLIndicesA dataset three North Sea (ICES Area IV) plaice survey catch per unit effort series. Index index variance. ple4.biol, FLBiolA dataset North Sea plaice population. Numbers, natural mortality, mass fecundity--age. nsher , FLSRStock recruit data fitted relationship autumn spawning North Sea herring. Datasets can loaded issuing data command, like data(ple4).","code":""},{"path":"/reference/datasets.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"FLCore datasets — datasets","text":"ICES.","code":""},{"path":[]},{"path":"/reference/datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FLCore datasets — datasets","text":"","code":"data(ple4) summary(ple4) #> An object of class \"FLStock\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t61\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t1\t10\t10\t1957\t2017\t2\t6\t #>  #> Metrics:  #>   rec: 367450 - 4303680  (1000)  #>   ssb: 203391 - 913290  (t)  #>   catch: 78360 - 315245  (t)  #>   fbar: 0.20 - 0.72  (f)   data(nsher) is(nsher) #> [1] \"FLSR\"    \"FLModel\" \"FLComp\""},{"path":"/reference/dbind-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods for binding objects of array classes along a given dimension — dbind","title":"Methods for binding objects of array classes along a given dimension — dbind","text":"methods can bind two objects array-based classes (e.g. FLQuant), along specified dimension.","code":""},{"path":"/reference/dbind-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods for binding objects of array classes along a given dimension — dbind","text":"","code":"dbind(x, y, ...)  # S4 method for FLArray,FLArray dbind(x, y, ..., dim = 1)  qbind(...)  ybind(...)  ubind(...)  sbind(...)  abind(...)  ibind(...)"},{"path":"/reference/dbind-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Methods for binding objects of array classes along a given dimension — dbind","text":"x First object bind y Second object bind ... objects bind dim Dimension bind , numeric character.","code":""},{"path":"/reference/dbind-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Methods for binding objects of array classes along a given dimension — dbind","text":"object class inputs","code":""},{"path":"/reference/dbind-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods for binding objects of array classes along a given dimension — dbind","text":"objects bind must contain dimmames dimensions used bind, dimnames selected one must differ. See examples correct incorrect uses. Object bound order provided, attempt sort according dimnames chosen dimension. implementation based around single method (dbind), operates along dimension position name indicated dim argument. series shortcut functions call method specific dimensions, names related dimensions name operate (e.g. ybind year).","code":""},{"path":[]},{"path":"/reference/dbind-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods for binding objects of array classes along a given dimension — dbind","text":"Iago Mosqueira (EC JRC)","code":""},{"path":"/reference/dbind-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods for binding objects of array classes along a given dimension — dbind","text":"","code":"# By iter x <- FLQuant(rnorm(80000), dim=c(4,20,1,1,1,1000)) y <- FLQuant(rnorm(80000), dim=c(4,20,1,1,1,1000))   dimnames(y) <- list(iter=1001:2000) ibind(x,y) #> An object of class \"FLQuant\" #> iters:  2000  #>  #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1                  2                  3                  #>     1 -3.7713e-02(0.995) -1.2687e-02(0.973)  1.5154e-02(1.032) #>     2 -1.3224e-02(0.966) -1.0555e-02(0.991) -2.2550e-02(1.025) #>     3  2.1750e-02(0.980)  2.9565e-02(0.962)  4.1459e-02(0.968) #>     4 -2.7687e-03(0.988)  1.7678e-02(1.008)  7.2145e-03(1.012) #>      year #> quant 4                  5                  6                  #>     1 -2.1827e-02(0.976) -1.5798e-03(0.959)  2.1379e-03(0.986) #>     2  8.8087e-03(1.045) -5.8764e-04(0.965) -5.9665e-02(0.963) #>     3 -3.6916e-02(0.948)  8.5833e-03(0.959)  1.8116e-03(1.009) #>     4  1.0848e-02(0.984) -3.1862e-03(0.992) -3.4453e-03(1.000) #>      year #> quant 7                  8                  9                  #>     1  4.6533e-03(1.007) -2.2287e-02(1.022)  1.6809e-02(1.012) #>     2 -3.8107e-03(0.962) -2.3684e-02(0.974) -3.8052e-03(0.976) #>     3 -1.9502e-02(0.991)  2.6237e-03(0.967) -4.0798e-02(0.942) #>     4  7.3690e-03(1.062) -1.6125e-02(1.001) -4.2905e-02(1.006) #>      year #> quant 10                 11                 12                 #>     1  1.8675e-02(1.055) -4.4969e-02(0.985)  1.9186e-02(0.996) #>     2 -7.7795e-03(0.987) -5.8027e-02(1.008)  1.1617e-02(1.012) #>     3  1.5719e-02(1.008)  2.4876e-02(1.011) -7.7333e-03(1.017) #>     4 -5.6523e-04(1.078) -2.0627e-02(1.025) -4.3050e-02(1.036) #>      year #> quant 13                 14                 15                 #>     1  1.0276e-02(1.011) -2.6703e-02(1.029)  1.9256e-02(0.990) #>     2  6.7860e-03(1.017) -2.5926e-02(1.021) -4.5632e-03(1.023) #>     3 -5.3129e-02(1.004)  6.1973e-03(0.963)  6.4984e-02(0.993) #>     4 -3.2984e-02(0.992) -1.4362e-02(0.999)  1.3916e-02(1.006) #>      year #> quant 16                 17                 18                 #>     1  1.8445e-02(0.990)  3.4325e-02(0.993)  8.2225e-03(0.982) #>     2 -2.7584e-02(0.958)  2.8200e-02(1.038) -2.9007e-02(0.954) #>     3  2.9244e-02(1.028) -1.5645e-02(1.007)  1.5251e-02(0.984) #>     4  1.6419e-02(0.983)  1.1332e-03(0.931)  1.8837e-02(0.956) #>      year #> quant 19                 20                 #>     1  1.0350e-02(0.991)  3.4880e-02(1.013) #>     2 -3.0215e-03(1.013) -9.9286e-03(0.995) #>     3  1.2160e-02(0.995) -5.7102e-04(0.987) #>     4  6.6341e-06(1.015) -8.8421e-03(0.961) #>  #> units:  NA   # By quant (age) x <- FLQuant(1, dimnames=list(age=1:3, year=1:10)) y <- FLQuant(2, dimnames=list(age=4:12, year=1:10)) qbind(x, y) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1 2 3 4 5 6 7 8 9 10 #>   1  1 1 1 1 1 1 1 1 1 1  #>   2  1 1 1 1 1 1 1 1 1 1  #>   3  1 1 1 1 1 1 1 1 1 1  #>   4  2 2 2 2 2 2 2 2 2 2  #>   5  2 2 2 2 2 2 2 2 2 2  #>   6  2 2 2 2 2 2 2 2 2 2  #>   7  2 2 2 2 2 2 2 2 2 2  #>   8  2 2 2 2 2 2 2 2 2 2  #>   9  2 2 2 2 2 2 2 2 2 2  #>   10 2 2 2 2 2 2 2 2 2 2  #>   11 2 2 2 2 2 2 2 2 2 2  #>   12 2 2 2 2 2 2 2 2 2 2  #>  #> units:  NA   # By year x <- FLQuant(1, dimnames=list(age=1:3, year=1:10)) y <- FLQuant(2, dimnames=list(age=1:3, year=11:20)) z <- FLQuant(3, dimnames=list(age=1:3, year=21:30)) ybind(x, y, z) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #>   1 1 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  2  3  3  3  3  3  3  3  3  #>   2 1 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  2  3  3  3  3  3  3  3  3  #>   3 1 1 1 1 1 1 1 1 1 1  2  2  2  2  2  2  2  2  2  2  3  3  3  3  3  3  3  3  #>    year #> age 29 30 #>   1 3  3  #>   2 3  3  #>   3 3  3  #>  #> units:  NA   # By season x <- FLQuant(1, dimnames=list(year=1:10, season=1:2)) y <- FLQuant(2, dimnames=list(year=1:10, season=3:4)) sbind(x, y) #> An object of class \"FLQuant\" #> , , unit = unique, season = 1, area = unique #>  #>      year #> quant 1 2 3 4 5 6 7 8 9 10 #>   all 1 1 1 1 1 1 1 1 1 1  #>  #> , , unit = unique, season = 2, area = unique #>  #>      year #> quant 1 2 3 4 5 6 7 8 9 10 #>   all 1 1 1 1 1 1 1 1 1 1  #>  #> , , unit = unique, season = 3, area = unique #>  #>      year #> quant 1 2 3 4 5 6 7 8 9 10 #>   all 2 2 2 2 2 2 2 2 2 2  #>  #> , , unit = unique, season = 4, area = unique #>  #>      year #> quant 1 2 3 4 5 6 7 8 9 10 #>   all 2 2 2 2 2 2 2 2 2 2  #>  #> units:  NA"},{"path":"/reference/dimSummaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Summaries by dimension — dimSummaries","title":"Summaries by dimension — dimSummaries","text":"Methods compute various summary calculations (sum, mean, variance) selected dimensions objects array-based classes (e.g. FLQuant). methods return object dimensions input length one dimension chosen operate along.","code":""},{"path":"/reference/dimSummaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summaries by dimension — dimSummaries","text":"","code":"quantSums(x, ...)  yearSums(x, ...)  unitSums(x, ...)  seasonSums(x, ...)  areaSums(x, ...)  iterSums(x, ...)  dimSums(x, ...)  quantMeans(x, ...)  yearMedians(x, ...)  yearMeans(x, ...)  unitMeans(x, ...)  seasonMeans(x, ...)  areaMeans(x, ...)  iterMeans(x, ...)  dimMeans(x, ...)  quantVars(x, ...)  yearVars(x, ...)  unitVars(x, ...)  seasonVars(x, ...)  areaVars(x, ...)  iterVars(x, ...)  dimVars(x, ...)  iterMedians(x, ...)  iterCVs(x, ...)  iterProb(x, ...)  # S4 method for FLQuant quantSums(x, na.rm = TRUE)  # S4 method for FLQuant yearSums(x, na.rm = TRUE)  # S4 method for FLQuant unitSums(x, na.rm = TRUE)  # S4 method for FLQuant seasonSums(x, na.rm = TRUE)  # S4 method for FLQuant areaSums(x, na.rm = TRUE)  # S4 method for FLQuant iterSums(x, na.rm = TRUE)  # S4 method for FLQuant quantMeans(x, na.rm = TRUE)  # S4 method for FLQuant yearMeans(x, na.rm = TRUE)  # S4 method for FLQuant unitMeans(x, na.rm = TRUE)  # S4 method for FLQuant seasonMeans(x, na.rm = TRUE)  # S4 method for FLQuant areaMeans(x, na.rm = TRUE)  # S4 method for FLQuant iterMeans(x, na.rm = TRUE)  # S4 method for FLQuant yearMedians(x, na.rm = TRUE)  # S4 method for FLQuant iterMedians(x, na.rm = TRUE)  # S4 method for FLQuant quantVars(x, na.rm = TRUE)  # S4 method for FLQuant yearVars(x, na.rm = TRUE)  # S4 method for FLQuant unitVars(x, na.rm = TRUE)  # S4 method for FLQuant seasonVars(x, na.rm = TRUE)  # S4 method for FLQuant areaVars(x, na.rm = TRUE)  # S4 method for FLQuant iterVars(x, na.rm = TRUE)  # S4 method for FLQuant iterCVs(x, na.rm = TRUE)  # S4 method for FLQuant iterProb(x, na.rm = TRUE)  # S4 method for FLQuantDistr yearSums(x, na.rm = TRUE)  # S4 method for FLQuantDistr unitSums(x, na.rm = TRUE)  # S4 method for FLQuantDistr seasonSums(x, na.rm = TRUE)  # S4 method for FLQuantDistr areaSums(x, na.rm = TRUE)  # S4 method for FLQuantDistr yearMeans(x, na.rm = TRUE)  # S4 method for FLQuantDistr unitMeans(x, na.rm = TRUE)  # S4 method for FLQuantDistr seasonMeans(x, na.rm = TRUE)  # S4 method for FLQuantDistr areaMeans(x, na.rm = TRUE)  # S4 method for FLQuantDistr iterMeans(x, na.rm = TRUE)  # S4 method for FLQuantDistr iterMedians(x, na.rm = TRUE)  # S4 method for FLQuantDistr quantVars(x, na.rm = TRUE)  # S4 method for FLQuantDistr yearVars(x, na.rm = TRUE)  # S4 method for FLQuantDistr unitVars(x, na.rm = TRUE)  # S4 method for FLQuantDistr seasonVars(x, na.rm = TRUE)  # S4 method for FLQuantDistr areaVars(x, na.rm = TRUE)  # S4 method for FLQuantDistr iterVars(x, na.rm = TRUE)  # S4 method for FLPar iterMeans(x, na.rm = TRUE)  # S4 method for FLPar iterMedians(x, na.rm = TRUE)  # S4 method for FLPar iterVars(x, na.rm = TRUE)  # S4 method for FLPar iterSums(x, na.rm = TRUE)"},{"path":"/reference/dimSummaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summaries by dimension — dimSummaries","text":"x object. na.rm NAs removed calculation? Defaults TRUE.","code":""},{"path":"/reference/dimSummaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summaries by dimension — dimSummaries","text":"set methods computes three different summaries (sum, mean variance) FLQuant object along six dimensions (quant, year, unit, season, area, iter). Medians CVs can also computed along sixth dimension, iter. methods encapsulate call apply corresponding dimensions function: mean, median, var, sum, iterCVs computed sqrt(iterVars) / iterMeans. contrast R standard behaviour, sum dimension elements NA NA 0. See example . Methods working along iter dimension also defined objects class FLPar. Methods operate first dimension refer quant dimension, regardless actual name used object.","code":""},{"path":"/reference/dimSummaries.html","id":"generic-methods","dir":"Reference","previous_headings":"","what":"Generic methods","title":"Summaries by dimension — dimSummaries","text":"quantSums(x), quantMeans(x), quantVars(x) yearSums(x), yearMeans(x), yearVars(x) unitSums(x), unitMeans(x), unitVars(x) seasonSums(x), seasonMeans(x), seasonVars(x) areaSums(x), areaMeans(x), areaVars(x) iterMeans(x), iterVars(x), iterMedians(x), iterSums(x) dimSums(x), dimMeans(x), dimVars(x)","code":""},{"path":[]},{"path":"/reference/dimSummaries.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summaries by dimension — dimSummaries","text":"FLR Team","code":""},{"path":"/reference/dimSummaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summaries by dimension — dimSummaries","text":"","code":"flq <- FLQuant(rnorm(4000), dim=c(5,10,2,2,2,10), quant='age')  quantSums(flq) #> An object of class \"FLQuant\" #> iters:  10  #>  #> , , unit = 1, season = 1, area = 1 #>  #>      year #> age   1                2                3                4                #>   all -1.476721(2.606) -0.332862(2.154) -0.937370(2.784) -0.680696(2.203) #>      year #> age   5                6                7                8                #>   all -0.403291(2.466) -0.861787(1.673) -0.033123(3.440) -0.067224(1.501) #>      year #> age   9                10               #>   all  1.210317(2.962) -0.827674(4.459) #>  #> , , unit = 2, season = 1, area = 1 #>  #>      year #> age   1                2                3                4                #>   all -0.023503(1.951)  0.947065(1.837)  1.182005(3.496) -0.084561(1.860) #>      year #> age   5                6                7                8                #>   all -0.248202(1.272) -0.790756(1.542)  1.060758(1.878)  1.031011(1.422) #>      year #> age   9                10               #>   all  0.695817(1.449)  1.139104(2.218) #>  #> , , unit = 1, season = 2, area = 1 #>  #>      year #> age   1                2                3                4                #>   all  0.372650(1.176)  0.610384(1.728) -0.381136(0.886)  0.657504(3.222) #>      year #> age   5                6                7                8                #>   all -0.418326(1.998)  0.341671(1.039) -0.908939(3.436)  0.598591(2.562) #>      year #> age   9                10               #>   all -1.080371(2.737)  0.310561(1.415) #>  #> , , unit = 2, season = 2, area = 1 #>  #>      year #> age   1                2                3                4                #>   all  0.808285(0.811)  0.920526(1.725) -0.831073(1.383)  2.157116(1.522) #>      year #> age   5                6                7                8                #>   all  0.949810(2.472)  0.781566(2.603)  0.224637(1.573)  0.496233(1.928) #>      year #> age   9                10               #>   all  0.825861(2.646) -0.238428(1.411) #>  #> , , unit = 1, season = 1, area = 2 #>  #>      year #> age   1                2                3                4                #>   all -0.381693(2.909) -0.095693(3.093) -0.293061(1.217)  0.020456(2.273) #>      year #> age   5                6                7                8                #>   all  0.092717(1.779) -1.124509(2.149) -0.826676(2.574) -0.024669(2.391) #>      year #> age   9                10               #>   all -0.865928(1.438) -0.682361(1.648) #>  #> , , unit = 2, season = 1, area = 2 #>  #>      year #> age   1                2                3                4                #>   all  0.207336(1.704) -1.646678(1.761) -0.534961(2.752)  1.354510(1.630) #>      year #> age   5                6                7                8                #>   all -0.622381(2.338)  1.236903(0.956)  0.386943(2.099)  0.042592(0.881) #>      year #> age   9                10               #>   all  0.298229(2.369)  0.063914(1.290) #>  #> , , unit = 1, season = 2, area = 2 #>  #>      year #> age   1                2                3                4                #>   all  0.187481(2.581)  1.167155(2.387) -0.020265(2.802) -0.415563(1.964) #>      year #> age   5                6                7                8                #>   all -0.301292(2.128)  1.054142(1.602) -0.523299(1.268)  1.267266(1.877) #>      year #> age   9                10               #>   all  1.333761(3.389) -0.508602(1.669) #>  #> , , unit = 2, season = 2, area = 2 #>  #>      year #> age   1                2                3                4                #>   all -0.129244(1.939) -0.713706(3.618) -0.244747(2.467) -0.201415(3.050) #>      year #> age   5                6                7                8                #>   all -0.974318(1.280) -0.073944(1.860) -1.223494(1.422) -0.870046(1.411) #>      year #> age   9                10               #>   all  0.270513(2.377) -0.250027(4.086) #>  #> units:  NA  quantMeans(flq) #> An object of class \"FLQuant\" #> iters:  10  #>  #> , , unit = 1, season = 1, area = 1 #>  #>      year #> age   1                 2                 3                 4                 #>   all -0.2953442(0.521) -0.0665725(0.431) -0.1874740(0.557) -0.1361392(0.441) #>      year #> age   5                 6                 7                 8                 #>   all -0.0806582(0.493) -0.1723574(0.335) -0.0066246(0.688) -0.0134449(0.300) #>      year #> age   9                 10                #>   all  0.2420633(0.592) -0.1655347(0.892) #>  #> , , unit = 2, season = 1, area = 1 #>  #>      year #> age   1                 2                 3                 4                 #>   all -0.0047006(0.390)  0.1894129(0.367)  0.2364010(0.699) -0.0169122(0.372) #>      year #> age   5                 6                 7                 8                 #>   all -0.0496404(0.254) -0.1581513(0.308)  0.2121516(0.376)  0.2062023(0.284) #>      year #> age   9                 10                #>   all  0.1391634(0.290)  0.2278208(0.444) #>  #> , , unit = 1, season = 2, area = 1 #>  #>      year #> age   1                 2                 3                 4                 #>   all  0.0745300(0.235)  0.1220768(0.346) -0.0762271(0.177)  0.1315009(0.644) #>      year #> age   5                 6                 7                 8                 #>   all -0.0836652(0.400)  0.0683342(0.208) -0.1817878(0.687)  0.1197182(0.512) #>      year #> age   9                 10                #>   all -0.2160743(0.547)  0.0621123(0.283) #>  #> , , unit = 2, season = 2, area = 1 #>  #>      year #> age   1                 2                 3                 4                 #>   all  0.1616570(0.162)  0.1841051(0.345) -0.1662147(0.277)  0.4314232(0.304) #>      year #> age   5                 6                 7                 8                 #>   all  0.1899621(0.494)  0.1563132(0.521)  0.0449275(0.315)  0.0992466(0.386) #>      year #> age   9                 10                #>   all  0.1651723(0.529) -0.0476856(0.282) #>  #> , , unit = 1, season = 1, area = 2 #>  #>      year #> age   1                 2                 3                 4                 #>   all -0.0763387(0.582) -0.0191387(0.619) -0.0586123(0.243)  0.0040911(0.455) #>      year #> age   5                 6                 7                 8                 #>   all  0.0185433(0.356) -0.2249018(0.430) -0.1653352(0.515) -0.0049338(0.478) #>      year #> age   9                 10                #>   all -0.1731857(0.288) -0.1364723(0.330) #>  #> , , unit = 2, season = 1, area = 2 #>  #>      year #> age   1                 2                 3                 4                 #>   all  0.0414672(0.341) -0.3293356(0.352) -0.1069922(0.550)  0.2709021(0.326) #>      year #> age   5                 6                 7                 8                 #>   all -0.1244762(0.468)  0.2473806(0.191)  0.0773885(0.420)  0.0085183(0.176) #>      year #> age   9                 10                #>   all  0.0596459(0.474)  0.0127828(0.258) #>  #> , , unit = 1, season = 2, area = 2 #>  #>      year #> age   1                 2                 3                 4                 #>   all  0.0374962(0.516)  0.2334309(0.477) -0.0040530(0.560) -0.0831126(0.393) #>      year #> age   5                 6                 7                 8                 #>   all -0.0602585(0.426)  0.2108285(0.320) -0.1046598(0.254)  0.2534533(0.375) #>      year #> age   9                 10                #>   all  0.2667523(0.678) -0.1017204(0.334) #>  #> , , unit = 2, season = 2, area = 2 #>  #>      year #> age   1                 2                 3                 4                 #>   all -0.0258488(0.388) -0.1427413(0.724) -0.0489494(0.493) -0.0402829(0.610) #>      year #> age   5                 6                 7                 8                 #>   all -0.1948636(0.256) -0.0147889(0.372) -0.2446989(0.284) -0.1740092(0.282) #>      year #> age   9                 10                #>   all  0.0541027(0.475) -0.0500054(0.817) #>  #> units:  NA  yearSums(flq) #> An object of class \"FLQuant\" #> iters:  10  #>  #> , , unit = 1, season = 1, area = 1 #>  #>    year #> age 1                #>   1 -0.453046(2.683) #>   2 -0.858712(2.835) #>   3  1.262139(2.858) #>   4 -0.517698(2.899) #>   5 -2.574219(2.545) #>  #> , , unit = 2, season = 1, area = 1 #>  #>    year #> age 1                #>   1  1.975911(2.332) #>   2 -0.040903(1.468) #>   3  1.329686(2.791) #>   4  1.295434(3.968) #>   5  0.234355(4.839) #>  #> , , unit = 1, season = 2, area = 1 #>  #>    year #> age 1                #>   1  0.524242(2.618) #>   2  0.343936(2.979) #>   3 -1.180131(4.172) #>   4  2.172125(1.202) #>   5  0.315649(2.183) #>  #> , , unit = 2, season = 2, area = 1 #>  #>    year #> age 1                #>   1  0.730413(5.109) #>   2  1.652417(2.416) #>   3  1.704377(2.837) #>   4 -0.429285(1.851) #>   5  1.239743(4.828) #>  #> , , unit = 1, season = 1, area = 2 #>  #>    year #> age 1                #>   1 -0.745577(1.851) #>   2 -1.893032(0.537) #>   3 -1.696050(1.973) #>   4 -0.770141(2.490) #>   5 -0.065305(2.513) #>  #> , , unit = 2, season = 1, area = 2 #>  #>    year #> age 1                #>   1 -0.241152(2.239) #>   2 -1.450671(2.886) #>   3  1.535035(2.570) #>   4  0.572407(3.687) #>   5  0.840019(3.356) #>  #> , , unit = 1, season = 2, area = 2 #>  #>    year #> age 1                #>   1 -0.486389(3.589) #>   2 -0.303532(2.371) #>   3  0.058484(2.619) #>   4  0.208881(0.725) #>   5  3.688478(2.013) #>  #> , , unit = 2, season = 2, area = 2 #>  #>    year #> age 1                #>   1  1.173944(5.532) #>   2 -0.742442(4.742) #>   3 -2.513914(4.532) #>   4 -0.823072(2.642) #>   5 -0.393057(1.958) #>  #> units:  NA  iterMeans(flq) #> An object of class \"FLQuant\" #> , , unit = 1, season = 1, area = 1 #>  #>    year #> age 1           2           3           4           5           6           #>   1 -2.5596e-02 -3.1421e-01  3.5796e-01 -2.8836e-01 -6.0114e-02  2.3703e-01 #>   2  3.0533e-02  4.8929e-03  1.1261e-01  1.9915e-02 -8.9331e-02 -2.7219e-01 #>   3 -2.8597e-01 -3.7785e-01 -3.2963e-01  1.2018e-01  1.2093e-02  1.1868e-01 #>   4 -4.9263e-01  2.8548e-01 -6.4398e-01  4.4132e-01 -1.9207e-01 -4.9117e-01 #>   5 -3.7096e-01  4.2715e-02 -1.5241e-01 -8.5655e-01 -4.2708e-01 -3.4140e-01 #>    year #> age 7           8           9           10          #>   1  7.2284e-02  1.1185e-05  2.0823e-01 -1.5669e-02 #>   2 -1.1729e-02 -6.4483e-01  6.3224e-01 -5.9165e-01 #>   3  2.4731e-01  1.6373e-01  3.7604e-01  3.6644e-01 #>   4  2.7047e-01  3.4008e-01  1.3205e-01 -2.7098e-01 #>   5 -5.5068e-01 -1.4055e-01 -3.5936e-02 -3.8283e-01 #>  #> , , unit = 2, season = 1, area = 1 #>  #>    year #> age 1           2           3           4           5           6           #>   1  3.5992e-02  1.4675e-01  1.5069e-01 -6.4208e-02  7.1639e-01  1.4233e-01 #>   2  4.0199e-01 -5.4621e-01  2.7121e-01  2.2613e-01  6.7918e-02 -3.0330e-01 #>   3 -5.6962e-02  1.2309e-01 -7.2679e-01 -2.5106e-01  6.3318e-01  4.4261e-02 #>   4 -1.8704e-01  3.5762e-01  2.1506e-01  1.4011e-01  8.8054e-02  2.1349e-01 #>   5 -1.3349e-01  4.5189e-01  3.4632e-01  1.7205e-01 -6.0728e-01 -2.4552e-01 #>    year #> age 7           8           9           10          #>   1  7.7198e-02  4.2300e-01 -3.0248e-01  1.8913e-01 #>   2  7.0998e-01  3.1157e-02 -2.8285e-01 -5.2359e-02 #>   3  2.8560e-01  8.4691e-02  5.2627e-01  3.0126e-01 #>   4 -1.5714e-01  6.4096e-01 -4.2187e-01  3.1421e-01 #>   5  2.0758e-01  3.3934e-01 -4.8025e-01 -3.0575e-01 #>  #> , , unit = 1, season = 2, area = 1 #>  #>    year #> age 1           2           3           4           5           6           #>   1  9.5079e-02 -4.4012e-01 -2.3057e-01  3.3224e-01  5.8890e-01  1.3670e-01 #>   2 -4.6010e-02 -1.3690e-01  4.4358e-01  9.3749e-02 -5.9642e-01  2.3588e-01 #>   3 -1.5972e-01 -1.0183e-01 -3.6836e-01  1.0896e-01  6.0380e-02  1.1044e-01 #>   4  8.6189e-02  4.5501e-01 -2.4297e-01  5.5829e-01  2.8685e-02 -3.2634e-02 #>   5  2.7655e-02  3.8286e-01 -2.6931e-01 -3.2403e-01 -6.8363e-01  9.4661e-02 #>    year #> age 7           8           9           10          #>   1  2.6424e-01 -2.1043e-03  8.0877e-02  4.8653e-01 #>   2  3.8072e-02  2.4654e-01 -9.5477e-02 -3.4334e-01 #>   3 -3.4377e-01  2.5481e-01 -8.4467e-02 -7.0995e-01 #>   4  5.0257e-02  3.4136e-01  2.6264e-02  2.6555e-01 #>   5  6.0273e-01  6.0633e-01 -1.7886e-01  2.3726e-01 #>  #> , , unit = 2, season = 2, area = 1 #>  #>    year #> age 1           2           3           4           5           6           #>   1  2.2382e-01  3.6807e-01  3.5981e-01  3.0160e-01  3.0079e-01 -1.1940e-01 #>   2 -1.0586e-01  1.9730e-01 -2.0065e-01  3.2678e-01  1.1712e-01  4.8431e-01 #>   3  6.3326e-02 -5.7304e-01 -2.4050e-01  5.6148e-01  6.2491e-01  4.2937e-01 #>   4 -7.4662e-02  1.4374e-01  4.2017e-01 -1.1848e-01  1.7196e-01  5.0264e-02 #>   5  3.0282e-01  4.5473e-01 -7.1355e-03  1.5270e-01 -2.6724e-02  2.3033e-01 #>    year #> age 7           8           9           10          #>   1 -1.7526e-01 -1.3111e-02  1.8802e-01 -4.3040e-01 #>   2 -1.7377e-01  1.5901e-01  8.0099e-01 -8.3459e-02 #>   3  2.6809e-01  4.2213e-01 -3.0038e-01  3.5395e-02 #>   4  3.7460e-01 -9.0443e-03  1.8614e-01 -4.9214e-01 #>   5 -4.0226e-02  3.2100e-01 -1.9912e-01  5.8885e-02 #>  #> , , unit = 1, season = 1, area = 2 #>  #>    year #> age 1           2           3           4           5           6           #>   1 -1.0150e-01  3.4950e-02 -6.0169e-01 -7.1558e-02 -3.7815e-01 -3.0096e-02 #>   2 -2.6661e-01  1.9786e-01  2.2461e-02  5.8363e-02 -2.7297e-01 -7.5724e-01 #>   3  1.6199e-01  2.6556e-01 -1.1657e-01 -2.1499e-01  1.0515e-01  5.5607e-02 #>   4  2.4270e-01 -6.3726e-01 -3.8011e-01  5.3341e-01  3.1374e-01 -3.2178e-01 #>   5  1.6954e-01 -1.6001e-01  3.5186e-01  6.4553e-02 -3.7849e-03  9.1998e-02 #>    year #> age 7           8           9           10          #>   1  4.4574e-01  4.9337e-01 -7.4821e-02 -3.9503e-01 #>   2  1.9104e-01 -4.2562e-01 -3.9759e-01 -2.9641e-01 #>   3 -7.0967e-01  2.6751e-01  1.4274e-01 -8.7616e-01 #>   4  1.4026e-01  6.9314e-03 -1.6503e-01  5.1654e-02 #>   5 -1.9790e-01 -3.6281e-02 -4.3105e-01 -8.2133e-03 #>  #> , , unit = 2, season = 1, area = 2 #>  #>    year #> age 1           2           3           4           5           6           #>   1 -2.9862e-01 -4.5773e-01 -2.3659e-01  1.4961e-01  3.3329e-01  2.0133e-02 #>   2  3.4917e-01 -3.9025e-01  2.7194e-01 -5.5923e-01 -3.2817e-01 -3.6404e-03 #>   3  1.8983e-01 -3.3218e-01 -9.2659e-02  5.8883e-01 -7.7019e-02  2.9198e-01 #>   4  1.5424e-01 -4.3012e-02 -7.3499e-01  7.0200e-03 -2.2557e-01  1.4796e-01 #>   5 -6.2182e-01  5.8137e-02 -2.9609e-01  9.6969e-01  1.0009e-01  4.7719e-01 #>    year #> age 7           8           9           10          #>   1  2.3571e-01 -1.1497e-01  6.5258e-03  5.5506e-02 #>   2  1.5380e-01  4.7475e-02 -5.8833e-03 -3.2991e-01 #>   3  7.7053e-02  2.9167e-01 -2.4935e-02 -1.6871e-01 #>   4  1.3631e-01  3.3649e-01  2.3468e-01  3.9104e-01 #>   5  2.7294e-01 -5.7290e-01  1.0030e-01  1.3632e-01 #>  #> , , unit = 1, season = 2, area = 2 #>  #>    year #> age 1           2           3           4           5           6           #>   1 -2.1342e-01  7.1789e-01 -2.6289e-01 -5.2887e-01 -2.0141e-01  4.2307e-01 #>   2  2.6695e-02 -6.6024e-02 -1.0870e-01  8.2334e-02 -3.1156e-01  1.6966e-01 #>   3  8.3261e-02 -9.1858e-02 -6.3092e-02  1.6977e-01 -1.5631e-01 -2.8049e-01 #>   4  1.6148e-01  2.7784e-01  1.1408e-01 -1.1857e-01  2.0479e-01  4.9643e-01 #>   5  2.7213e-01  1.1047e-01 -2.1958e-03  3.5385e-01  2.9398e-01  3.9062e-02 #>    year #> age 7           8           9           10          #>   1 -5.2137e-01  1.5284e-01  4.7018e-01 -3.2020e-01 #>   2  2.1607e-01 -1.5912e-01 -3.6545e-01 -4.6965e-01 #>   3  4.7265e-02  2.0275e-01 -1.4381e-01  2.4078e-01 #>   4 -3.2431e-01  4.7721e-01 -9.2953e-02  9.0610e-02 #>   5  2.3515e-01  1.8140e-01  2.0313e-01  2.7131e-01 #>  #> , , unit = 2, season = 2, area = 2 #>  #>    year #> age 1           2           3           4           5           6           #>   1  2.8748e-01  2.5721e-02 -1.0500e-01  1.1833e-01 -4.4675e-01  4.0842e-01 #>   2 -4.3708e-01 -1.5027e-01  2.3270e-01 -1.6205e-01 -1.1660e-01  4.8094e-01 #>   3 -2.9469e-01 -3.9566e-01  1.0014e-01  1.2334e-01 -5.4484e-01 -3.6306e-01 #>   4  2.6355e-01 -4.1417e-02 -2.0809e-01 -2.9005e-01 -4.5380e-02 -4.9284e-01 #>   5  8.1672e-02 -1.2236e-04 -4.5403e-02 -2.1440e-01  5.5582e-02  1.6217e-01 #>    year #> age 7           8           9           10          #>   1 -1.2720e-02 -2.2318e-01  1.4263e-01 -2.1030e-01 #>   2 -3.3004e-01 -1.5000e-01  4.2823e-02  4.8706e-01 #>   3 -2.2328e-01 -2.6071e-01 -1.7482e-01 -5.1463e-01 #>   4 -2.6761e-01 -2.4131e-02  8.0640e-02 -6.6638e-02 #>   5 -3.4958e-01 -1.5941e-01  5.6130e-02  3.9109e-02 #>  #> units:  NA  dim(quantSums(flq)) #> [1]  1 10  2  2  2 10  # NA dims stay as NA when summed along x <- FLQuant(c(NA, NA, NA, rnorm(6)), dim=c(3, 3)) quantSums(x) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       2       3       #>   all      NA 0.40061 0.47592 #>  #> units:  NA  # although in fact a sum of no elements (as na.rm=TRUE) is zero apply(x, 2:6, sum, na.rm=TRUE) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       2       3       #>   all 0.00000 0.40061 0.47592 #>  #> units:  NA"},{"path":"/reference/dims.html","id":null,"dir":"Reference","previous_headings":"","what":"Method dims — dims","title":"Method dims — dims","text":"List information object dimensions List information object dimensions","code":""},{"path":"/reference/dims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method dims — dims","text":"","code":"dims(obj, ...)  dims(obj, ...)  # S4 method for FLQuant dims(obj, element, ...)"},{"path":"/reference/dims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method dims — dims","text":"Method dims returns named list information dimensions dimension names given object. list returned extended future currently contains, depending class object, following: quant Length first dimension min First quant max Last quant year Number years minyear First year series maxyear Last year series cohort Number cohorts mincohort First cohort series maxcohort Last cohort series unit Length third (unit) dimension season Length fourth (season) dimension area Length fifth (area) dimension iter Length sixth (iter) dimension Values returned list class numeric, unless dimnames strings numeric translation, case result NA. Please note name first element returned list changes name first dimension input object. Use quant obtain name extract relevant element result list. Method dims returns named list information dimensions dimension names given object. list returned extended future currently contains, depending class object, following: quant Length first dimension min First quant max Last quant year Number years minyear First year series maxyear Last year series cohort Number cohorts mincohort First cohort series maxcohort Last cohort series unit Length third (unit) dimension season Length fourth (season) dimension area Length fifth (area) dimension iter Length sixth (iter) dimension Values returned list class numeric, unless dimnames strings numeric translation, case result NA. Please note name first element returned list changes name first dimension input object. Use quant obtain name extract relevant element result list.","code":""},{"path":"/reference/dims.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method dims — dims","text":"dims(obj) dims(obj)","code":""},{"path":[]},{"path":"/reference/dims.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method dims — dims","text":"FLR Team","code":""},{"path":"/reference/dims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method dims — dims","text":"","code":"flq <- FLQuant(rnorm(96), dim=c(3,8,1,4), quant='age') dims(flq) #> $age #> [1] 3 #>  #> $min #> [1] 1 #>  #> $max #> [1] 3 #>  #> $year #> [1] 8 #>  #> $minyear #> [1] 1 #>  #> $maxyear #> [1] 8 #>  #> $unit #> [1] 1 #>  #> $season #> [1] 4 #>  #> $area #> [1] 1 #>  #> $iter #> [1] 1 #>   # Number of seasons   dims(flq)$season #> [1] 4  # Length of first dimension   dims(flq)[[quant(flq)]] #> [1] 3"},{"path":"/reference/discardsRatio.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the ratio of discards to total catch in numbers or weight — discardsRatio","title":"Compute the ratio of discards to total catch in numbers or weight — discardsRatio","text":"calculation made proportion discards total catch age, either numbers (value = 'numbers') weight (value = 'weight'), total discards catch biomass (value = 'total').","code":""},{"path":"/reference/discardsRatio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the ratio of discards to total catch in numbers or weight — discardsRatio","text":"","code":"discardsRatio(object, value = c(\"numbers\", \"weight\", \"total\"))"},{"path":"/reference/discardsRatio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the ratio of discards to total catch in numbers or weight — discardsRatio","text":"object object class 'FLStock' value One 'numbers' (default), 'weight' 'total'.","code":""},{"path":"/reference/discardsRatio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the ratio of discards to total catch in numbers or weight — discardsRatio","text":"discards ratio (0 1), 'FLQuant'","code":""},{"path":[]},{"path":"/reference/discardsRatio.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the ratio of discards to total catch in numbers or weight — discardsRatio","text":"FLR Team","code":""},{"path":"/reference/discardsRatio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the ratio of discards to total catch in numbers or weight — discardsRatio","text":"","code":"data(ple4) # Discards ratio at age in numbers discardsRatio(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957       1958       1959       1960       1961       1962       #>   1  9.9998e-01 9.9999e-01 1.0000e+00 9.9999e-01 9.9999e-01 9.9999e-01 #>   2  9.0489e-01 9.0656e-01 8.8309e-01 9.6550e-01 9.8435e-01 9.8868e-01 #>   3  1.2189e-01 5.0045e-01 5.9883e-01 4.1916e-01 7.2412e-01 7.1640e-01 #>   4  1.7985e-02 3.7526e-02 3.0462e-01 1.9052e-02 7.7478e-03 2.5174e-01 #>   5  2.6529e-02 5.5647e-02 1.0139e-01 4.7381e-02 4.6307e-02 1.6254e-02 #>   6  2.5776e-03 3.1337e-03 4.5244e-03 1.8534e-02 9.9702e-03 9.2667e-03 #>   7  4.0821e-05 5.7489e-05 3.5276e-05 3.5012e-05 3.3535e-05 5.7089e-05 #>   8  4.9868e-05 5.8768e-05 7.6364e-05 5.5105e-05 5.0500e-05 5.7247e-05 #>   9  9.0523e-05 7.6944e-05 7.4188e-05 9.7626e-05 8.2095e-05 9.8379e-05 #>   10 4.1460e-05 3.5760e-05 3.0246e-05 3.2778e-05 3.3580e-05 4.0406e-05 #>     year #> age  1963       1964       1965       1966       1967       1968       #>   1  9.9999e-01 9.9999e-01 9.9999e-01 9.9999e-01 9.9998e-01 9.9999e-01 #>   2  9.6853e-01 9.1184e-01 9.7726e-01 9.7478e-01 9.5631e-01 8.8101e-01 #>   3  8.5569e-01 6.1133e-01 5.8271e-01 8.4070e-01 7.3906e-01 5.2525e-01 #>   4  1.1275e-01 3.4152e-01 5.9842e-02 2.1547e-01 5.6975e-01 4.0331e-01 #>   5  3.6722e-02 4.9491e-02 2.0594e-02 3.6203e-02 1.4558e-02 1.4992e-01 #>   6  5.7818e-03 8.5826e-03 8.7453e-03 4.4828e-03 1.1450e-02 3.3056e-03 #>   7  3.8176e-05 3.1371e-05 2.7078e-05 2.9758e-05 3.0309e-05 4.6979e-05 #>   8  7.1777e-05 7.5241e-05 5.8120e-05 4.5530e-05 6.1246e-05 4.8090e-05 #>   9  6.9598e-05 1.2466e-04 1.1799e-04 7.5918e-05 7.2860e-05 1.2375e-04 #>   10 2.9562e-05 2.9389e-05 2.8270e-05 3.2892e-05 4.3869e-05 3.6350e-05 #>     year #> age  1969       1970       1971       1972       1973       1974       #>   1  9.9996e-01 9.9940e-01 9.9971e-01 9.6823e-01 9.9003e-01 9.8920e-01 #>   2  8.0915e-01 9.0049e-01 7.6032e-01 5.9625e-01 5.9905e-01 9.2788e-01 #>   3  2.5938e-01 3.5753e-01 4.5922e-01 3.4642e-01 6.0639e-02 5.9635e-02 #>   4  3.3613e-01 2.2991e-02 7.1814e-02 9.5056e-02 8.6967e-03 6.4941e-03 #>   5  2.0127e-02 1.1322e-01 1.5596e-02 2.3390e-02 2.8225e-02 1.4155e-02 #>   6  1.8408e-02 4.7035e-03 3.4329e-03 4.1874e-03 4.6279e-03 5.3413e-03 #>   7  4.5383e-05 6.5051e-06 2.8617e-05 3.3812e-05 5.3554e-05 6.0234e-05 #>   8  7.7622e-05 8.1300e-05 1.6280e-05 4.4594e-05 4.8317e-05 7.6279e-05 #>   9  5.7670e-05 1.2259e-04 7.5452e-05 2.6162e-05 7.8205e-05 8.6593e-05 #>   10 2.9360e-05 3.4578e-05 2.8622e-05 3.1066e-05 1.9845e-05 2.1939e-05 #>     year #> age  1975       1976       1977       1978       1979       1980       #>   1  9.9576e-01 9.8452e-01 9.8759e-01 9.9516e-01 9.9553e-01 9.9562e-01 #>   2  9.0362e-01 8.0334e-01 6.4505e-01 7.2515e-01 7.8780e-01 6.4965e-01 #>   3  7.4428e-01 4.7157e-01 6.4655e-01 3.1197e-01 3.2670e-01 6.7963e-03 #>   4  1.2645e-01 1.5415e-01 3.3663e-01 1.7057e-01 2.7330e-01 8.6237e-03 #>   5  9.3001e-03 1.2199e-02 1.0002e-01 2.5113e-02 1.2181e-02 7.5168e-03 #>   6  5.4566e-03 4.0696e-03 1.3944e-02 1.6388e-02 7.7286e-03 4.6990e-03 #>   7  3.9638e-05 5.3461e-05 8.4422e-05 8.7282e-05 2.0671e-05 3.5666e-05 #>   8  7.9450e-05 7.6286e-05 9.9381e-05 1.5465e-04 1.2034e-04 5.7994e-05 #>   9  1.1460e-04 1.6541e-04 1.2289e-04 2.1427e-04 1.7836e-04 2.6328e-04 #>   10 2.3896e-05 3.8845e-05 5.4307e-05 6.9426e-05 5.3918e-05 9.0942e-05 #>     year #> age  1981       1982       1983       1984       1985       1986       #>   1  9.9807e-01 9.9186e-01 9.9538e-01 9.9965e-01 9.9970e-01 9.9851e-01 #>   2  6.5153e-01 8.0882e-01 7.8473e-01 8.3154e-01 7.5893e-01 8.8002e-01 #>   3  1.4482e-02 2.1329e-02 2.1032e-01 1.5805e-01 1.9499e-01 2.2616e-01 #>   4  6.2314e-03 1.5351e-02 2.1765e-02 2.8077e-01 1.0898e-02 1.9913e-01 #>   5  1.1630e-02 7.3621e-03 2.6467e-02 3.4721e-02 5.2569e-03 1.4074e-02 #>   6  4.3338e-03 5.7689e-03 5.5629e-03 4.4878e-03 4.5678e-03 5.2102e-03 #>   7  5.0989e-05 6.4892e-05 6.0685e-05 7.3071e-05 6.7183e-05 5.0813e-05 #>   8  6.0269e-05 9.0055e-05 1.1836e-04 8.9381e-05 1.3224e-04 1.0628e-04 #>   9  9.9881e-05 1.1012e-04 1.6589e-04 1.8314e-04 1.7770e-04 1.7637e-04 #>   10 8.2074e-05 5.6970e-05 6.0174e-05 7.6309e-05 8.5752e-05 7.0586e-05 #>     year #> age  1987       1988       1989       1990       1991       1992       #>   1  1.0000e+00 1.0000e+00 9.9415e-01 9.8947e-01 9.9228e-01 9.7617e-01 #>   2  9.4165e-01 9.7561e-01 9.1212e-01 8.9214e-01 8.7504e-01 8.3382e-01 #>   3  6.0447e-01 6.4412e-01 6.4083e-01 6.1679e-01 6.1884e-01 5.2272e-01 #>   4  1.1681e-02 4.1748e-01 2.6469e-01 1.8997e-01 2.4998e-01 2.9657e-01 #>   5  1.6315e-02 1.4507e-02 1.0948e-01 2.8723e-02 6.7748e-02 4.6396e-02 #>   6  5.5421e-03 5.6046e-03 5.3023e-03 5.8924e-03 1.1793e-02 2.2916e-02 #>   7  3.6927e-05 2.5843e-05 4.3082e-05 5.5227e-05 3.2445e-05 1.6423e-05 #>   8  1.0708e-04 8.0653e-05 6.2297e-05 1.0660e-04 9.2742e-05 6.9159e-05 #>   9  2.1302e-04 1.4557e-04 2.1537e-04 1.3143e-04 1.5550e-04 1.5171e-04 #>   10 8.9104e-05 7.8091e-05 8.6105e-05 1.1885e-04 8.8732e-05 7.1668e-05 #>     year #> age  1993       1994       1995       1996       1997       1998       #>   1  9.6576e-01 9.7834e-01 9.3857e-01 9.9018e-01 9.9307e-01 9.9812e-01 #>   2  7.4207e-01 6.8234e-01 6.9221e-01 8.8423e-01 9.2217e-01 9.5480e-01 #>   3  3.2516e-01 2.5220e-01 1.6009e-01 2.8828e-01 6.8608e-01 7.2022e-01 #>   4  1.2892e-01 1.1797e-02 1.0048e-02 6.9087e-02 1.1782e-02 4.6117e-01 #>   5  2.5196e-02 1.6994e-02 1.3659e-02 1.1964e-02 8.4785e-03 1.2884e-02 #>   6  6.1402e-03 5.1932e-03 4.8798e-03 6.0436e-03 5.7769e-03 3.6474e-03 #>   7  3.3908e-05 2.8935e-05 3.3905e-05 4.0320e-05 5.2528e-05 8.7658e-05 #>   8  4.3473e-05 7.5053e-05 9.4583e-05 8.4999e-05 9.9243e-05 1.7416e-04 #>   9  1.3494e-04 9.1743e-05 2.0035e-04 1.7857e-04 1.6369e-04 2.5204e-04 #>   10 8.4977e-05 9.1594e-05 1.2832e-04 1.0020e-04 1.1361e-04 1.4877e-04 #>     year #> age  1999       2000       2001       2002       2003       2004       #>   1  9.9570e-01 9.7545e-01 8.7028e-01 9.9605e-01 9.8978e-01 9.9767e-01 #>   2  9.5997e-01 9.1622e-01 9.0477e-01 9.1832e-01 9.2114e-01 9.3838e-01 #>   3  5.9450e-01 5.5588e-01 7.6106e-01 5.6531e-01 5.2786e-01 5.1778e-01 #>   4  5.3657e-01 2.7418e-01 5.6650e-01 2.0072e-01 2.6895e-01 2.1428e-01 #>   5  8.6876e-03 4.5296e-02 3.4837e-01 6.0209e-02 1.1162e-01 7.6741e-02 #>   6  4.1384e-03 1.8826e-02 1.3096e-02 1.6410e-02 2.0235e-02 3.2739e-02 #>   7  1.2380e-04 8.1263e-02 9.5098e-03 1.6498e-02 2.4100e-01 7.9902e-03 #>   8  1.9038e-04 1.2854e-01 1.2351e-03 6.6435e-04 8.4458e-04 3.1408e-04 #>   9  3.1286e-04 5.2393e-04 7.6822e-04 6.2855e-04 7.2468e-04 1.0842e-03 #>   10 1.5455e-04 2.3562e-04 2.1144e-04 3.0510e-04 5.6782e-04 8.7654e-04 #>     year #> age  2005       2006       2007       2008       2009       2010       #>   1  9.6956e-01 9.9836e-01 9.8185e-01 9.9705e-01 9.8959e-01 9.8752e-01 #>   2  9.4620e-01 9.1821e-01 9.0785e-01 9.5099e-01 9.3959e-01 9.0075e-01 #>   3  6.0973e-01 5.9481e-01 6.3524e-01 4.2033e-01 5.2700e-01 5.5007e-01 #>   4  2.0708e-01 2.2236e-01 1.9949e-01 1.0567e-01 1.8209e-01 2.4629e-01 #>   5  1.8218e-01 4.4350e-02 7.2562e-02 4.9845e-02 7.4644e-02 9.6822e-02 #>   6  3.5531e-01 3.0267e-02 2.4349e-01 4.2579e-02 5.6405e-02 1.2094e-01 #>   7  4.6421e-02 1.1643e-01 5.7974e-02 5.2324e-01 3.9139e-02 1.7520e-01 #>   8  2.3494e-03 7.8296e-02 4.4979e-01 4.7508e-01 4.3050e-01 1.3185e-01 #>   9  2.1699e-04 3.7907e-04 8.2706e-04 6.7963e-04 8.5079e-04 1.9831e-04 #>   10 7.7161e-04 3.5488e-04 3.8333e-04 5.3379e-04 6.0800e-04 3.9426e-04 #>     year #> age  2011       2012       2013       2014       2015       2016       #>   1  9.9656e-01 9.9822e-01 9.9573e-01 9.9997e-01 9.9999e-01 9.9999e-01 #>   2  9.2217e-01 9.8069e-01 9.3708e-01 9.7279e-01 9.8687e-01 9.7181e-01 #>   3  5.8026e-01 6.7139e-01 6.6516e-01 7.4080e-01 7.5404e-01 7.7277e-01 #>   4  3.7399e-01 3.4702e-01 2.4346e-01 4.1503e-01 3.6685e-01 3.6275e-01 #>   5  2.0067e-01 1.7350e-01 9.9575e-02 2.6806e-01 1.7118e-01 2.5690e-01 #>   6  1.6485e-01 4.6077e-02 3.3863e-02 1.0637e-01 6.8273e-02 1.5792e-01 #>   7  2.1144e-02 2.9103e-02 1.4099e-02 3.5620e-02 3.9165e-02 9.7503e-02 #>   8  2.4558e-01 2.1995e-03 3.9032e-03 7.9832e-03 2.2991e-02 1.9414e-01 #>   9  3.9604e-04 1.4357e-04 2.0252e-04 2.0219e-04 1.2329e-04 9.4147e-05 #>   10 1.8220e-04 2.5980e-04 1.3172e-04 1.4529e-04 1.0341e-04 9.7543e-05 #>     year #> age  2017       #>   1  9.9979e-01 #>   2  9.6470e-01 #>   3  7.5773e-01 #>   4  5.0369e-01 #>   5  2.1738e-01 #>   6  1.0986e-01 #>   7  6.9972e-02 #>   8  3.4123e-02 #>   9  1.6293e-04 #>   10 1.5558e-04 #>  #> units:    # Total proportion of discards by year discardsRatio(ple4, value=\"total\") #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957     1958     1959     1960     1961     1962     1963     1964     #>   all 0.094872 0.164761 0.256767 0.247596 0.286714 0.284944 0.267392 0.246844 #>      year #> age   1965     1966     1967     1968     1969     1970     1971     1972     #>   all 0.303709 0.393999 0.327090 0.192228 0.160876 0.181791 0.169413 0.126828 #>      year #> age   1973     1974     1975     1976     1977     1978     1979     1980     #>   all 0.117128 0.270979 0.428883 0.305409 0.345624 0.279514 0.305964 0.184363 #>      year #> age   1981     1982     1983     1984     1985     1986     1987     1988     #>   all 0.179898 0.243039 0.324231 0.287314 0.261857 0.403236 0.497518 0.466706 #>      year #> age   1989     1990     1991     1992     1993     1994     1995     1996     #>   all 0.357385 0.304026 0.322390 0.300470 0.210351 0.165647 0.173023 0.289076 #>      year #> age   1997     1998     1999     2000     2001     2002     2003     2004     #>   all 0.455467 0.566589 0.429636 0.312883 0.480153 0.394062 0.514574 0.410748 #>      year #> age   2005     2006     2007     2008     2009     2010     2011     2012     #>   all 0.463110 0.444317 0.430058 0.430545 0.405011 0.375159 0.378231 0.375856 #>      year #> age   2013     2014     2015     2016     2017     #>   all 0.311454 0.381583 0.337162 0.341689 0.321577 #>  #> units:"},{"path":"/reference/drop-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"drop method for FLCore array-based classes — drop,FLArray-method","title":"drop method for FLCore array-based classes — drop,FLArray-method","text":"Delete dimensions array one level.","code":""},{"path":"/reference/drop-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drop method for FLCore array-based classes — drop,FLArray-method","text":"","code":"# S4 method for FLArray drop(x)"},{"path":"/reference/drop-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"drop method for FLCore array-based classes — drop,FLArray-method","text":"method calls R's base::drop @.Data slot FLArray. Dimensions length one thus dropped, class attribute units slot, array equal less dimensions, matrix vector returned. FLQuant object ","code":""},{"path":[]},{"path":"/reference/drop-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"drop method for FLCore array-based classes — drop,FLArray-method","text":"FLR Team","code":""},{"path":"/reference/drop-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drop method for FLCore array-based classes — drop,FLArray-method","text":"","code":"x <- FLQuant(1:3, dim=c(3,3)) drop(x) #>      year #> quant 1 2 3 #>     1 1 1 1 #>     2 2 2 2 #>     3 3 3 3 is(drop(x)) #> [1] \"matrix\"      \"array\"       \"replValueSp\" \"structure\"   \"vector\"      dim(drop(x)) #> [1] 3 3  # Result of drop can be used for matrix algebra # for example to calculate aging error  data(ple4) aging.error <- diag(0.8, 10) diag(aging.error[-1,]) <- c(rep(0.1, 8), 0.2) diag(aging.error[, -1]) <- c(0.2, rep(0.1, 8)) t(aging.error) %*% drop(catch.n(ple4)) #>        year #>              1957      1958       1959       1960       1961       1962 #>    [1,] 38176.254 65315.932  92053.464  93170.535  97674.521  67370.315 #>    [2,] 48588.858 76785.722 124538.396 153447.291 142787.777 143902.922 #>    [3,] 73152.549 55491.642  80331.220 113728.840 130557.498 127596.723 #>    [4,] 56372.168 62683.002  42607.667  55246.135  74768.782  88867.601 #>    [5,] 32265.414 37598.882  40837.899  27083.451  34665.389  48021.628 #>    [6,] 13184.204 21904.368  24816.102  25647.327  16603.400  21983.837 #>    [7,] 11698.056  9898.540  14438.855  14856.067  14884.680  10028.957 #>    [8,]  9431.123  8450.624   6925.418   9628.640   9452.699   9280.768 #>    [9,]  7711.595  9456.291   9491.492   7746.383   8631.265   8313.749 #>   [10,]  9972.795 12523.807  14073.860  12861.949  10657.310  11452.109 #>        year #>               1963       1964       1965       1966       1967       1968 #>    [1,]  52711.042 145872.503  78090.881  42847.291  40203.649  50319.560 #>    [2,] 115813.299 139658.823 378283.895 143133.323  98309.829  86963.769 #>    [3,] 148725.765 121759.060 149618.116 387395.970 132373.139  99423.466 #>    [4,]  89080.067  90490.158  66822.472  98898.381 223597.642  83548.410 #>    [5,]  57833.831  55179.508  52394.498  37361.280  56480.936 135294.490 #>    [6,]  31802.423  37737.836  33194.963  29628.113  21270.257  34415.433 #>    [7,]  13478.484  18246.110  19252.144  16339.143  15392.196  12156.348 #>    [8,]   6199.196   7897.852   9860.546  10209.505   9186.716   9272.261 #>    [9,]   9235.500   7732.508   8084.490   8364.535   8547.831   8362.603 #>   [10,]  13993.587  16173.170  13690.447  11330.475  10867.459  11896.684 #>        year #>              1969       1970      1971      1972       1973       1974 #>    [1,] 96333.995 107770.028  71255.09  57232.70 204487.172 203861.276 #>    [2,] 99498.274 137423.175 126279.39  90031.92 118483.670 296810.619 #>    [3,] 74451.470  70623.471  97340.07 101838.25  77038.371  89095.880 #>    [4,] 59803.960  43785.217  44696.08  67630.84  71425.482  49041.247 #>    [5,] 52925.909  38809.684  28744.23  29762.19  43018.799  39512.485 #>    [6,] 88511.812  33835.508  24966.90  18433.35  18152.424  22809.347 #>    [7,] 20990.194  49601.654  19703.48  15180.60  11022.392   9752.265 #>    [8,]  7264.125  11941.598  29393.77  12448.13   9556.047   6593.822 #>    [9,]  8729.100   7633.819  10511.81  22657.76  12150.635  10228.508 #>   [10,] 13040.648  14117.535  13667.33  14732.69  22020.998  18359.021 #>        year #>               1975       1976       1977       1978       1979       1980 #>    [1,] 173842.112 166383.938 263021.542 230486.462 209764.902 204323.810 #>    [2,] 250542.355 188093.102 187227.288 240027.198 221405.948 234661.550 #>    [3,] 213496.208 159879.310 114581.130 106336.920 147614.640 141710.424 #>    [4,]  54996.315 120711.305  95973.257  71226.601  64474.371  81115.737 #>    [5,]  23970.252  28271.317  67269.761  57679.491  41162.293  33081.992 #>    [6,]  18533.072  11658.958  15662.848  39755.196  31675.903  20320.805 #>    [7,]  11290.702   9699.382   6662.906   8989.515  20394.959  15408.802 #>    [8,]   5519.107   6524.155   5699.114   3760.989   4706.924  10597.272 #>    [9,]   7330.525   5773.734   5621.181   4695.250   3445.455   3792.677 #>   [10,]  14677.998  10908.634   8176.022   6988.951   6297.555   5527.177 #>        year #>               1981       1982       1983       1984       1985       1986 #>    [1,] 175356.448 328043.196 296183.200 295761.390 403988.238 908293.968 #>    [2,] 268681.429 294940.273 450506.410 351122.148 352261.794 571700.592 #>    [3,] 160666.685 188037.720 197722.141 305277.630 229776.217 225335.480 #>    [4,]  71558.181  77939.227  93632.016 111951.649 176563.171 133691.140 #>    [5,]  36598.636  30400.925  34071.422  44010.467  57565.044  92222.111 #>    [6,]  15412.687  16852.781  14038.572  16245.382  21956.231  29098.307 #>    [7,]  10156.049   7856.087   8758.517   7471.334   8631.471  11025.602 #>    [8,]   8069.958   5367.888   4347.817   5188.325   4404.222   4684.949 #>    [9,]   6870.012   5765.584   4577.667   3916.764   4189.576   3635.567 #>   [10,]   5319.717   7002.957   6903.870   5835.050   5011.270   5283.513 #>        year #>               1987       1988       1989       1990       1991       1992 #>    [1,] 458871.907 347230.074 240019.886 194163.118 176240.926 158676.374 #>    [2,] 956560.787 532682.341 433150.294 310694.782 266904.834 247735.376 #>    [3,] 357950.947 660050.080 342818.580 291258.630 219775.510 197182.610 #>    [4,] 128591.470 198746.408 310652.866 169742.274 153165.900 121080.411 #>    [5,]  68877.220  63053.330  93402.313 153624.222  87752.801  81598.860 #>    [6,]  44966.467  32532.423  29474.627  44286.032  71900.815  42124.368 #>    [7,]  13547.395  19496.605  13398.106  11683.172  18205.211  30022.162 #>    [8,]   5493.325   6183.720   8238.922   5549.991   5250.302   8732.009 #>    [9,]   3859.525   4087.030   3798.566   4685.689   3939.345   4246.328 #>   [10,]   5578.730   5353.507   4336.547   3603.275   4416.685   4990.956 #>        year #>               1993       1994       1995       1996       1997       1998 #>    [1,] 104858.040  87468.382 114345.334 107393.640 243349.540 143521.481 #>    [2,] 208427.850 136951.178 138892.876 219879.240 283410.620 602063.015 #>    [3,] 177719.550 146557.370 105860.074 132122.707 225386.010 256118.540 #>    [4,] 105104.499  91943.704  78881.133  61666.989  73903.448  93225.774 #>    [5,]  62928.618  53223.225  46289.210  38859.304  28018.039  29190.606 #>    [6,]  40302.421  31041.116  25777.158  22173.277  18285.823  12302.744 #>    [7,]  18838.081  17432.184  13236.074  11415.248   9890.450   7285.893 #>    [8,]  14411.523   7630.588   6782.762   5709.879   5139.673   3948.188 #>    [9,]   5508.614   6575.734   3690.761   3737.965   3489.209   2977.472 #>   [10,]   4767.025   4126.668   4246.825   3635.068   3792.407   3476.110 #>        year #>               1999       2000       2001       2002        2003       2004 #>    [1,]  91766.427 116668.582  96769.770 235946.978 126618.9844 203103.850 #>    [2,] 218364.404 151211.968 183925.600 212364.852 457429.1786 195761.307 #>    [3,] 430556.960 155854.240 141926.870 184540.550 169590.2500 267988.582 #>    [4,] 115078.475 211770.333  99323.690  86438.954  76772.3450  68925.460 #>    [5,]  36311.072  51742.438  98443.716  45781.327  36676.5934  32152.002 #>    [6,]  11677.704  13701.143  21266.383  42425.209  21379.6032  17002.041 #>    [7,]   4209.319   3869.870   5128.602   9133.079  17663.5171   7952.854 #>    [8,]   2556.271   1575.633   1705.657   2314.220   3457.6842   5189.243 #>    [9,]   2191.395   1590.274   1098.546    991.607    986.0152   1251.162 #>   [10,]   2721.661   2037.141   1591.542   1261.783   1127.1414   1118.878 #>        year #>               2005       2006       2007       2008       2009       2010 #>    [1,] 165068.770 136261.796 170546.878 150387.616 151489.712 180657.964 #>    [2,] 259744.460 188181.751 192936.142 250794.351 192075.428 167320.836 #>    [3,] 106393.090 167971.973 127624.970 127211.887 155874.250 124687.320 #>    [4,] 104614.944  53956.593  77999.550  57292.482  64112.090  97084.183 #>    [5,]  28703.676  46780.688  24181.193  35589.168  28019.881  35265.850 #>    [6,]  14235.643  12888.246  23251.536  12448.096  18914.460  15107.858 #>    [7,]   6347.179   6053.966   6409.973  12599.167   6732.667  10854.519 #>    [8,]   2614.521   2543.394   2614.628   2960.500   5326.064   3181.155 #>    [9,]   1988.586   1242.851   1147.310   1096.831   1401.935   2351.224 #>   [10,]   1136.210   1478.129   1249.105   1258.377   1486.094   1838.269 #>        year #>               2011       2012       2013       2014       2015       2016 #>    [1,] 148365.212  99088.963 121281.373 187987.757 124900.543 114445.677 #>    [2,] 185752.575 202610.230 189256.503 226392.973 224693.259 135925.886 #>    [3,] 127143.170 176925.568 203316.470 168708.655 177490.162 180588.718 #>    [4,]  91996.510  95665.146 123076.970 135834.170 117144.030 126595.550 #>    [5,]  57658.781  57218.806  58469.035  72360.875  78170.831  69278.102 #>    [6,]  20082.379  33516.726  31333.439  30692.623  38331.743  43593.693 #>    [7,]   8383.028  10434.207  15996.115  15670.625  16543.569  20874.094 #>    [8,]   5059.804   4024.694   5225.981   8585.640   8146.300   7783.139 #>    [9,]   2048.624   3394.421   3321.345   4092.181   5357.450   4858.489 #>   [10,]   3037.990   3555.298   4978.874   5691.126   6302.187   7265.799 #>        year #>               2017 #>    [1,] 106412.493 #>    [2,] 149020.179 #>    [3,] 116194.564 #>    [4,] 124063.590 #>    [5,]  77473.116 #>    [6,]  40462.532 #>    [7,]  21791.847 #>    [8,]   8700.510 #>    [9,]   4617.680 #>   [10,]   7362.845"},{"path":"/reference/evalPredictModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluates a predictModel slot inside the object cointaining it — evalPredictModel","title":"Evaluates a predictModel slot inside the object cointaining it — evalPredictModel","text":"Models objects predictModel class can make use slots methods FLR class contained slot. function can used methods wishing evaluate single predictModel slot context class part .","code":""},{"path":"/reference/evalPredictModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates a predictModel slot inside the object cointaining it — evalPredictModel","text":"","code":"evalPredictModel(object, slot, ...)"},{"path":"/reference/evalPredictModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates a predictModel slot inside the object cointaining it — evalPredictModel","text":"object FLR S4 whicvh predictModel evaluation take place slot predictModel object evaluated","code":""},{"path":"/reference/evalPredictModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluates a predictModel slot inside the object cointaining it — evalPredictModel","text":"result evaluating model, usually FLQuant","code":""},{"path":[]},{"path":"/reference/evalPredictModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluates a predictModel slot inside the object cointaining it — evalPredictModel","text":"FLR Team","code":""},{"path":"/reference/exp-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"exp and log methods FLCore array-based classes — exp,FLQuant-method","title":"exp and log methods FLCore array-based classes — exp,FLQuant-method","text":"Compute exponential logarithmic functions","code":""},{"path":"/reference/exp-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"exp and log methods FLCore array-based classes — exp,FLQuant-method","text":"","code":"# S4 method for FLQuant exp(x)  # S4 method for FLQuant log(x, ...)"},{"path":"/reference/exp-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"exp and log methods FLCore array-based classes — exp,FLQuant-method","text":"method simply calls R's base::exp base::drop, take care returning right units measurement, \"\" character(1).","code":""},{"path":[]},{"path":"/reference/exp-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"exp and log methods FLCore array-based classes — exp,FLQuant-method","text":"FLR Team","code":""},{"path":"/reference/exp-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"exp and log methods FLCore array-based classes — exp,FLQuant-method","text":"","code":"x <- FLQuant(c(4,2,7,4,2,9), units=\"1000\") log(x) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       2       3       4       5       6       #>   all 1.38629 0.69315 1.94591 1.38629 0.69315 2.19722 #>  #> units:    units(log(x)) #> [1] \"\""},{"path":"/reference/ffwd.html","id":null,"dir":"Reference","previous_headings":"","what":"Project forward an FLStock for a fbar target — ffwd","title":"Project forward an FLStock for a fbar target — ffwd","text":"Projection FLStock object fishing mortality target always require features fwd().Fast-forward FLStock object fishing mortality yearly target .","code":""},{"path":"/reference/ffwd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project forward an FLStock for a fbar target — ffwd","text":"","code":"ffwd(object, sr, fbar = control, control = fbar, deviances = \"missing\")"},{"path":"/reference/ffwd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project forward an FLStock for a fbar target — ffwd","text":"object FLStock sr stock-recruit relationship, FLSR predictModel. fbar Yearly target average fishing mortality, FLQuant. control Yearly target average fishing mortality, fwdControl. deviances Deviances strock-recruit relationsip, FLQuant.","code":""},{"path":"/reference/ffwd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project forward an FLStock for a fbar target — ffwd","text":"projected FLStock object.","code":""},{"path":[]},{"path":"/reference/ffwd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Project forward an FLStock for a fbar target — ffwd","text":"Iago MOSQUEIRA (MWR), Henning WINKEL (JRC).","code":""},{"path":"/reference/ffwd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project forward an FLStock for a fbar target — ffwd","text":"","code":"data(ple4) sr <- predictModel(model=bevholt, params=FLPar(a=140.4e4, b=1.448e5)) # Project for fixed Fbar=0.21 run <- ffwd(ple4, sr=sr, fbar=FLQuant(0.21, dimnames=list(year=1958:2017))) plot(run)"},{"path":"/reference/fwdWindow.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend a FLR object along the year dimension and set future assumed values — fwdWindow","title":"Extend a FLR object along the year dimension and set future assumed values — fwdWindow","text":"Objects projected future extended end year, values certain quantities, usually assume constant, set following different mechanisms.","code":""},{"path":"/reference/fwdWindow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend a FLR object along the year dimension and set future assumed values — fwdWindow","text":"","code":"fwdWindow(x, y, ...)  # S4 method for FLStock,missing fwdWindow(   x,   end = dims(x)$maxyear,   nsq = 3,   fun = c(\"mean\", \"sample\"),   years = list(wt = nsq, mat = nsq, m = nsq, spwn = nsq, discards.ratio = nsq, catch.sel     = nsq) )"},{"path":"/reference/fwdWindow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend a FLR object along the year dimension and set future assumed values — fwdWindow","text":"x FLR object extend. y second object information taken.","code":""},{"path":"/reference/fwdWindow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend a FLR object along the year dimension and set future assumed values — fwdWindow","text":"object class 'x'.","code":""},{"path":"/reference/fwdWindow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extend a FLR object along the year dimension and set future assumed values — fwdWindow","text":"'FLStock'","code":""},{"path":[]},{"path":"/reference/fwdWindow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extend a FLR object along the year dimension and set future assumed values — fwdWindow","text":"FLR Team.","code":""},{"path":"/reference/fwdWindow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend a FLR object along the year dimension and set future assumed values — fwdWindow","text":"","code":"data(ple4) # Use mean of last three years and extend until 2020 fut <- fwdWindow(ple4, end=2020) # Check values on catch.wt catch.wt(fut)[, ac(2015:2020)] #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  2015     2016     2017     2018     2019     2020     #>   1  0.026000 0.048000 0.051034 0.041678 0.041678 0.041678 #>   2  0.080271 0.083793 0.085895 0.083320 0.083320 0.083320 #>   3  0.161845 0.157402 0.158552 0.159266 0.159266 0.159266 #>   4  0.257901 0.243039 0.218409 0.239783 0.239783 0.239783 #>   5  0.325621 0.298878 0.314393 0.312964 0.312964 0.312964 #>   6  0.393707 0.352469 0.386271 0.377482 0.377482 0.377482 #>   7  0.461250 0.422309 0.437717 0.440425 0.440425 0.440425 #>   8  0.480815 0.465186 0.531501 0.492501 0.492501 0.492501 #>   9  0.581978 0.555971 0.641979 0.593309 0.593309 0.593309 #>   10 0.599938 0.683933 0.734886 0.672919 0.672919 0.672919 #>  #> units:  kg  # Use mean of the 2010:2015 period fut <- fwdWindow(ple4, end=2020, years=2010:2015) # Use last three years mean, but last five for 'wt' fut <- fwdWindow(ple4, end=2020, nsq=3, years=list(wt=5)) stock.wt(fut)[, ac(2013:2020)] #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  2013   2014   2015   2016   2017   2018   2019   2020   #>   1  0.0430 0.0480 0.0240 0.0300 0.0320 0.0354 0.0354 0.0354 #>   2  0.1070 0.1040 0.0650 0.0660 0.0690 0.0822 0.0822 0.0822 #>   3  0.1530 0.1580 0.1200 0.1170 0.1320 0.1360 0.1360 0.1360 #>   4  0.2080 0.2020 0.2070 0.1980 0.1810 0.1992 0.1992 0.1992 #>   5  0.3200 0.3120 0.2790 0.2600 0.2700 0.2882 0.2882 0.2882 #>   6  0.3540 0.3800 0.3230 0.3290 0.3330 0.3438 0.3438 0.3438 #>   7  0.4340 0.4390 0.3790 0.3800 0.3590 0.3982 0.3982 0.3982 #>   8  0.4930 0.4840 0.4350 0.4340 0.4580 0.4608 0.4608 0.4608 #>   9  0.6620 0.4580 0.4650 0.4790 0.4760 0.5080 0.5080 0.5080 #>   10 0.4680 0.6150 0.4570 0.5140 0.5570 0.5222 0.5222 0.5222 #>  #> units:  kg  catch.sel(fut)[, ac(2013:2020)] #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  2013     2014     2015     2016     2017     2018     2019     2020     #>   1  0.371582 0.574650 0.674177 0.485580 0.268807 0.472493 0.472493 0.472493 #>   2  0.727648 0.817662 0.848662 0.775415 0.659347 0.759736 0.759736 0.759736 #>   3  1.000000 1.000000 0.997872 1.000000 1.000000 1.000000 1.000000 1.000000 #>   4  0.921248 0.974274 1.000000 0.966840 0.901408 0.955721 0.955721 0.955721 #>   5  0.770034 0.777282 0.780296 0.775554 0.763304 0.773407 0.773407 0.773407 #>   6  0.553585 0.547440 0.546097 0.556122 0.570028 0.558043 0.558043 0.558043 #>   7  0.317959 0.360592 0.384355 0.363367 0.320835 0.355771 0.355771 0.355771 #>   8  0.187146 0.217980 0.230463 0.203954 0.163486 0.198758 0.198758 0.198758 #>   9  0.121437 0.123710 0.117807 0.101872 0.083357 0.100739 0.100739 0.100739 #>   10 0.121437 0.123710 0.117807 0.101872 0.083357 0.100739 0.100739 0.100739 #>  #> units:  NA  # Resample from last years for 'wt' fut <- fwdWindow(ple4, end=2020, nsq=3, fun=c(wt='sample')) # Years to resample can be different for 'catch.sel' fut <- fwdWindow(ple4, end=2020, nsq=3,   fun=c(wt='sample', catch.sel='sample'), years=c(wt=10, catch.sel=5)) # 'wt' slot has been resampled, stock.wt(fut)[, ac(2015:2020)] #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  2015  2016  2017  2018  2019  2020  #>   1  0.024 0.030 0.032 0.024 0.053 0.053 #>   2  0.065 0.066 0.069 0.065 0.116 0.116 #>   3  0.120 0.117 0.132 0.120 0.179 0.179 #>   4  0.207 0.198 0.181 0.207 0.340 0.340 #>   5  0.279 0.260 0.270 0.279 0.361 0.361 #>   6  0.323 0.329 0.333 0.323 0.401 0.401 #>   7  0.379 0.380 0.359 0.379 0.448 0.448 #>   8  0.435 0.434 0.458 0.435 0.572 0.572 #>   9  0.465 0.479 0.476 0.465 0.568 0.568 #>   10 0.457 0.514 0.557 0.457 0.655 0.655 #>  #> units:  kg  # while others have used a 3 year average catch.sel(fut)[, ac(2015:2020)] #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  2015     2016     2017     2018     2019     2020     #>   1  0.674177 0.485580 0.268807 0.674177 0.574650 0.371582 #>   2  0.848662 0.775415 0.659347 0.848662 0.817662 0.727648 #>   3  0.997872 1.000000 1.000000 0.997872 1.000000 1.000000 #>   4  1.000000 0.966840 0.901408 1.000000 0.974274 0.921248 #>   5  0.780296 0.775554 0.763304 0.780296 0.777282 0.770034 #>   6  0.546097 0.556122 0.570028 0.546097 0.547440 0.553585 #>   7  0.384355 0.363367 0.320835 0.384355 0.360592 0.317959 #>   8  0.230463 0.203954 0.163486 0.230463 0.217980 0.187146 #>   9  0.117807 0.101872 0.083357 0.117807 0.123710 0.121437 #>   10 0.117807 0.101872 0.083357 0.117807 0.123710 0.121437 #>  #> units:  NA"},{"path":"/reference/getSlotNamesClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of slots of a given class — getSlotNamesClass","title":"Names of slots of a given class — getSlotNamesClass","text":"function returns names, character vector, slots S4 object class specified 'class' argument. Comparison done using (), class inheritance matched.","code":""},{"path":"/reference/getSlotNamesClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of slots of a given class — getSlotNamesClass","text":"","code":"getSlotNamesClass(object, class)"},{"path":"/reference/getSlotNamesClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of slots of a given class — getSlotNamesClass","text":"object S4 object check slots . class name class match, 'character'.","code":""},{"path":"/reference/getSlotNamesClass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Names of slots of a given class — getSlotNamesClass","text":"FLR Team","code":""},{"path":"/reference/getSlotNamesClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of slots of a given class — getSlotNamesClass","text":"","code":"data(ple4) getSlotNamesClass(ple4, 'FLQuant') #>  [1] \"catch\"        \"catch.n\"      \"catch.wt\"     \"discards\"     \"discards.n\"   #>  [6] \"discards.wt\"  \"landings\"     \"landings.n\"   \"landings.wt\"  \"stock\"        #> [11] \"stock.n\"      \"stock.wt\"     \"m\"            \"mat\"          \"harvest\"      #> [16] \"harvest.spwn\" \"m.spwn\""},{"path":"/reference/group.html","id":null,"dir":"Reference","previous_headings":"","what":"Group objects over some index by applying a function over a single dimension — group","title":"Group objects over some index by applying a function over a single dimension — group","text":"Array objects (e.g. FLQuant FLQuants) divided along single dimnension following given index expression, aggregating function applied subset, results joined . Data can added, example, decade two age groups.","code":""},{"path":"/reference/group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group objects over some index by applying a function over a single dimension — group","text":"","code":"group(x, FUN, ...)  # S4 method for FLQuant,`function` group(x, FUN = sum, ...)"},{"path":"/reference/group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group objects over some index by applying a function over a single dimension — group","text":"x object group. FUN function apply along chosen dimension, defaults 'sum'. ... expression indexing vector, named chosen dimension. Extra arguments FUN can also provided, cannmot match names x.","code":""},{"path":"/reference/group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group objects over some index by applying a function over a single dimension — group","text":"single object reduced dimensionality.","code":""},{"path":"/reference/group.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Group objects over some index by applying a function over a single dimension — group","text":"Iago Mosqueira (WMR)","code":""},{"path":"/reference/group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group objects over some index by applying a function over a single dimension — group","text":"","code":"data(ple4) # Add catch-at-age along two age groups, 'juv'eniles and 'adu'lts group(catch.n(ple4), sum, age=c('juv', 'juv', rep('adu', 8))) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   juv   82844  144028  220590  250246  240235  212994  163538  284592  488725 #>   adu  217709  216081  229525  263171  300448  323824  375336  356155  320567 #>      year #> age   1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   juv  150830  136276  135024  197136  251958  200146  144800  322925  524851 #>   adu  634678  479953  396629  324414  263583  266412  285149  264431  221214 #>      year #> age   1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   juv  424841  354998  453126  483173  435736  446896  455098  628425  775178 #>   adu  349358  352906  316769  286774  315207  303644  303591  333781  335564 #>      year #> age   1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   juv  645330  763038 1500360 1489939  853142  683898  503947  446701  410487 #>   adu  501451  501309  484611  554359 1016274  795393  685345  560852  485903 #>      year #> age   1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   juv  316124  221653  255472  337605  528114  793612  278299  267005  285233 #>   adu  426742  361297  282531  268988  366551  360498  637135  443016  365948 #>      year #> age   2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   juv  445588  623612  382435  443476  323632  368491  415136  344764  349579 #>   adu  375610  288089  418011  247371  293727  259470  236503  280668  288770 #>      year #> age   2011    2012    2013    2014    2015    2016    2017    #>   juv  339133  303843  306544  418660  354316  242102  258717 #>   adu  310395  382591  449713  437356  442764  469107  397382 #>  #> units:  1000  # An expression can use based on dimnames group(catch.n(ple4), sum, age=age < 3) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>        year #> age     1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   TRUE    82844  144028  220590  250246  240235  212994  163538  284592  488725 #>   FALSE  217709  216081  229525  263171  300448  323824  375336  356155  320567 #>        year #> age     1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   TRUE   150830  136276  135024  197136  251958  200146  144800  322925  524851 #>   FALSE  634678  479953  396629  324414  263583  266412  285149  264431  221214 #>        year #> age     1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   TRUE   424841  354998  453126  483173  435736  446896  455098  628425  775178 #>   FALSE  349358  352906  316769  286774  315207  303644  303591  333781  335564 #>        year #> age     1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   TRUE   645330  763038 1500360 1489939  853142  683898  503947  446701  410487 #>   FALSE  501451  501309  484611  554359 1016274  795393  685345  560852  485903 #>        year #> age     1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   TRUE   316124  221653  255472  337605  528114  793612  278299  267005  285233 #>   FALSE  426742  361297  282531  268988  366551  360498  637135  443016  365948 #>        year #> age     2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   TRUE   445588  623612  382435  443476  323632  368491  415136  344764  349579 #>   FALSE  375610  288089  418011  247371  293727  259470  236503  280668  288770 #>        year #> age     2011    2012    2013    2014    2015    2016    2017    #>   TRUE   339133  303843  306544  418660  354316  242102  258717 #>   FALSE  310395  382591  449713  437356  442764  469107  397382 #>  #> units:  1000  # Mean by lustrum, by using 'year - year %% 5' group(catch.n(ple4), mean, year = year - year %% 5) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1955      1960      1965      1970      1975      1980      1985      #>   1   71809.28  97610.97  56284.64 142896.67 236660.46 287021.52 522676.11 #>   2   77344.61 132710.09 165313.63 146039.20 193714.22 303163.94 535399.28 #>   3   70667.84 134317.60 177299.86  83950.61 151557.10 200469.06 364165.16 #>   4   53897.38  77484.89 102811.81  54227.97  77645.40  79912.77 183142.05 #>   5   37029.27  42708.80  65547.37  35383.39  42043.43  32622.44  67188.57 #>   6   18875.79  26412.29  41723.43  22399.67  22713.38  15434.63  29589.46 #>   7   11646.69  13542.50  14706.31  21814.34  10821.45   9640.98  12151.84 #>   8    8068.86   8236.27   8886.16  13606.39   4789.93   6739.11   5394.17 #>   9    6492.95   5485.61   5790.72   9201.28   3279.71   3588.63   2705.11 #>   10  14426.07  15598.83  14482.59  19574.23  11352.33   7198.61   6052.75 #>     year #> age  1990      1995      2000      2005      2010      2015      #>   1  151861.64 137447.51 165348.82 166915.67 161601.51 123926.27 #>   2  227920.56 301172.80 235425.77 212184.16 181950.43 161118.88 #>   3  214340.28 240942.90 187281.98 136159.64 163859.80 161994.17 #>   4  122344.54  71372.58 106119.37  68691.06 108733.54 123839.27 #>   5   88976.98  33588.09  50224.62  30263.20  53585.84  73302.27 #>   6   44095.10  17259.15  21675.79  15752.57  24526.45  39482.76 #>   7   17571.71   8772.14   7917.82   7192.23  11668.61  18795.52 #>   8    7692.84   4637.68   2477.50   2995.50   4801.66   7518.12 #>   9    4034.36   2399.99    747.03    962.01   2072.67   3159.34 #>   10   4971.86   4168.02   1690.74   1531.73   4516.31   8326.26 #>  #> units:  1000"},{"path":"/reference/growth-models.html","id":null,"dir":"Reference","previous_headings":"","what":"Growth models — vonbert","title":"Growth models — vonbert","text":"Growth models ivonbert gompertz richards","code":""},{"path":"/reference/growth-models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Growth models — vonbert","text":"","code":"vonbert(linf, k, t0, age)  ivonbert(linf, k, t0, len)  gompertz(linf, a, k, age)  richards(linf, k, b, m, age)"},{"path":"/reference/growth-models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Growth models — vonbert","text":"","code":"data(ple4) vonbert #> function(linf, k, t0, age) { #>   linf * (1.0 - exp((-k * (age - t0)))) #> } #> <bytecode: 0x557b11040408> #> <environment: namespace:FLCore>  vonbert(linf=35, k=0.352, t0=-0.26, age=1:14) #>  [1] 12.53793 19.20287 23.89019 27.18669 29.50506 31.13552 32.28219 33.08862 #>  [9] 33.65576 34.05462 34.33514 34.53241 34.67116 34.76873 ivonbert(35, 0.352, -0.26, 1:34) #>  [1] 0.00000000 0.00000000 0.00000000 0.08477516 0.17792807 0.27423929 #>  [7] 0.37393054 0.47724771 0.58446456 0.69588704 0.81185861 0.93276661 #> [13] 1.05905002 1.19120916 1.32981758 1.47553717 1.62913723 1.79151908 #> [19] 1.96374812 2.14709619 2.34309867 2.55363268 2.78102674 3.02821815 #> [25] 3.29898571 3.59830535 3.93291625 4.31226680 4.75019486 5.26815383 #> [31] 5.90208438 6.71936299 7.87125250 9.84042063 gompertz(linf=179.13, k=0.4088, a=1.7268, age=1:12) #>  [1]  88.42865 134.22714 159.19676 170.69619 175.63304 177.69211 178.54079 #>  [8] 178.88890 179.03140 179.08968 179.11352 179.12326 richards(linf=178.63, k=0.424, b=-7.185, m=2880.4, age=1:12) #>  [1]  42.82345  70.14526  96.88848 119.69588 137.45596 150.48243 159.66873 #>  [8] 165.98206 170.24823 173.09932 174.99095 176.24005"},{"path":"/reference/iav.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the inter-annual variability of a time series — iav","title":"Compute the inter-annual variability of a time series — iav","text":"inter-annual variability time series stored FLQuant object, computed \\(|x_y - x_{y-1}) / x_{y-1}|\\). resulting object one year shorter input. first year missing values assigned final year pair.","code":""},{"path":"/reference/iav.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the inter-annual variability of a time series — iav","text":"","code":"iav(object)"},{"path":"/reference/iav.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the inter-annual variability of a time series — iav","text":"object class object.","code":""},{"path":"/reference/iav.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the inter-annual variability of a time series — iav","text":"FLR Team","code":""},{"path":"/reference/iav.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the inter-annual variability of a time series — iav","text":"","code":"data(ple4) # Compute inter-annual variability in catch iav(catch(ple4)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1958      1959      1960      1961      1962      1963      1964      #>   all 0.1330372 0.1847259 0.1215789 0.0132751 0.0564642 0.1150058 0.0477615 #>      year #> age   1965      1966      1967      1968      1969      1970      1971      #>   all 0.0262144 0.0717180 0.0480213 0.0301291 0.0243120 0.0653893 0.0337214 #>      year #> age   1972      1973      1974      1975      1976      1977      1978      #>   all 0.0578063 0.0142249 0.0427618 0.0468241 0.0634222 0.0570740 0.0743023 #>      year #> age   1979      1980      1981      1982      1983      1984      1985      #>   all 0.0309460 0.0697257 0.0010639 0.0430649 0.1049299 0.0735235 0.0823874 #>      year #> age   1986      1987      1988      1989      1990      1991      1992      #>   all 0.1301530 0.1047575 0.0219299 0.0736247 0.1418697 0.1293683 0.1168393 #>      year #> age   1993      1994      1995      1996      1997      1998      1999      #>   all 0.0680792 0.1577328 0.1231082 0.0068560 0.1554476 0.1251388 0.0033755 #>      year #> age   2000      2001      2002      2003      2004      2005      2006      #>   all 0.1445205 0.1225443 0.1225586 0.0710821 0.0907169 0.1821103 0.0234528 #>      year #> age   2007      2008      2009      2010      2011      2012      2013      #>   all 0.0634175 0.0823385 0.0203357 0.0269798 0.0075226 0.1015176 0.0696424 #>      year #> age   2014      2015      2016      2017      #>   all 0.0092539 0.0172577 0.0445777 0.0479687 #>  #> units:"},{"path":"/reference/intersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns FLR objects trimmed to their shared dimensions. — intersect","title":"Returns FLR objects trimmed to their shared dimensions. — intersect","text":"Objects sharing certain dimensions, inferred dimnames, subset common ones along dimensions. returned object one FLlst classes, corresponds input class. objects list can , example, combined directly compared, shown examples.","code":""},{"path":"/reference/intersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns FLR objects trimmed to their shared dimensions. — intersect","text":"","code":"# S4 method for FLArray,FLArray intersect(x, y)"},{"path":"/reference/intersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns FLR objects trimmed to their shared dimensions. — intersect","text":"x First object compared subset y Second object compared subset","code":""},{"path":"/reference/intersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns FLR objects trimmed to their shared dimensions. — intersect","text":"object corresponding FLsdt-based plural class.","code":""},{"path":[]},{"path":"/reference/intersect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns FLR objects trimmed to their shared dimensions. — intersect","text":"FLR Team","code":""},{"path":"/reference/intersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns FLR objects trimmed to their shared dimensions. — intersect","text":"","code":"big <- FLQuant(64.39, dimnames=list(age=1:4, year=2001:2012)) small <- FLQuant(3.52, dimnames=list(age=2:3, year=2001:2005)) intersect(big, small) #> $ NA  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2001  2002  2003  2004  2005  #>   2 64.39 64.39 64.39 64.39 64.39 #>   3 64.39 64.39 64.39 64.39 64.39 #>  #> units:  NA  #>  #> $ NA  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2001 2002 2003 2004 2005 #>   2 3.52 3.52 3.52 3.52 3.52 #>   3 3.52 3.52 3.52 3.52 3.52 #>  #> units:  NA  #>   # Two FLQuant objects can be added along their common dimension using Reduce()  Reduce('+', intersect(big, small)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2001  2002  2003  2004  2005  #>   2 67.91 67.91 67.91 67.91 67.91 #>   3 67.91 67.91 67.91 67.91 67.91 #>  #> units:  NA"},{"path":"/reference/iter.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods iter — iter","title":"Methods iter — iter","text":"Select modify iterations FLR object","code":""},{"path":"/reference/iter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods iter — iter","text":"","code":"iter(obj, ...)  # S4 method for FLArray iter(obj, iter)"},{"path":"/reference/iter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Methods iter — iter","text":"extract modify subset iterations contained FLR object, iter iter<- methods can used. complex objects various FLQuant slots, iter method checks whether individual slots contain one iteration, .e. dims(object)[6] > 1. particular slot contains single iteration, returned, otherwise chosen iteration selected. contrast subset operator [, carry check. objects class FLModel, iters extracted slots classes FLQuant, FLCohort FLPar.","code":""},{"path":"/reference/iter.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Methods iter — iter","text":"iter(object) iter<-(object,value)","code":""},{"path":[]},{"path":"/reference/iter.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods iter — iter","text":"FLR Team","code":""},{"path":"/reference/iter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods iter — iter","text":"","code":"# For an FLQuant   flq <- FLQuant(rnorm(800), dim=c(4,10,2), iter=10)   iter(flq, 2) #> An object of class \"FLQuant\" #> , , unit = 1, season = all, area = unique #>  #>      year #> quant 1          2          3          4          5          6          #>     1 -0.5048237 -1.3370868  0.3798616  0.8791925 -3.1336722 -1.0144370 #>     2 -0.5596637 -0.2802463 -1.6543820 -0.6447686  0.9600912  0.9711411 #>     3 -1.4748116 -0.4185802 -0.2433424 -0.1750687  0.5121443  0.6914782 #>     4  0.1142472 -0.1908464 -0.0687061 -0.0374347  0.8031520  1.8676465 #>      year #> quant 7          8          9          10         #>     1  1.5428187  2.2608181  0.3993638 -1.3137536 #>     2  0.2638494  0.2034165  0.3875471  0.9533201 #>     3 -1.0138326  0.5083950  1.2421149 -0.0057127 #>     4 -0.1583943 -0.7373913 -0.3855133  2.7211215 #>  #> , , unit = 2, season = all, area = unique #>  #>      year #> quant 1          2          3          4          5          6          #>     1 -1.2569187  0.0330401 -1.6387090  0.1192605 -0.3673764 -1.0338097 #>     2  0.3584963  0.7823388  0.2322345 -0.3333425  0.3675313 -1.4752217 #>     3 -1.1555458 -0.1553402  1.1350204  0.1012572  1.1576973  0.2932451 #>     4 -0.4511899 -0.4406116  0.7810323  0.2817826 -0.9448759 -0.0179001 #>      year #> quant 7          8          9          10         #>     1 -0.0789295  0.0827085 -0.1799535 -0.8361098 #>     2  0.5615524 -0.3081643 -0.0739701  0.6470322 #>     3 -0.4179924  1.7900058  0.8849657  0.0557016 #>     4  1.8326555 -0.0346654 -2.9268645  0.4508651 #>  #> units:  NA  # For the more complex FLStock object   data(ple4)   fls <- propagate(ple4, 10)   # Extraction using iter...     fls2 <- iter(fls, 2)     summary(fls2) #> An object of class \"FLStock\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t61\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t1\t10\t10\t1957\t2017\t2\t6\t #>  #> Metrics:  #>   rec: 367450 - 4303680  (1000)  #>   ssb: 203391 - 913290  (t)  #>   catch: 78360 - 315245  (t)  #>   fbar: 0.20 - 0.72  (f)"},{"path":"/reference/jackknife.html","id":null,"dir":"Reference","previous_headings":"","what":"Method jackknife — jackknife","title":"Method jackknife — jackknife","text":"Jackknife resampling","code":""},{"path":"/reference/jackknife.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method jackknife — jackknife","text":"","code":"# S4 method for FLQuant jackknife(object, dim = \"year\", na.rm = TRUE)  # S4 method for FLQuants jackknife(object, ...)  # S4 method for FLModel jackknife(object, slot)"},{"path":"/reference/jackknife.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method jackknife — jackknife","text":"jackknife method sets objects ready jackknifing, .e. systematically recompute given statistic leaving one observation time. new set \"observations\" statistic, estimates bias variance statstic can calculated. Input objects length > 1 along iter dimension, main slot resulting object many iters number elements original object NA.","code":""},{"path":"/reference/jackknife.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method jackknife — jackknife","text":"jackknife(object, ...)","code":""},{"path":[]},{"path":"/reference/jackknife.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method jackknife — jackknife","text":"FLR Team","code":""},{"path":"/reference/jackknife.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method jackknife — jackknife","text":"","code":"flq <- FLQuant(1:8) flj <- jackknife(flq) iters(flj) #> -- iter:  1  #>  1  2  3  4  5  6  7  8  #> NA  2  3  4  5  6  7  8  #> -- iter:  2  #>  1  2  3  4  5  6  7  8  #>  1 NA  3  4  5  6  7  8  #> -- iter:  3  #>  1  2  3  4  5  6  7  8  #>  1  2 NA  4  5  6  7  8  #> -- iter:  4  #>  1  2  3  4  5  6  7  8  #>  1  2  3 NA  5  6  7  8  #> -- iter:  5  #>  1  2  3  4  5  6  7  8  #>  1  2  3  4 NA  6  7  8  #> -- iter:  6  #>  1  2  3  4  5  6  7  8  #>  1  2  3  4  5 NA  7  8  #> -- iter:  7  #>  1  2  3  4  5  6  7  8  #>  1  2  3  4  5  6 NA  8  #> -- iter:  8  #>  1  2  3  4  5  6  7  8  #>  1  2  3  4  5  6  7 NA  #>  #> units:  NA  #> NULL"},{"path":"/reference/join.html","id":null,"dir":"Reference","previous_headings":"","what":"Joins objects along a dimensions where dimnames differ — join","title":"Joins objects along a dimensions where dimnames differ — join","text":"FLQuant objects joined along single dimension, dimnames different. reverse operation divide.","code":""},{"path":"/reference/join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joins objects along a dimensions where dimnames differ — join","text":"","code":"join(x, y, ...)  # S4 method for FLQuant,FLQuant join(x, y)  # S4 method for FLQuants,missing join(x, y)"},{"path":"/reference/join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joins objects along a dimensions where dimnames differ — join","text":"x object join y object join","code":""},{"path":"/reference/join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joins objects along a dimensions where dimnames differ — join","text":"single object","code":""},{"path":"/reference/join.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Joins objects along a dimensions where dimnames differ — join","text":"Iago Mosqueira (WMR)","code":""},{"path":"/reference/join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joins objects along a dimensions where dimnames differ — join","text":"","code":"data(ple4) # JOIN over age dimension x <- catch.n(ple4)[1,] y <- catch.n(ple4)[2,] join(x, y) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   1   42703   72733   99992   97351  105216   65816   51939  167733   41740 #>   2   40141   71295  120598  152894  135020  147179  111599  116859  446985 #>    year #> age 1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   1   39663   37966   52596  109458  117963   73201   61075  245992  216252 #>   2  111166   98311   82428   87678  133995  126945   83724   76932  308599 #>    year #> age 1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   1  187654  186977  311013  260242  237416  228049  185495  378858  312379 #>   2  237186  168021  142113  222931  198320  218847  269603  249567  462799 #>    year #> age 1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   1  330326  468121 1083226  442683  374166  245186  205384  187958  168040 #>   2  315003  294918  417134 1047256  478976  438712  298563  258742  242447 #>    year #> age 1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   1  104637   93290  126855  105190  272197   91658   91338  128526   97495 #>   2  211488  128363  128617  232415  255917  701954  186961  138480  187738 #>    year #> age 2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   1  273412   91797  235515  172459  148427  190997  155534  167162  208143 #>   2  172176  531816  146920  271017  175206  177494  259601  177602  141436 #>    year #> age 2011    2012    2013    2014    2015    2016    2017    #>   1  163503   98149  129467  208745  127813  128908  115058 #>   2  175631  205694  177076  209915  226503  113194  143659 #>  #> units:  1000  # JOIN over year dimension x <- catch.n(ple4)[,10:20] y <- catch.n(ple4)[,21:25] join(x, y) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1966     1967     1968     1969     1970     1971     1972     1973     #>   1   39663.3  37965.7  52596.0 109457.7 117963.1  73200.7  61075.3 245992.4 #>   2  111166.4  98310.6  82428.0  87678.2 133995.3 126945.0  83724.5  76932.2 #>   3  462675.4 120682.1 105022.1  74641.7  66343.1 100832.4 108372.6  77394.2 #>   4   61390.1 259964.0  71629.9  59702.9  41494.6  39796.4  67677.2  74297.7 #>   5   35187.6  35582.3 157422.8  45774.7  39552.2  27756.8  26518.0  42478.6 #>   6   30721.8  20186.8  21932.6 103358.6  30184.5  25591.5  17801.0  16061.1 #>   7   15319.0  15625.6  11270.7  12474.5  57327.1  17180.6  15407.2  10556.6 #>   8   10118.0   8730.5   9465.0   6747.6   7215.5  33998.7  10747.2   9710.3 #>   9    5832.4   6397.3   5731.5   6186.0   4365.0   4767.9  23096.6   7321.8 #>   10  13434.0  12784.7  14154.4  15527.6  17101.3  16488.2  15528.8  26611.0 #>     year #> age  1974     1975     1976     1977     1978     1979     1980     1981     #>   1  216251.7 187654.3 186977.3 311012.8 260241.7 237416.2 228048.9 185495.1 #>   2  308599.0 237186.5 168020.9 142113.1 222931.1 198319.5 218847.0 269603.3 #>   3   66810.8 232622.9 162809.2 113342.5  96339.8 152671.1 139741.7 158997.6 #>   4   47873.8  36792.4 128298.6  96958.2  69719.7  56458.1  80323.5  65082.8 #>   5   40611.4  23001.2  17915.1  70724.5  58168.6  40407.8  28827.8  35922.2 #>   6   22360.2  18900.4  11094.1   9943.6  41726.3  31902.4  19874.1  13526.2 #>   7    8600.3  11126.0   9921.3   6354.8   5572.7  21132.3  15387.5   9994.9 #>   8    6360.4   4998.3   6528.9   5846.9   3587.0   2988.5  11113.5   8074.8 #>   9    6455.1   4079.0   3088.6   3861.3   3341.0   2028.7   1676.8   6106.6 #>   10  22141.9  17837.6  13249.7   9737.4   8318.6   7618.4   6699.4   5886.3 #>  #> units:  1000  div <- divide(catch.n(ple4), dim=1) is(div) #> [1] \"FLQuants\" \"FLlst\"    \"list\"     \"vector\"   length(div) #> [1] 10 join(div) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957       1958       1959       1960       1961       1962       #>   1    42702.66   72733.05   99992.13   97351.36  105215.69   65815.54 #>   2    40141.28   71294.94  120597.60  152894.50  135019.66  147178.83 #>   3    79353.02   52031.60   80618.90  116614.20  137289.10  129967.50 #>   4    56560.05   67368.68   37763.40   51480.30   72242.52   89048.40 #>   5    31888.26   35848.98   43350.57   24004.78   32458.56   46321.31 #>   6    10988.02   21828.30   23811.03   27315.98   14742.89   20597.37 #>   7    12049.59    8568.27   14322.21   13940.69   15632.32    8738.10 #>   8     9595.80    8610.92    5999.88    9719.19    9045.32    9787.41 #>   9     5495.25    7050.64    6932.95    4592.23    6532.14    5770.30 #>   10   11779.09   14773.43   16725.71   15503.41   12505.12   13593.85 #>     year #> age  1963       1964       1965       1966       1967       1968       #>   1    51938.98  167733.27   41740.48   39663.31   37965.74   52595.95 #>   2   111598.54  116858.90  446985.00  111166.40   98310.59   82427.96 #>   3   161466.70  126250.50  123478.00  462675.40  120682.10  105022.10 #>   4    83925.51   90727.70   61372.16   61390.10  259964.00   71629.90 #>   5    57929.89   52829.48   53769.44   35187.61   35582.32  157422.80 #>   6    30973.68   38431.54   32417.30   30721.82   20186.83   21932.60 #>   7    12304.87   17096.54   18841.81   15318.96   15625.57   11270.73 #>   8     5372.20    7257.27    9369.66   10117.96    8730.53    9465.05 #>   9     6709.53    3823.86    4806.34    5832.41    6397.31    5731.52 #>   10   16653.29   19738.48   16512.27   13434.04   12784.66   14154.41 #>     year #> age  1969       1970       1971       1972       1973       1974       #>   1   109457.72  117963.12   73200.74   61075.31  245992.44  216251.72 #>   2    87678.20  133995.30  126945.00   83724.50   76932.20  308599.00 #>   3    74641.70   66343.10  100832.40  108372.60   77394.22   66810.75 #>   4    59702.90   41494.61   39796.45   67677.23   74297.75   47873.80 #>   5    45774.70   39552.22   27756.81   26517.95   42478.64   40611.35 #>   6   103358.62   30184.47   25591.45   17801.04   16061.13   22360.23 #>   7    12474.47   57327.07   17180.59   15407.22   10556.57    8600.26 #>   8     6747.59    7215.49   33998.65   10747.18    9710.27    6360.36 #>   9     6186.04    4365.02    4767.89   23096.60    7321.75    6455.12 #>   10   15527.56   17101.29   16488.17   15528.78   26611.03   22141.89 #>     year #> age  1975       1976       1977       1978       1979       1980       #>   1   187654.33  186977.31  311012.79  260241.69  237416.19  228048.89 #>   2   237186.50  168020.90  142113.10  222931.10  198319.50  218847.00 #>   3   232622.90  162809.20  113342.50   96339.80  152671.10  139741.72 #>   4    36792.38  128298.60   96958.20   69719.70   56458.10   80323.48 #>   5    23001.21   17915.05   70724.47   58168.61   40407.81   28827.79 #>   6    18900.43   11094.15    9943.65   41726.33   31902.36   19874.09 #>   7    11126.04    9921.34    6354.82    5572.73   21132.34   15387.55 #>   8     4998.26    6528.95    5846.88    3587.01    2988.53   11113.54 #>   9     4078.97    3088.62    3861.27    3341.05    2028.66    1676.81 #>   10   17837.63   13249.71    9737.37    8318.56    7618.36    6699.37 #>     year #> age  1981       1982       1983       1984       1985       1986       #>   1   185495.15  378858.07  312379.15  330326.34  468120.57 1083225.66 #>   2   269603.30  249567.40  462798.80  315003.20  294917.80  417134.40 #>   3   158997.60  195147.39  177915.40  330543.20  227034.40  213479.40 #>   4    65082.75   69630.68   91099.41   93427.50  186569.17  128385.20 #>   5    35922.17   27199.44   29609.48   41553.29   46043.95   96350.40 #>   6    13526.22   16783.02   12738.97   14250.85   20729.69   23032.71 #>   7     9994.94    7064.21    8864.51    6893.69    7680.85   10371.03 #>   8     8074.76    5264.18    3930.15    5312.93    4138.25    4255.10 #>   9     6106.59    4501.20    3172.50    2486.08    3255.40    2437.65 #>   10    5886.32    8191.05    8233.28    6983.05    5857.16    6299.68 #>     year #> age  1987       1988       1989       1990       1991       1992       #>   1   442682.83  374165.61  245185.87  205383.51  187958.37  168039.58 #>   2  1047256.40  478975.90  438711.90  298563.10  258742.30  242447.10 #>   3   302191.00  746685.00  331436.00  307676.00  223193.20  201697.80 #>   4   114725.07  148044.90  337985.90  152615.20  153467.20  115796.60 #>   5    65923.14   56419.88   71205.46  168825.14   80728.20   82733.51 #>   6    46662.01   31129.37   26393.55   33025.90   78235.21   38323.92 #>   7    10445.49   19869.41   12392.43    9827.96   12398.30   31918.82 #>   8     5248.06    4881.37    8448.05    5182.11    4630.49    6547.11 #>   9     2503.27    2916.79    2412.42    4215.04    3060.81    3024.36 #>   10    6660.50    6327.28    5119.13    3977.21    5138.26    5860.65 #>     year #> age  1993       1994       1995       1996       1997       1998       #>   1   104636.60   93290.14  126854.53  105190.15  272197.35   91657.58 #>   2   211487.60  128362.70  128617.10  232415.20  255916.60  701954.20 #>   3   183104.50  156029.90  106282.90  129090.50  242378.70  221681.40 #>   4   100871.90   88971.80   79720.43   56087.87   58913.90   85780.00 #>   5    60965.29   51632.74   44764.95   38876.43   25344.58   24336.34 #>   6    40691.96   30198.53   25052.05   21493.70   18509.83   11435.31 #>   7    16523.26   17190.20   12590.23   10906.74    9435.01    7208.62 #>   8    15502.77    6601.74    6586.87    5404.86    4914.63    3754.64 #>   9     3569.78    6301.80    2542.41    2953.18    2644.70    2236.10 #>   10    5512.56    4370.61    4990.73    4174.69    4409.92    4065.62 #>     year #> age  1999       2000       2001       2002       2003       2004       #>   1    91337.92  128525.79   97495.00  273411.66   91796.79  235514.85 #>   2   186960.90  138479.50  187737.70  172176.50  531815.50  146919.67 #>   3   505281.00  147232.10  142364.40  199413.20  136174.20  311226.00 #>   4    76360.70  242206.10   92615.80   77923.40   74693.40   43158.15 #>   5    34618.15   32822.43  109946.10   41589.14   34002.05   32763.40 #>   6     9804.85   12638.84   12252.56   47176.75   20056.13   16254.67 #>   7     3720.12    3078.29    4697.26    5248.95   19344.91    7219.69 #>   8     2527.38    1433.52    1455.38    2162.48    1819.76    5516.38 #>   9     1623.54    1209.85     716.29     593.44     673.88     541.68 #>   10    3199.13    2395.19    1899.89    1503.05    1324.69    1330.89 #>     year #> age  2005       2006       2007       2008       2009       2010       #>   1   172458.80  148426.56  190996.81  155534.36  167161.84  208142.93 #>   2   271017.30  175205.50  177494.30  259601.30  177602.40  141436.20 #>   3    84388.60  183320.40  127413.40  120064.40  165611.40  125432.90 #>   4   117804.80   37951.03   79448.20   52002.37   56248.90  101973.80 #>   5    19322.44   52637.29   16996.50   36841.46   25518.30   29618.53 #>   6    14652.44    8757.52   26391.73    9157.63   19803.51   13736.46 #>   7     5814.47    6184.97    4385.02   14378.47    5198.22   11568.37 #>   8     2303.57    2302.40    2627.86    1806.28    5937.37    2261.77 #>   9     1902.16     829.78     738.38     776.27     563.45    2149.01 #>   10    1182.49    1743.94    1469.08    1475.94    1787.19    2029.21 #>     year #> age  2011       2012       2013       2014       2015       2016       #>   1   163502.68   98149.48  129467.17  208745.31  127812.76  128907.81 #>   2   175630.70  205693.78  177076.40  209915.05  226503.32  113194.28 #>   3   125474.80  184253.10  217019.50  167118.70  179280.50  195889.00 #>   4    92002.60   89537.10  119932.30  140221.90  114154.30  125580.90 #>   5    58469.50   56101.56   54291.80   69447.80   78925.40   65419.30 #>   6    16829.21   33838.48   30423.65   27804.45   36150.81   43845.72 #>   7     7720.61    8357.86   15653.39   15042.83   15185.55   19751.87 #>   8     5236.21    3640.73    4310.38    8559.20    7800.51    6880.26 #>   9      987.75    2763.26    2123.34    2339.97    3873.36    3037.44 #>   10    3674.02    4098.71    5958.17    6821.41    7393.56    8702.57 #>     year #> age  2017       #>   1   115058.24 #>   2   143659.04 #>   3   110813.00 #>   4   131782.60 #>   5    75562.10 #>   6    38451.76 #>   7    21449.14 #>   8     7873.59 #>   9     2567.24 #>   10    8882.65 #>  #> units:  1000  all.equal(join(divide(catch.n(ple4), dim=1)), catch.n(ple4)) #> [1] TRUE"},{"path":"/reference/lattice.html","id":null,"dir":"Reference","previous_headings":"","what":"Lattice methods — lattice","title":"Lattice methods — lattice","text":"Implementation Trellis graphics FLR","code":""},{"path":"/reference/lattice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lattice methods — lattice","text":"","code":"# S4 method for formula,FLQuant xyplot(x, data, ...)  # S4 method for formula,FLCohort xyplot(x, data, ...)  # S4 method for formula,FLQuants xyplot(x, data, ...)  # S4 method for formula,FLComp xyplot(x, data, ...)  # S4 method for formula,FLQuant bwplot(x, data, ...)  # S4 method for formula,FLComp bwplot(x, data, ...)  # S4 method for formula,FLQuant dotplot(x, data, ...)  # S4 method for formula,FLComp dotplot(x, data, ...)  # S4 method for formula,FLQuant barchart(x, data, ...)  # S4 method for formula,FLComp barchart(x, data, ...)  # S4 method for formula,FLQuant stripplot(x, data, ...)  # S4 method for formula,FLComp stripplot(x, data, ...)  # S4 method for formula,FLQuant histogram(x, data, ...)  # S4 method for formula,FLComp histogram(x, data, ...)  # S4 method for formula,FLQuants histogram(x, data, ...)  # S4 method for formula,FLPar densityplot(x, data, ...)"},{"path":"/reference/lattice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lattice methods — lattice","text":"Plot methods lattice package available object classes FLQuant, FLQuants derived FLComp. See help page lattice full description plot method possible arguments. Plot methods lattice called passing data.frame obtained converting FLR objects using .data.frame. details transformation, see .data.frame-FLCore.","code":""},{"path":"/reference/lattice.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Lattice methods — lattice","text":"barchart(x, data, ...) bwplot(x, data, ...) densityplot(x, data, ...) dotplot(x, data, ...) histogram(x, data, ...) stripplot(x, data, ...) xyplot(x, data, ...)","code":""},{"path":[]},{"path":"/reference/lattice.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lattice methods — lattice","text":"FLR Team","code":""},{"path":"/reference/lattice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lattice methods — lattice","text":"","code":"data(ple4) # xyplot on FLQuant   xyplot(data~year|age, catch.n(ple4)[, 1:20])    xyplot(data~year|as.factor(age), catch.n(ple4)[, 1:20], type='b', pch=19,     cex=0.5)   # bwplot on FLQuant with iter...   flq <- rnorm(100, catch.n(ple4)[, 1:20], catch.n(ple4)[,1:20])   bwplot(data~year|as.factor(age), flq)  # ...now with same style modifications   bwplot(data~year|as.factor(age), flq, scales=list(relation='free',     x=list(at=seq(1, 20, by=5),     labels=dimnames(catch.n(ple4)[,1:20])$year[seq(1, 20, by=5)])),     cex=0.5, strip=strip.custom(strip.names=TRUE, strip.levels=TRUE,     var.name='age'))"},{"path":"/reference/length-based-indicators.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate quantile(s) of length distribution — indicators.len","title":"Calculate quantile(s) of length distribution — indicators.len","text":"z = (k * (linf - lmean)) / (lmean - lc) lmean = sum(naa * len) / sum(naa) lc, length first capture","code":""},{"path":"/reference/length-based-indicators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate quantile(s) of length distribution — indicators.len","text":"","code":"indicators.len(   object,   indicators = \"lbar\",   model = vonbert,   params,   cv = 0.1,   lmax = 1.25,   bin = 1,   n = 500,   metric = catch.n,   ... )  lenquantile(x, quantile = 0.5)  lmax5(x)  l95(x)  l25(x)  lc50(x)  lmode(x)  lbar(x)  lmean(x)  lmaxy(x, lenwt)  pmega(x, linf, lopt = linf * 2/3)  bheqz(x, linf, k, t0, lc = lc50(x))"},{"path":"/reference/length-based-indicators.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate quantile(s) of length distribution — indicators.len","text":"Kell, L.T., Minto, C., Gerritsen, H.D. 2022. Evaluation skill length-based indicators identify stock status trends. ICES Journal Marine Science. doiu: 10.1093/icesjms/fsac043. ICES. 2015. Report Fifth Workshop Development Quantitative Assessment Methodologies based Life-history Traits, Exploitation Characteristics Relevant Parameters Data-limited Stocks (WKLIFE V), 5–9 October 2015, Lisbon, Portugal. ICES CM 2015/ACOM:56. 157 pp. ICES. 2020. Tenth Workshop Development Quantitative Assessment Methodologies based LIFE-history traits, exploitation characteristics, relevant parameters data-limited stocks (WKLIFE X). ICES Scientific Reports. 2:98. 72 pp. http://doi.org/10.17895/ices.pub.5985","code":""},{"path":"/reference/length-based-indicators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate quantile(s) of length distribution — indicators.len","text":"","code":"data(ple4) indicators.len(ple4, indicators=c('lbar', 'lmaxy'),   params=FLPar(linf=132, k=0.080, t0=-0.35), metric='catch.n',   lenwt=FLPar(a=0.01030, b=2.975)) #> $lbar #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 35.550 33.606 32.102 29.352 30.964 33.018 35.150 32.692 29.956 33.084 #>      year #> len   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 36.796 37.600 35.584 32.714 35.242 33.678 28.788 26.812 26.800 27.938 #>      year #> len   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 26.366 26.542 26.316 26.494 26.544 23.156 24.220 25.302 25.314 21.378 #>      year #> len   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 25.054 27.338 29.332 30.662 29.980 30.346 31.560 31.676 29.336 28.334 #>      year #> len   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 25.476 26.092 29.632 29.824 30.736 25.978 26.878 26.526 26.298 26.606 #>      year #> len   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 25.320 26.226 27.014 26.302 28.692 29.774 30.448 28.302 30.774 31.854 #>      year #> len   2017   #>   all 32.812 #>  #> units:  cm  #>  #> $lmaxy #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 #>   all 60   63   86   57   76   73   81   74   77   33   77   50   55   59   #>      year #> len   1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 #>   all 72   68   83   56   74   76   42   53   54   68   75   76   39   34   #>      year #> len   1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 #>   all 37   65   24   32   38   43   56   58   61   47   49   52   31   23   #>      year #> len   1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 #>   all 31   41   48   42   65   34   73   46   43   51   51   35   47   52   #>      year #> len   2013 2014 2015 2016 2017 #>   all 58   69   48   77   59   #>  #> units:  cm  #>  indicators.len(ple4, indicators=c('pmega'),   params=FLPar(linf=60, k=2.29e-01, t0=-1.37), metric='catch.n') #> $pmega #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957  1958  1959  1960  1961  1962  1963  1964  1965  1966  1967  1968  #>   all 0.338 0.312 0.242 0.242 0.234 0.246 0.272 0.290 0.182 0.160 0.290 0.388 #>      year #> len   1969  1970  1971  1972  1973  1974  1975  1976  1977  1978  1979  1980  #>   all 0.394 0.332 0.274 0.318 0.188 0.118 0.118 0.220 0.146 0.136 0.178 0.124 #>      year #> len   1981  1982  1983  1984  1985  1986  1987  1988  1989  1990  1991  1992  #>   all 0.132 0.112 0.082 0.116 0.128 0.106 0.070 0.138 0.162 0.232 0.190 0.218 #>      year #> len   1993  1994  1995  1996  1997  1998  1999  2000  2001  2002  2003  2004  #>   all 0.236 0.216 0.238 0.160 0.088 0.088 0.106 0.204 0.246 0.156 0.122 0.130 #>      year #> len   2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015  2016  #>   all 0.138 0.134 0.120 0.122 0.158 0.144 0.152 0.180 0.200 0.184 0.218 0.254 #>      year #> len   2017  #>   all 0.286 #>  #> units:  NA  #>  data(ple4.index) indicators.len(ple4.index, indicators=c('lbar', 'lmean'),   params=FLPar(linf=132, k=0.080, t0=-0.35), metric='index') #> $lbar #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1996   1997   1998   1999   2000   2001   2002   2003   2004   2005   #>   all 21.474 16.932 22.240 21.960 21.178 22.754 16.140 22.016 21.782 21.138 #>      year #> len   2006   2007   2008   2009   2010   2011   2012   2013   2014   2015   #>   all 21.384 20.892 20.382 21.486 21.592 20.920 26.442 24.016 22.316 26.860 #>      year #> len   2016   2017   #>   all 25.614 21.344 #>  #> units:  cm  #>  #> $lmean #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1996   1997   1998   1999   2000   2001   2002   2003   2004   2005   #>   all 23.959 23.189 29.558 27.101 24.385 27.282 19.093 24.127 27.929 24.024 #>      year #> len   2006   2007   2008   2009   2010   2011   2012   2013   2014   2015   #>   all 24.731 28.636 26.214 27.919 28.730 27.146 30.636 27.339 26.050 29.328 #>      year #> len   2016   2017   #>   all 29.053 27.904 #>  #> units:  cm  #>  # ialk <- invALK(params=FLPar(linf = 60, k = 2.29e-01, t0 = -1.37e+00),   model=vonbert, age=1:10, lmax=1.2) samps <- lenSamples(catch.n(ple4), invALK=ialk, n=250) lenquantile(samps, 0.50) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 #>   all 39.0 40.0 36.0 35.0 35.0 38.0 38.0 35.0 35.0 38.0 40.0 40.0 41.0 36.0 #>      year #> len   1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 #>   all 38.0 39.0 32.0 33.0 35.0 35.0 33.0 33.0 33.0 35.0 34.0 31.0 33.0 34.0 #>      year #> len   1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 #>   all 33.5 28.0 32.0 36.0 35.0 36.0 35.0 35.0 36.0 37.0 36.0 35.0 33.0 34.0 #>      year #> len   1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 #>   all 37.0 38.0 36.0 35.0 34.0 34.0 32.0 33.0 32.0 34.0 34.0 32.0 33.0 36.5 #>      year #> len   2013 2014 2015 2016 2017 #>   all 36.0 37.0 37.0 37.0 38.0 #>  #> units:  NA  lmax5(samps) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 59.923 59.929 57.357 58.154 53.000 56.714 56.071 56.714 54.692 50.471 #>      year #> len   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 55.267 56.643 58.111 57.167 59.062 59.647 59.846 56.333 53.769 57.154 #>      year #> len   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 54.059 54.467 53.533 55.643 55.692 53.786 54.692 47.842 54.000 50.929 #>      year #> len   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 48.923 51.000 49.000 53.188 54.067 51.750 53.625 55.769 57.846 53.000 #>      year #> len   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 55.214 49.308 50.667 53.929 53.308 55.769 53.692 52.000 51.286 50.357 #>      year #> len   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 49.429 52.214 52.000 52.692 51.235 55.429 55.846 55.333 54.857 55.571 #>      year #> len   2017   #>   all 56.600 #>  #> units:  cm  l95(samps) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957  1958  1959  1960  1961  1962  1963  1964  1965  1966  1967  1968  #>   all 56.55 57.00 55.00 55.55 49.55 52.00 52.00 52.00 51.55 48.00 52.00 55.00 #>      year #> len   1969  1970  1971  1972  1973  1974  1975  1976  1977  1978  1979  1980  #>   all 56.00 55.00 57.00 56.00 54.55 51.00 49.55 50.55 51.00 52.00 51.00 53.00 #>      year #> len   1981  1982  1983  1984  1985  1986  1987  1988  1989  1990  1991  1992  #>   all 50.55 48.00 49.10 45.00 49.55 49.00 46.10 48.00 47.00 50.00 51.00 49.00 #>      year #> len   1993  1994  1995  1996  1997  1998  1999  2000  2001  2002  2003  2004  #>   all 51.00 52.55 51.55 51.00 51.00 45.55 47.00 49.00 50.55 52.10 48.55 47.10 #>      year #> len   2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015  2016  #>   all 49.00 47.00 47.00 49.00 48.00 47.55 48.00 53.00 50.55 52.00 53.00 53.00 #>      year #> len   2017  #>   all 53.00 #>  #> units:  cm  l25(samps) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957  1958  1959  1960  1961  1962  1963  1964  1965  1966  1967  1968  #>   all 33.00 31.00 29.00 30.00 28.00 33.00 34.00 27.00 31.00 34.00 34.00 32.00 #>      year #> len   1969  1970  1971  1972  1973  1974  1975  1976  1977  1978  1979  1980  #>   all 32.00 28.25 32.00 32.00 26.00 27.00 29.00 27.25 26.00 26.00 26.25 28.00 #>      year #> len   1981  1982  1983  1984  1985  1986  1987  1988  1989  1990  1991  1992  #>   all 28.00 26.00 29.00 27.00 26.00 25.00 28.00 31.00 30.00 30.00 29.00 30.00 #>      year #> len   1993  1994  1995  1996  1997  1998  1999  2000  2001  2002  2003  2004  #>   all 30.00 30.00 29.00 30.00 28.00 30.00 32.00 31.00 31.00 28.00 30.00 27.00 #>      year #> len   2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015  2016  #>   all 27.25 27.00 27.00 28.25 28.00 27.00 28.00 32.00 30.00 29.00 30.00 29.00 #>      year #> len   2017  #>   all 31.00 #>  #> units:  cm  lc50(samps) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 #>   all 22.0 21.5 18.5 16.0 18.0 20.5 18.0 12.5 15.5 18.5 20.5 21.5 22.5 13.5 #>      year #> len   1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 #>   all 19.0 21.0 13.0 13.0 18.5 13.5 13.5 12.0 13.0 17.0 16.5 12.0 17.0 14.0 #>      year #> len   1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 #>   all 13.0 12.5 16.0 18.0 19.0 18.5 21.0 17.0 16.0 20.0 16.5 17.5 13.0 16.0 #>      year #> len   1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 #>   all 18.5 20.5 17.5 19.0 16.0 17.5 17.0 12.5 13.0 17.5 17.0 13.5 15.5 16.5 #>      year #> len   2013 2014 2015 2016 2017 #>   all 18.0 13.5 18.5 19.0 17.0 #>  #> units:  cm  lmode(samps) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 #>   all 44   43   37   32   36   41   36   25   31   37   41   43   45   27   #>      year #> len   1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 #>   all 38   42   26   26   37   27   27   24   26   34   33   24   34   28   #>      year #> len   1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 #>   all 26   25   32   36   38   37   42   34   32   40   33   35   26   32   #>      year #> len   1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 #>   all 37   41   35   38   32   35   34   25   26   35   34   27   31   33   #>      year #> len   2013 2014 2015 2016 2017 #>   all 36   27   37   38   34   #>  #> units:  cm  lbar(samps) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 39.332 39.572 37.012 37.044 35.240 38.536 39.280 35.888 36.504 37.748 #>      year #> len   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 39.492 39.780 40.476 37.484 39.324 39.844 34.932 34.444 34.644 35.436 #>      year #> len   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 34.336 34.552 34.228 35.368 34.676 32.860 33.776 33.644 33.924 30.616 #>      year #> len   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 33.252 35.972 35.224 35.972 36.064 35.716 36.320 36.912 36.608 35.740 #>      year #> len   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 34.508 34.296 36.112 36.856 36.520 34.904 35.208 34.020 33.548 33.484 #>      year #> len   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 33.452 34.888 34.720 33.800 34.300 37.580 36.488 36.988 37.116 36.736 #>      year #> len   2017   #>   all 38.076 #>  #> units:  cm  lmean(samps) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 51.060 51.023 46.538 43.079 43.577 47.686 44.551 38.249 39.960 42.477 #>      year #> len   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 46.622 49.931 51.652 41.600 49.000 50.208 39.374 37.350 44.096 38.979 #>      year #> len   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 39.530 36.729 37.695 42.437 40.852 34.767 41.304 37.796 37.341 33.994 #>      year #> len   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 38.893 42.396 43.080 43.910 47.762 42.209 41.312 46.659 42.824 42.771 #>      year #> len   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 37.137 38.626 42.422 46.122 42.478 45.013 39.389 41.476 41.862 35.900 #>      year #> len   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 35.795 42.430 41.711 37.657 39.229 41.880 43.508 40.091 45.188 45.580 #>      year #> len   2017   #>   all 44.797 #>  #> units:  cm  # Linf(ple4) = 60 lmean(samps) / (0.75 * lc50(samps) + 0.25 * 60) # #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 1.6209 1.6393 1.6117 1.5955 1.5290 1.5699 1.5632 1.5692 1.5009 1.4710 #>      year #> len   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 1.5349 1.6042 1.6205 1.6557 1.6752 1.6328 1.5909 1.5091 1.5271 1.5514 #>      year #> len   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 1.5734 1.5304 1.5230 1.5292 1.4923 1.4486 1.4884 1.4822 1.5087 1.3946 #>      year #> len   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 1.4405 1.4876 1.4728 1.5207 1.5532 1.5211 1.5301 1.5553 1.5644 1.5208 #>      year #> len   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 1.5005 1.4306 1.4692 1.5184 1.5103 1.5389 1.4589 1.4747 1.5085 1.4728 #>      year #> len   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 1.4463 1.5086 1.5031 1.4988 1.4734 1.5299 1.5266 1.5957 1.5649 1.5583 #>      year #> len   2017   #>   all 1.6143 #>  #> units:    lenwt <- FLPar(a=0.01030, b=2.975) lmaxy(samps, lenwt) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 #>   all 44   56   56   53   44   48   47   46   47   39   41   51   56   49   #>      year #> len   1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 #>   all 53   56   46   46   37   43   51   50   55   44   41   44   34   43   #>      year #> len   1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 #>   all 38   50   37   41   43   37   42   48   39   40   45   51   44   32   #>      year #> len   1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 #>   all 41   41   43   40   37   35   45   40   39   46   44   44   48   45   #>      year #> len   2013 2014 2015 2016 2017 #>   all 44   48   44   38   46   #>  #> units:  cm  pmega(samps, linf=60) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957  1958  1959  1960  1961  1962  1963  1964  1965  1966  1967  1968  #>   all 0.320 0.352 0.264 0.232 0.196 0.284 0.320 0.228 0.196 0.156 0.288 0.348 #>      year #> len   1969  1970  1971  1972  1973  1974  1975  1976  1977  1978  1979  1980  #>   all 0.436 0.320 0.328 0.356 0.232 0.168 0.128 0.172 0.196 0.204 0.176 0.212 #>      year #> len   1981  1982  1983  1984  1985  1986  1987  1988  1989  1990  1991  1992  #>   all 0.120 0.124 0.100 0.080 0.148 0.100 0.084 0.152 0.128 0.176 0.220 0.192 #>      year #> len   1993  1994  1995  1996  1997  1998  1999  2000  2001  2002  2003  2004  #>   all 0.188 0.212 0.240 0.180 0.148 0.084 0.136 0.192 0.204 0.140 0.144 0.096 #>      year #> len   2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015  2016  #>   all 0.128 0.128 0.120 0.164 0.156 0.148 0.128 0.236 0.212 0.248 0.260 0.220 #>      year #> len   2017  #>   all 0.288 #>  #> units:  NA  linf <- 60 k <- 2.29e-01 t0 <- -1.37e+00 bheqz(samps, linf = 60, k = 2.29e-01, t0 = -1.37e+00) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> len   1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   all 0.27308 0.25885 0.28437 0.24981 0.32889 0.27252 0.22297 0.23609 0.25617 #>      year #> len   1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   all 0.26474 0.24728 0.25330 0.24872 0.21498 0.23297 0.24494 0.26174 0.27291 #>      year #> len   1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   all 0.35967 0.25643 0.28206 0.25841 0.27802 0.30710 0.31906 0.29794 0.35797 #>      year #> len   1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   all 0.30725 0.28539 0.37144 0.35505 0.30617 0.34971 0.31493 0.36387 0.29713 #>      year #> len   1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   all 0.26687 0.31263 0.26640 0.30458 0.27142 0.32172 0.31060 0.32404 0.28270 #>      year #> len   2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   all 0.36135 0.29557 0.36013 0.36606 0.28937 0.29726 0.33073 0.32670 0.29556 #>      year #> len   2011    2012    2013    2014    2015    2016    2017    #>   all 0.31305 0.24356 0.29123 0.22436 0.28150 0.30038 0.23821 #>  #> units:  z"},{"path":"/reference/mase.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mean absolute scaled error (MASE) — mase","title":"Compute mean absolute scaled error (MASE) — mase","text":"Franses, PH. \"note Mean Absolute Scaled Error\". International Journal Forecasting. 32 (1): 20–22. doi:10.1016/j.ijforecast.2015.03.008.","code":""},{"path":"/reference/mase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mean absolute scaled error (MASE) — mase","text":"","code":"mase(ref, preds, ...)  # S4 method for FLQuant,FLQuants mase(ref, preds, order = c(\"inverse\", \"ahead\"))  # S4 method for FLIndices,list mase(ref, preds, order = \"inverse\", wt = \"missing\")"},{"path":"/reference/mase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mean absolute scaled error (MASE) — mase","text":"ref Reference naive prediction. preds Predicitions compare reference. ... Extra arguments. order predictions 'inverse' (default) 'ahead' order. wt Mean weights--age use indices.","code":""},{"path":"/reference/mase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute mean absolute scaled error (MASE) — mase","text":"numeric vector length 'preds'.","code":""},{"path":"/reference/mbar.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes the mean natural mortality acros the fully selected ages — mbar","title":"Computes the mean natural mortality acros the fully selected ages — mbar","text":"Equivalent mean fishing mortality metric returned 'fbar', 'mbar' calculates mean natural mortality across ages inside range defined 'minfbar' 'maxfbar'.","code":""},{"path":"/reference/mbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes the mean natural mortality acros the fully selected ages — mbar","text":"","code":"mbar(object, ...)"},{"path":"/reference/mbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes the mean natural mortality acros the fully selected ages — mbar","text":"object object class 'FLStock'.","code":""},{"path":"/reference/mbar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes the mean natural mortality acros the fully selected ages — mbar","text":"object class 'FLQuant'.","code":""},{"path":[]},{"path":"/reference/mbar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computes the mean natural mortality acros the fully selected ages — mbar","text":"FLR Team, proposal H. Winker.","code":""},{"path":"/reference/mbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes the mean natural mortality acros the fully selected ages — mbar","text":"","code":"data(ple4) mbar(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 #>   all 0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  #>      year #> age   1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 #>   all 0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  #>      year #> age   1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 #>   all 0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  #>      year #> age   1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 #>   all 0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  #>      year #> age   2013 2014 2015 2016 2017 #>   all 0.1  0.1  0.1  0.1  0.1  #>  #> units:  m"},{"path":"/reference/meanage.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean age in the stock and catch — meanage","title":"Calculate the mean age in the stock and catch — meanage","text":"Average age stock numbers catch--age.","code":""},{"path":"/reference/meanage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean age in the stock and catch — meanage","text":"","code":"meanage(object)  meanageCatch(object)"},{"path":"/reference/meanage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean age in the stock and catch — meanage","text":"object age-structured FLStock object","code":""},{"path":"/reference/meanage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mean age in the stock and catch — meanage","text":"FLQuant object","code":""},{"path":[]},{"path":"/reference/meanage.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the mean age in the stock and catch — meanage","text":"FLR Team","code":""},{"path":"/reference/meanage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the mean age in the stock and catch — meanage","text":"","code":"data(ple4) meanage(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 3.3701 3.0927 2.8481 2.8446 2.8314 3.0497 3.1739 2.1989 2.6302 3.0484 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 3.4364 3.6698 3.4309 3.2344 3.3768 3.5066 2.4345 2.3461 2.5229 2.6956 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 2.4924 2.5153 2.4676 2.3123 2.2926 1.9438 2.1105 2.2616 2.1610 1.7123 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 2.0899 2.3056 2.4954 2.5898 2.6053 2.6104 2.7539 2.7065 2.2867 2.1824 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 1.7042 2.1357 2.4545 2.4326 2.5315 1.9737 2.3744 2.2377 2.4002 2.5499 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 2.3967 2.5570 2.7615 2.7848 2.8323 3.0732 3.1989 3.2561 3.7106 3.8785 #>      year #> age   2017   #>   all 3.6691 #>  #> units:    meanageCatch(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 3.7964 3.5855 3.2694 3.1447 3.1302 3.3322 3.5755 3.1953 3.0029 3.3492 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 3.7326 3.9227 3.7366 3.4898 3.6033 3.7696 2.9311 2.6180 2.6717 2.7726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 2.5455 2.5926 2.6335 2.5959 2.5981 2.2788 2.3092 2.4433 2.3844 1.9562 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 2.3071 2.6216 2.8463 2.9986 3.0417 3.0416 3.1719 3.2368 2.9918 2.7908 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 2.4119 2.4567 2.8526 2.9912 3.0157 2.5489 2.5473 2.5109 2.4774 2.5965 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 2.4881 2.4844 2.5541 2.5761 2.7621 2.9973 3.0296 2.8830 3.0917 3.2946 #>      year #> age   2017   #>   all 3.3463 #>  #> units:"},{"path":"/reference/meanwt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the mean weight in stock and catch — meanwt","title":"Calculate the mean weight in stock and catch — meanwt","text":"Average weight stock numbers catch--age.","code":""},{"path":"/reference/meanwt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the mean weight in stock and catch — meanwt","text":"","code":"meanwt(object)  meanwtCatch(object)"},{"path":"/reference/meanwt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the mean weight in stock and catch — meanwt","text":"object age-structured FLStock object","code":""},{"path":"/reference/meanwt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the mean weight in stock and catch — meanwt","text":"FLQuant object","code":""},{"path":[]},{"path":"/reference/meanwt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the mean weight in stock and catch — meanwt","text":"FLR Team","code":""},{"path":"/reference/meanwt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the mean weight in stock and catch — meanwt","text":"","code":"data(ple4) meanwt(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957     1958     1959     1960     1961     1962     1963     1964     #>   all 0.229804 0.209509 0.194183 0.194381 0.188814 0.230649 0.226216 0.134802 #>      year #> age   1965     1966     1967     1968     1969     1970     1971     1972     #>   all 0.135785 0.169342 0.212520 0.244181 0.227428 0.215913 0.245069 0.281371 #>      year #> age   1973     1974     1975     1976     1977     1978     1979     1980     #>   all 0.163935 0.156226 0.183468 0.215948 0.200571 0.205154 0.200488 0.192139 #>      year #> age   1981     1982     1983     1984     1985     1986     1987     1988     #>   all 0.171390 0.137971 0.150504 0.165377 0.157026 0.110202 0.125925 0.130644 #>      year #> age   1989     1990     1991     1992     1993     1994     1995     1996     #>   all 0.148002 0.156825 0.165059 0.164132 0.183081 0.185667 0.165751 0.144405 #>      year #> age   1997     1998     1999     2000     2001     2002     2003     2004     #>   all 0.099553 0.114009 0.134794 0.139146 0.162977 0.122374 0.149138 0.143110 #>      year #> age   2005     2006     2007     2008     2009     2010     2011     2012     #>   all 0.145271 0.166274 0.140468 0.158238 0.180285 0.183232 0.162167 0.165686 #>      year #> age   2013     2014     2015     2016     2017     #>   all 0.174146 0.182639 0.172202 0.185288 0.179427 #>  #> units:  kg  meanwtCatch(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   all 0.26024 0.24717 0.22522 0.21683 0.21172 0.25014 0.25589 0.22427 0.16606 #>      year #> age   1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   all 0.18597 0.23136 0.26310 0.24977 0.23587 0.26608 0.30751 0.21009 0.18131 #>      year #> age   1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   all 0.19507 0.22175 0.20568 0.21370 0.21692 0.22542 0.20435 0.17112 0.17109 #>      year #> age   1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   all 0.18336 0.17795 0.13341 0.14539 0.15393 0.17421 0.18640 0.19588 0.19609 #>      year #> age   1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   all 0.21502 0.22586 0.22935 0.19895 0.16687 0.14178 0.16202 0.17385 0.19473 #>      year #> age   2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   all 0.16670 0.16083 0.16410 0.14965 0.17045 0.15079 0.15510 0.16805 0.17199 #>      year #> age   2011    2012    2013    2014    2015    2016    2017    #>   all 0.15975 0.15783 0.16386 0.15751 0.13921 0.15041 0.15662 #>  #> units:  kg"},{"path":"/reference/metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract simply-defined metrics from compex objects — metrics","title":"Extract simply-defined metrics from compex objects — metrics","text":"Time series summaries complex objects commonly needed, example plotting inputs outputs class like FLStock. methods allow simple specification metrics means function calls formulas.","code":""},{"path":"/reference/metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract simply-defined metrics from compex objects — metrics","text":"","code":"metrics(object, metrics, ...)  # S4 method for FLComp,list metrics(object, metrics, ...)  # S4 method for FLS,missing metrics(object, metrics, ...)"},{"path":"/reference/metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract simply-defined metrics from compex objects — metrics","text":"object complex FLR object extract time series metrics.","code":""},{"path":"/reference/metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract simply-defined metrics from compex objects — metrics","text":"object, generally class FLQuants.","code":""},{"path":[]},{"path":"/reference/metrics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract simply-defined metrics from compex objects — metrics","text":"FLR Team","code":""},{"path":"/reference/metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract simply-defined metrics from compex objects — metrics","text":"","code":"data(ple4) # missing metrics(ple4) #> $ Rec  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   1  477074  710748  874712  797702  870799  615691  610017 2449900  664500 #>    year #> age 1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   1  579075  428110  418228  666902  671454  433599  367450 1391430 1074920 #>    year #> age 1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   1  787372  674010 1033740  879043  915553 1078660  999968 1935350 1375880 #>    year #> age 1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   1 1302060 1792220 4303680 1910200 1774940 1250510 1083810  981356  854841 #>    year #> age 1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   1  550376  566448  932162  893056 2431310  778427  683151  857525  634808 #>    year #> age 2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   1 1792880  557844 1235790  863893  875191 1379750 1135050 1088820 1444570 #>    year #> age 2011    2012    2013    2014    2015    2016    2017    #>   1 1608190 1278010 1455050 1640700  895620 1211320 1823000 #>  #> units:  1000  #>  #> $ SSB  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  #>  #> $ Catch  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all  78360  88785 105186 117975 119541 126290 140815 147540 151408 162266 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 154474 149820 146178 136619 141226 149390 151515 157994 165392 175881 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 165843 178166 172652 184690 184494 192439 212632 228265 247071 279228 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 308480 315245 292035 250604 218184 192691 179573 151248 132629 131719 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 152195 171240 170662 145998 128107 143807 154029 140056 114551 111864 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 104770 113397 115703 118824 119718 131872 141055 139750 137338 131216 #>      year #> age   2017   #>   all 124922 #>  #> units:  t  #>  #> $ F  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   all 0.24168 0.27866 0.31084 0.32448 0.32519 0.33559 0.36653 0.39417 0.38771 #>      year #> age   1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   all 0.36207 0.34807 0.35412 0.36429 0.36324 0.36702 0.39909 0.45156 0.48039 #>      year #> age   1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   all 0.46091 0.43693 0.44859 0.48847 0.52582 0.54200 0.54057 0.52644 0.51509 #>      year #> age   1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   all 0.52277 0.55052 0.58629 0.61605 0.62993 0.62175 0.60550 0.60009 0.60749 #>      year #> age   1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   all 0.61025 0.59803 0.59798 0.64233 0.71240 0.72432 0.65004 0.58241 0.57161 #>      year #> age   2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   all 0.59392 0.57077 0.47697 0.38686 0.33299 0.29622 0.25465 0.21573 0.19643 #>      year #> age   2011    2012    2013    2014    2015    2016    2017    #>   all 0.19815 0.20738 0.20971 0.20537 0.20084 0.19878 0.19871 #>  #> units:  f  #>  # metrics = function metrics(ple4, metrics=function(x) FLQuants(SSB=ssb(x), REC=rec(x),   F=fbar(x), SSBREC=ssb(x) / rec(x))) #> $ SSB  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  #>  #> $ REC  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   1  477074  710748  874712  797702  870799  615691  610017 2449900  664500 #>    year #> age 1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   1  579075  428110  418228  666902  671454  433599  367450 1391430 1074920 #>    year #> age 1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   1  787372  674010 1033740  879043  915553 1078660  999968 1935350 1375880 #>    year #> age 1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   1 1302060 1792220 4303680 1910200 1774940 1250510 1083810  981356  854841 #>    year #> age 1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   1  550376  566448  932162  893056 2431310  778427  683151  857525  634808 #>    year #> age 2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   1 1792880  557844 1235790  863893  875191 1379750 1135050 1088820 1444570 #>    year #> age 2011    2012    2013    2014    2015    2016    2017    #>   1 1608190 1278010 1455050 1640700  895620 1211320 1823000 #>  #> units:  1000  #>  #> $ F  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   all 0.24168 0.27866 0.31084 0.32448 0.32519 0.33559 0.36653 0.39417 0.38771 #>      year #> age   1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   all 0.36207 0.34807 0.35412 0.36429 0.36324 0.36702 0.39909 0.45156 0.48039 #>      year #> age   1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   all 0.46091 0.43693 0.44859 0.48847 0.52582 0.54200 0.54057 0.52644 0.51509 #>      year #> age   1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   all 0.52277 0.55052 0.58629 0.61605 0.62993 0.62175 0.60550 0.60009 0.60749 #>      year #> age   1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   all 0.61025 0.59803 0.59798 0.64233 0.71240 0.72432 0.65004 0.58241 0.57161 #>      year #> age   2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   all 0.59392 0.57077 0.47697 0.38686 0.33299 0.29622 0.25465 0.21573 0.19643 #>      year #> age   2011    2012    2013    2014    2015    2016    2017    #>   all 0.19815 0.20738 0.20971 0.20537 0.20084 0.19878 0.19871 #>  #> units:  f  #>  #> $ SSBREC  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957     1958     1959     1960     1961     1962     1963     1964     #>   all 0.717338 0.500001 0.413987 0.476434 0.449456 0.783258 0.722370 0.175711 #>      year #> age   1965     1966     1967     1968     1969     1970     1971     1972     #>   all 0.577251 0.698555 1.107047 1.097433 0.604084 0.551747 0.833974 0.996406 #>      year #> age   1973     1974     1975     1976     1977     1978     1979     1980     #>   all 0.217305 0.277317 0.383246 0.487716 0.318374 0.372614 0.330151 0.295820 #>      year #> age   1981     1982     1983     1984     1985     1986     1987     1988     #>   all 0.290790 0.146853 0.246561 0.282054 0.220210 0.094796 0.246546 0.239273 #>      year #> age   1989     1990     1991     1992     1993     1994     1995     1996     #>   all 0.358438 0.365800 0.363728 0.364314 0.508673 0.412185 0.238374 0.227747 #>      year #> age   1997     1998     1999     2000     2001     2002     2003     2004     #>   all 0.084295 0.305568 0.320792 0.269266 0.368947 0.123769 0.445128 0.188930 #>      year #> age   2005     2006     2007     2008     2009     2010     2011     2012     #>   all 0.293713 0.325012 0.212597 0.327595 0.416071 0.383674 0.357830 0.483203 #>      year #> age   2013     2014     2015     2016     2017     #>   all 0.487920 0.501783 0.864381 0.690530 0.500982 #>  #> units:  kg  #>  # metrics = formula metrics(ple4, metrics=~ssb) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  metrics(ple4, metrics=list(SSB=~ssb)) #> $ SSB  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  #>  metrics(ple4, metrics=list(SBMSY=~ssb/SBMSY), FLPar(SBMSY=3.87e4)) #> $ SBMSY  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   all  8.8430  9.1828  9.3571  9.8205 10.1133 12.4611 11.3865 11.1234  9.9117 #>      year #> age   1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   all 10.4526 12.2465 11.8599 10.4099  9.5729  9.3439  9.4607  7.8130  7.7027 #>      year #> age   1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   all  7.7973  8.4942  8.5043  8.4637  7.8106  8.2452  7.5137  7.3440  8.7658 #>      year #> age   1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   all  9.4897 10.1981 10.5419 12.1693 10.9741 11.5822 10.2444  9.2234  8.0473 #>      year #> age   1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   all  7.2342  6.0331  5.7417  5.2556  5.2958  6.1463  5.6628  5.9665  6.0520 #>      year #> age   2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   all  5.7339  6.4163  6.0330  6.5565  7.3501  7.5796  9.6082 11.7061 14.3216 #>      year #> age   2011    2012    2013    2014    2015    2016    2017    #>   all 14.8697 15.9571 18.3449 21.2733 20.0041 21.6138 23.5992 #>  #> units:  t  #>  # metrics = list metrics(ple4, metrics=list(SSB=ssb, REC=rec, F=fbar)) #> $ SSB  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  #>  #> $ REC  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   1  477074  710748  874712  797702  870799  615691  610017 2449900  664500 #>    year #> age 1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   1  579075  428110  418228  666902  671454  433599  367450 1391430 1074920 #>    year #> age 1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   1  787372  674010 1033740  879043  915553 1078660  999968 1935350 1375880 #>    year #> age 1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   1 1302060 1792220 4303680 1910200 1774940 1250510 1083810  981356  854841 #>    year #> age 1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   1  550376  566448  932162  893056 2431310  778427  683151  857525  634808 #>    year #> age 2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   1 1792880  557844 1235790  863893  875191 1379750 1135050 1088820 1444570 #>    year #> age 2011    2012    2013    2014    2015    2016    2017    #>   1 1608190 1278010 1455050 1640700  895620 1211320 1823000 #>  #> units:  1000  #>  #> $ F  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   all 0.24168 0.27866 0.31084 0.32448 0.32519 0.33559 0.36653 0.39417 0.38771 #>      year #> age   1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   all 0.36207 0.34807 0.35412 0.36429 0.36324 0.36702 0.39909 0.45156 0.48039 #>      year #> age   1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   all 0.46091 0.43693 0.44859 0.48847 0.52582 0.54200 0.54057 0.52644 0.51509 #>      year #> age   1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   all 0.52277 0.55052 0.58629 0.61605 0.62993 0.62175 0.60550 0.60009 0.60749 #>      year #> age   1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   all 0.61025 0.59803 0.59798 0.64233 0.71240 0.72432 0.65004 0.58241 0.57161 #>      year #> age   2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   all 0.59392 0.57077 0.47697 0.38686 0.33299 0.29622 0.25465 0.21573 0.19643 #>      year #> age   2011    2012    2013    2014    2015    2016    2017    #>   all 0.19815 0.20738 0.20971 0.20537 0.20084 0.19878 0.19871 #>  #> units:  f  #>  metrics(ple4, metrics=list(SSB=~ssb, REC=rec, F=fbar)) #> $ SSB  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  #>  #> $ REC  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   1  477074  710748  874712  797702  870799  615691  610017 2449900  664500 #>    year #> age 1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   1  579075  428110  418228  666902  671454  433599  367450 1391430 1074920 #>    year #> age 1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   1  787372  674010 1033740  879043  915553 1078660  999968 1935350 1375880 #>    year #> age 1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   1 1302060 1792220 4303680 1910200 1774940 1250510 1083810  981356  854841 #>    year #> age 1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   1  550376  566448  932162  893056 2431310  778427  683151  857525  634808 #>    year #> age 2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   1 1792880  557844 1235790  863893  875191 1379750 1135050 1088820 1444570 #>    year #> age 2011    2012    2013    2014    2015    2016    2017    #>   1 1608190 1278010 1455050 1640700  895620 1211320 1823000 #>  #> units:  1000  #>  #> $ F  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   all 0.24168 0.27866 0.31084 0.32448 0.32519 0.33559 0.36653 0.39417 0.38771 #>      year #> age   1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   all 0.36207 0.34807 0.35412 0.36429 0.36324 0.36702 0.39909 0.45156 0.48039 #>      year #> age   1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   all 0.46091 0.43693 0.44859 0.48847 0.52582 0.54200 0.54057 0.52644 0.51509 #>      year #> age   1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   all 0.52277 0.55052 0.58629 0.61605 0.62993 0.62175 0.60550 0.60009 0.60749 #>      year #> age   1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   all 0.61025 0.59803 0.59798 0.64233 0.71240 0.72432 0.65004 0.58241 0.57161 #>      year #> age   2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   all 0.59392 0.57077 0.47697 0.38686 0.33299 0.29622 0.25465 0.21573 0.19643 #>      year #> age   2011    2012    2013    2014    2015    2016    2017    #>   all 0.19815 0.20738 0.20971 0.20537 0.20084 0.19878 0.19871 #>  #> units:  f  #>"},{"path":"/reference/mohnMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a matrix to compute Mohn's rho for a single metric — mohnMatrix","title":"Generate a matrix to compute Mohn's rho for a single metric — mohnMatrix","text":"common measure strength stock assessment retrospective patterns Mohn's rho. function carry calculation returns matrix metrics value n restrospective runs, columns, n + 2 years, rows.","code":""},{"path":"/reference/mohnMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a matrix to compute Mohn's rho for a single metric — mohnMatrix","text":"","code":"mohnMatrix(stocks, metric = \"fbar\", ...)"},{"path":"/reference/mohnMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a matrix to compute Mohn's rho for a single metric — mohnMatrix","text":"stocks FLStocks object restrospective analysis metric Metric computed, character vector function","code":""},{"path":"/reference/mohnMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a matrix to compute Mohn's rho for a single metric — mohnMatrix","text":"metrics n + 2 x n, n numbers objects stocks.","code":""},{"path":"/reference/msy-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"msy: A series of methods to extract or compute MSY-based reference points — msy","title":"msy: A series of methods to extract or compute MSY-based reference points — msy","text":"Reference points based equilibirum calculations Maximum Sustainable Yield (MSY) computed various FLR packages. methods' generics defined convenience. Please refer help pages particular methods details","code":""},{"path":"/reference/msy-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"msy: A series of methods to extract or compute MSY-based reference points — msy","text":"","code":"msy(x, ...)  bmsy(x, ...)  sbmsy(x, ...)  fmsy(x, ...)"},{"path":"/reference/msy-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"msy: A series of methods to extract or compute MSY-based reference points — msy","text":"x input object extract compute reference point","code":""},{"path":"/reference/msy-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"msy: A series of methods to extract or compute MSY-based reference points — msy","text":"value requested reference point, 'FLPar'","code":""},{"path":"/reference/msy-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"msy: A series of methods to extract or compute MSY-based reference points — msy","text":"four methods provide following parameter estimates: msy Maximum Sustainable Yield (MSY) fmsy Fishing mortality level expected produce average MSY bmsy Total biomass produce MSY sbmsy Spawning biomass produce MSY","code":""},{"path":[]},{"path":"/reference/msy-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"msy: A series of methods to extract or compute MSY-based reference points — msy","text":"FLR Team","code":""},{"path":"/reference/names.html","id":null,"dir":"Reference","previous_headings":"","what":"Method names — names","title":"Method names — names","text":"names method returns names dimnames object. classes, names attribute can modified directly using names<-.","code":""},{"path":"/reference/names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method names — names","text":"","code":"# S4 method for FLArray names(x)  # S4 method for FLPar names(x)  # S4 method for FLPar,character names(x) <- value"},{"path":"/reference/names.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method names — names","text":"names(x) names<-(x, value)","code":""},{"path":[]},{"path":"/reference/names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method names — names","text":"FLR Team","code":""},{"path":"/reference/names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method names — names","text":"","code":"# FLQuant data(ple4) names(catch.n(ple4)) #> [1] \"age\"    \"year\"   \"unit\"   \"season\" \"area\"   \"iter\"    # Contrast this with dimnames(catch.n(ple4)) #> $age #>  [1] \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" #>  #> $year #>  [1] \"1957\" \"1958\" \"1959\" \"1960\" \"1961\" \"1962\" \"1963\" \"1964\" \"1965\" \"1966\" #> [11] \"1967\" \"1968\" \"1969\" \"1970\" \"1971\" \"1972\" \"1973\" \"1974\" \"1975\" \"1976\" #> [21] \"1977\" \"1978\" \"1979\" \"1980\" \"1981\" \"1982\" \"1983\" \"1984\" \"1985\" \"1986\" #> [31] \"1987\" \"1988\" \"1989\" \"1990\" \"1991\" \"1992\" \"1993\" \"1994\" \"1995\" \"1996\" #> [41] \"1997\" \"1998\" \"1999\" \"2000\" \"2001\" \"2002\" \"2003\" \"2004\" \"2005\" \"2006\" #> [51] \"2007\" \"2008\" \"2009\" \"2010\" \"2011\" \"2012\" \"2013\" \"2014\" \"2015\" \"2016\" #> [61] \"2017\" #>  #> $unit #> [1] \"unique\" #>  #> $season #> [1] \"all\" #>  #> $area #> [1] \"unique\" #>  #> $iter #> [1] \"1\" #>"},{"path":"/reference/operators.html","id":null,"dir":"Reference","previous_headings":"","what":"FLQuant arithmetic operators that extend objects — %+%","title":"FLQuant arithmetic operators that extend objects — %+%","text":"Arithmetic operations two FLQuant objects using standars operators (+, -, *, /, ^, see Arith) need dimensions objects match. requirement relaxed using percent version five operators: %+%, %-%, %*%, %/% %^%.","code":""},{"path":"/reference/operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FLQuant arithmetic operators that extend objects — %+%","text":"","code":"e1 %+% e2  x %-% y  x %^% y  # S4 method for FLQuant,FLQuant %*%(x, y)  # S4 method for FLQuant,FLQuant %/%(e1, e2)  # S4 method for FLQuant,FLQuant %+%(e1, e2)  # S4 method for FLQuant,FLQuant %-%(x, y)  # S4 method for FLQuant,FLQuant %^%(x, y)  # S4 method for FLPar,FLQuant %*%(x, y)  # S4 method for FLPar,FLQuant %/%(e1, e2)  # S4 method for FLPar,FLQuant %+%(e1, e2)  # S4 method for FLPar,FLQuant %-%(x, y)  # S4 method for FLPar,FLQuant %^%(x, y)  # S4 method for FLQuant,FLPar %*%(x, y)  # S4 method for FLQuant,FLPar %/%(e1, e2)  # S4 method for FLQuant,FLPar %+%(e1, e2)  # S4 method for FLQuant,FLPar %-%(x, y)  # S4 method for FLQuant,FLPar %^%(x, y)  # S4 method for FLPar,FLPar %*%(x, y)  # S4 method for FLPar,FLPar %+%(e1, e2)  # S4 method for FLPar,FLPar %-%(x, y)  # S4 method for FLPar,FLPar %/%(e1, e2)  # S4 method for FLPar,FLPar %^%(x, y)  # S4 method for FLQuants,FLPar /(e1, e2)  # S4 method for FLQuants,FLPar *(e1, e2)  # S4 method for FLQuants,FLPars /(e1, e2)  # S4 method for FLQuants,FLPars *(e1, e2)  # S4 method for FLQuants,FLQuants /(e1, e2)  # S4 method for FLQuants,FLQuants *(e1, e2)  # S4 method for FLQuants,FLQuants +(e1, e2)  # S4 method for FLQuants,FLQuants -(e1, e2)"},{"path":"/reference/operators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FLQuant arithmetic operators that extend objects — %+%","text":"objects length one dimensions longer, dimensions extended element--element operation conducted. Dimensions dimnames output larger object. See examples observe behaviour. Please note behaviour already present Arith methods FLArray-derived classes 6th, iter, dimension. original use %*% operator, vector product, available FLQuant objects, can applied array inside , example . Methods operations FLQuant FLPar object match dimensions names dimnames, regardless position.","code":""},{"path":"/reference/operators.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"FLQuant arithmetic operators that extend objects — %+%","text":"x %+% y, x %-% y, x %*% y, e1 %/% e2, x %^% y","code":""},{"path":[]},{"path":"/reference/operators.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"FLQuant arithmetic operators that extend objects — %+%","text":"FLR Team","code":""},{"path":"/reference/operators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FLQuant arithmetic operators that extend objects — %+%","text":"","code":"a <- FLQuant(2, dim=c(3,3,2)) b <- FLQuant(3, dim=c(3,3,1))  # This should fail if (FALSE)  a * b   a %*% b #> An object of class \"FLQuant\" #> , , unit = 1, season = all, area = unique #>  #>      year #> quant 1 2 3 #>     1 6 6 6 #>     2 6 6 6 #>     3 6 6 6 #>  #> , , unit = 2, season = all, area = unique #>  #>      year #> quant 1 2 3 #>     1 6 6 6 #>     2 6 6 6 #>     3 6 6 6 #>  #> units:  NA  a %+% b #> An object of class \"FLQuant\" #> , , unit = 1, season = all, area = unique #>  #>      year #> quant 1 2 3 #>     1 5 5 5 #>     2 5 5 5 #>     3 5 5 5 #>  #> , , unit = 2, season = all, area = unique #>  #>      year #> quant 1 2 3 #>     1 5 5 5 #>     2 5 5 5 #>     3 5 5 5 #>  #> units:  NA  # To use base's %*% vector product, apply it to a matrix from @.Data b@.Data[,,,,,] %*% 1:3 #>       #> quant [,1] #>     1   18 #>     2   18 #>     3   18 # or b[,,drop=TRUE] %*% 1:3 #>       #> quant [,1] #>     1   18 #>     2   18 #>     3   18  # FLPar vs. FLQuant works by dimnames' names flp <- FLPar(2, dimnames=list(params='a', year=2000:2005, iter=1)) flq <- FLQuant(3, dimnames=list(year=2000:2005)) flp %*% flq #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1 2 3 4 5 6 #>   all 6 6 6 6 6 6 #>  #> units:  NA   # Divide each FLQuants element by a 'param' in FLPar, e.g. time series # divide by reference points FLQuants(SSB=FLQuant(2303), F=FLQuant(0.8)) / FLPar(SSB=1560, F=0.4) #> $ SSB  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1      #>   all 1.4763 #>  #> units:  NA  #>  #> $ F  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1 #>   all 2 #>  #> units:  NA / NA  #>   # Product of each FLQuants element by a 'param' in FLPar FLQuants(SSB=FLQuant(2303), F=FLQuant(0.8)) * FLPar(SSB=1560, F=0.4) #> $ SSB  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       #>   all 3592680 #>  #> units:  NA  #>  #> $ F  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1    #>   all 0.32 #>  #> units:  NA * NA  #>  # Divide each FLQuants element by each in FLPars FLQuants(A=FLQuant(2303), B=FLQuant(1287)) /   FLPars(A=FLPar(SBMSY=1560), B=FLPar(SBMSY=1000)) #> $ A  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1      #>   all 1.4763 #>  #> units:  NA  #>  #> $ B  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1     #>   all 1.287 #>  #> units:  NA  #>  # Divide each FLQuants element by each in FLPars FLQuants(A=FLQuant(2303), B=FLQuant(1287)) *   FLPars(A=FLPar(SBMSY=1560), B=FLPar(SBMSY=1000)) #> $ A  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       #>   all 3592680 #>  #> units:  NA  #>  #> $ B  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       #>   all 1287000 #>  #> units:  NA  #>  # Divide each FLQuants element by each in FLPars FLQuants(A=FLQuant(300), B=FLQuant(200)) /   FLQuants(A=FLQuant(3), B=FLQuant(2)) #> $ A  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1   #>   all 100 #>  #> units:  NA  #>  #> $ B  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1   #>   all 100 #>  #> units:  NA  #>  # Divide each FLQuants element by each in FLPars FLQuants(A=FLQuant(100), B=FLQuant(200)) *   FLQuants(A=FLQuant(3), B=FLQuant(2)) #> $ A  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1   #>   all 300 #>  #> units:  NA  #>  #> $ B  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1   #>   all 400 #>  #> units:  NA  #>  # Divide each FLQuants element by each in FLPars FLQuants(A=FLQuant(100), B=FLQuant(200)) *   FLQuants(A=FLQuant(3), B=FLQuant(2)) #> $ A  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1   #>   all 300 #>  #> units:  NA  #>  #> $ B  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1   #>   all 400 #>  #> units:  NA  #>  # Divide each FLQuants element by each in FLPars FLQuants(A=FLQuant(100), B=FLQuant(200)) *   FLQuants(A=FLQuant(3), B=FLQuant(2)) #> $ A  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1   #>   all 300 #>  #> units:  NA  #>  #> $ B  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1   #>   all 400 #>  #> units:  NA  #>"},{"path":"/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Method plot — plot","title":"Method plot — plot","text":"Standard plot methods every FLCore class. FLR plot methods based lattice, attempt show general view object contents.","code":""},{"path":"/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method plot — plot","text":"","code":"# S4 method for FLQuant,missing plot(   x,   xlab = \"year\",   ylab = paste(\"data (\", units(x), \")\", sep = \"\"),   type = \"p\",   ... )  # S4 method for FLStock,missing plot(x, auto.key = TRUE, ...)  # S4 method for FLBiol,missing plot(x, y, ...)  # S4 method for FLIndex,missing plot(x, type = c(\"splom\"), ...)  # S4 method for FLSR,missing plot(x, main = \"Functional form\", log.resid = FALSE, cex = 0.8)  # S4 method for FLPar,missing plot(x, y = \"missing\", ...)"},{"path":"/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method plot — plot","text":"Users encouraged write plotting code make use overloaded lattice methods, example xyplot bwplot. See also lattice-FLCore.","code":""},{"path":"/reference/plot.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method plot — plot","text":"plot(x,y)","code":""},{"path":[]},{"path":"/reference/plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method plot — plot","text":"FLR Team","code":""},{"path":"/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method plot — plot","text":"","code":"data(ple4)  # FLQuant plot(catch.n(ple4)[, 1:20])  plot(catch.n(ple4)[, 1:20], type='b', pch=19, cex=0.5)   # FLStock data(ple4sex) plot(ple4)  plot(ple4sex)   # FLBiol data(ple4.biol) plot(ple4.biol)   # FLIndex data(ple4.index) plot(ple4.index) #> Warning: coercing argument of type 'double' to logical   # FLSR data(nsher) plot(nsher)   # FLPar fpa <- FLPar(a=rnorm(100, 1, 20), b=rlnorm(100, 0.5, 0.2)) plot(fpa)"},{"path":"/reference/predictModel.html","id":null,"dir":"Reference","previous_headings":"","what":"A class for model prediction — predictModel","title":"A class for model prediction — predictModel","text":"Object predictModel class used various FLR classes allow flexible modelling dynamics different biological technological processes.","code":""},{"path":"/reference/predictModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A class for model prediction — predictModel","text":"","code":"# S4 method for FLQuants,formula predictModel(object, model, params = FLPar())  # S4 method for FLQuants,missing predictModel(object, params = FLPar())  # S4 method for FLQuants,character predictModel(object, model, params = FLPar())  # S4 method for FLQuants,`function` predictModel(object, model, params = FLPar())  # S4 method for FLQuants,list predictModel(object, model, params = FLPar())  # S4 method for missing,ANY predictModel(object, model, ...)"},{"path":"/reference/predictModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A class for model prediction — predictModel","text":"dependency life history processes, maturity fecundity, biological environmental factors, can represented objects class via simple model (represented formula) corresponding paramaters (FLPar) inputs (FLQuants).","code":""},{"path":"/reference/predictModel.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A class for model prediction — predictModel","text":".Data Inputs model found enclosing class (FLQuants). model Model representation (formula). params Model paramaters (FLPar).","code":""},{"path":"/reference/predictModel.html","id":"validity","dir":"Reference","previous_headings":"","what":"Validity","title":"A class for model prediction — predictModel","text":"VALIDITY Neque porro quisquam est qui dolorem ipsum. can inspect class validity function using getValidity(getClassDef('predictModel'))","code":""},{"path":"/reference/predictModel.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"A class for model prediction — predictModel","text":"slots class accessor replacement methods defined allow retrieving substituting individual slots. values passed replacement need class slot. numeric vector can also used replacing FLQuant slots, vector used substitute values slot, attributes.","code":""},{"path":"/reference/predictModel.html","id":"constructor","dir":"Reference","previous_headings":"","what":"Constructor","title":"A class for model prediction — predictModel","text":"construction method exists class can take named arguments slots. slots created match requirements class validity.","code":""},{"path":"/reference/predictModel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"A class for model prediction — predictModel","text":"Methods exist various calculations based values stored class: METHOD Neque porro quisquam est qui dolorem ipsum.","code":""},{"path":[]},{"path":"/reference/predictModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A class for model prediction — predictModel","text":"FLR Team","code":""},{"path":"/reference/predictModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A class for model prediction — predictModel","text":"","code":"fec <- FLQuants(fec=FLQuant(rlnorm(10, 20, 5),   dimnames=list(year=2000:2009), units='1')) predictModel(fec, model=~fec) #> $ fec  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 2000       2001       2002       2003       2004       2005       #>   all 9.8574e+11 1.9984e+07 2.2304e+11 1.7749e+07 1.1891e+08 1.7651e+09 #>      year #> quant 2006       2007       2008       2009       #>   all 1.8672e+10 4.3596e+09 1.2268e+11 4.0840e+06 #>  #> units:  1  #>  #> model:   #> ~fec #> <environment: R_EmptyEnv> #>  #> params:   #> An object of class \"FLPar\" #> params #>     #> NA  #> units:  NA  predictModel(fec) #> $ fec  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 2000       2001       2002       2003       2004       2005       #>   all 9.8574e+11 1.9984e+07 2.2304e+11 1.7749e+07 1.1891e+08 1.7651e+09 #>      year #> quant 2006       2007       2008       2009       #>   all 1.8672e+10 4.3596e+09 1.2268e+11 4.0840e+06 #>  #> units:  1  #>  #> model:   #> ~NA #> <environment: R_EmptyEnv> #>  #> params:   #> An object of class \"FLPar\" #> params #>     #> NA  #> units:  NA  predictModel(fec, model=\"bevholt\") #> $ fec  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 2000       2001       2002       2003       2004       2005       #>   all 9.8574e+11 1.9984e+07 2.2304e+11 1.7749e+07 1.1891e+08 1.7651e+09 #>      year #> quant 2006       2007       2008       2009       #>   all 1.8672e+10 4.3596e+09 1.2268e+11 4.0840e+06 #>  #> units:  1  #>  #> model:   #> rec ~ a * ssb/(b + ssb) #> <environment: R_EmptyEnv> #>  #> params:   #> An object of class \"FLPar\" #> params #>     #> NA  #> units:  NA  predictModel(fec, model=bevholt) #> $ fec  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 2000       2001       2002       2003       2004       2005       #>   all 9.8574e+11 1.9984e+07 2.2304e+11 1.7749e+07 1.1891e+08 1.7651e+09 #>      year #> quant 2006       2007       2008       2009       #>   all 1.8672e+10 4.3596e+09 1.2268e+11 4.0840e+06 #>  #> units:  1  #>  #> model:   #> rec ~ a * ssb/(b + ssb) #> <environment: R_EmptyEnv> #>  #> params:   #> An object of class \"FLPar\" #> params #>     #> NA  #> units:  NA  predictModel(fec, model=bevholt()) #> $ fec  #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 2000       2001       2002       2003       2004       2005       #>   all 9.8574e+11 1.9984e+07 2.2304e+11 1.7749e+07 1.1891e+08 1.7651e+09 #>      year #> quant 2006       2007       2008       2009       #>   all 1.8672e+10 4.3596e+09 1.2268e+11 4.0840e+06 #>  #> units:  1  #>  #> model:   #> rec ~ a * ssb/(b + ssb) #> <environment: R_EmptyEnv> #>  #> params:   #> An object of class \"FLPar\" #> params #>     #> NA  #> units:  NA  predictModel(model=rec~a*ssb, params=FLPar(a=1.234)) #> An object of class \"FLQuants\": EMPTY #> model:   #> rec ~ a * ssb #> <environment: R_EmptyEnv> #>  #> params:   #> An object of class \"FLPar\" #> params #>    a  #> 1.23  #> units:  NA  predictModel(model=bevholt, params=FLPar(a=1.234)) #> An object of class \"FLQuants\": EMPTY #> model:   #> rec ~ a * ssb/(b + ssb) #> <environment: R_EmptyEnv> #>  #> params:   #> An object of class \"FLPar\" #> params #>    a  #> 1.23  #> units:  NA  predictModel(model=\"bevholtss3\", params=FLPar(a=1.234)) #> An object of class \"FLQuants\": EMPTY #> model:   #> rec ~ (4 * s * R0 * ssb)/(v * (1 - s) + ssb * (5 * s - 1)) #> <environment: R_EmptyEnv> #>  #> params:   #> An object of class \"FLPar\" #> params #>    a  #> 1.23  #> units:  NA"},{"path":"/reference/production.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the computed yearly production — production","title":"Returns the computed yearly production — production","text":"Returns computed yearly production","code":""},{"path":"/reference/production.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the computed yearly production — production","text":"","code":"production(object, ...)  # S4 method for FLStock production(object, what = \"ssb\", ...)"},{"path":"/reference/production.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the computed yearly production — production","text":"object object biomass catch data. One production options: \"ssb\", \"biomass\", \"exploitation\".","code":""},{"path":"/reference/production.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the computed yearly production — production","text":"production year, class FLQuant.","code":""},{"path":"/reference/production.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns the computed yearly production — production","text":"Production can calculated FLStock based spawning stock biomass (\"ssb\"), total biomass (\"biomass\"), exploitation (\"exploitation\").","code":""},{"path":"/reference/production.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns the computed yearly production — production","text":"Laurie Kell (Sea++), Iago Mosqueira (WMR)","code":""},{"path":"/reference/production.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the computed yearly production — production","text":"","code":"data(ple4) # For SSB production(ple4, \"ssb\") #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all  91512  95530 123119 129308 210400  84703 130632 100648 172340 231689 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 139513  93708 113785 127757 145745  85625 147244 161657 192360 176272 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 164270 152893 189471 156381 177925 247466 240644 255680 260378 342209 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 262223 338779 240262 211093 172667 161222 133093 139970 113817 133277 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 185109 152527 182415 149306 115799 170217 139195 160315 145261 120747 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 183276 194586 216921 140039 161798 224281 254384  90631 199634 208053 #>      year #> age   2017   #>   all     NA #>  #> units:  t  # For total biomass production(ple4, \"biomass\") #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957     1958     1959     1960     1961     1962     1963     1964     #>   all  97057.5 124335.9 134193.7 131624.1 195830.9  84314.2 156283.4 106620.6 #>      year #> age   1965     1966     1967     1968     1969     1970     1971     1972     #>   all 184772.0 168397.4 135624.4 103680.5 116318.4 135301.9 137680.9  98870.1 #>      year #> age   1973     1974     1975     1976     1977     1978     1979     1980     #>   all 177708.0 199229.7 182733.9 171714.1 160913.2 160718.4 182691.4 144393.8 #>      year #> age   1981     1982     1983     1984     1985     1986     1987     1988     #>   all 236823.4 256090.8 250806.2 257466.2 367166.4 307643.1 241038.8 255692.8 #>      year #> age   1989     1990     1991     1992     1993     1994     1995     1996     #>   all 216385.9 200280.0 151334.7 142125.9 122293.1 150908.2 118295.2 198090.3 #>      year #> age   1997     1998     1999     2000     2001     2002     2003     2004     #>   all 158178.3 143119.1 145741.4 159858.4 160431.2 150072.8 156416.2 123678.8 #>      year #> age   2005     2006     2007     2008     2009     2010     2011     2012     #>   all 164460.6 123874.2 198506.5 214558.2 221034.4 134974.6 172571.2 232425.2 #>      year #> age   2013     2014     2015     2016     2017     #>   all 263438.5   3241.5 198078.0 219445.0       NA #>  #> units:  t"},{"path":"/reference/propagate.html","id":null,"dir":"Reference","previous_headings":"","what":"Method propagate — propagate","title":"Method propagate — propagate","text":"Methods extend objects various FLR classes along iter (6th FLQuant) dimension. Objects must generally single iter extended. new iterations can filled copies existing, remain NA.","code":""},{"path":"/reference/propagate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method propagate — propagate","text":"","code":"propagate(object, ...)  # S4 method for FLQuant propagate(object, iter, fill.iter = TRUE)"},{"path":"/reference/propagate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method propagate — propagate","text":"object Object propagated. fill.iter first array copied others? Defaults FALSE. iters . iterations output.","code":""},{"path":"/reference/propagate.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method propagate — propagate","text":"propagate(object, ...)","code":""},{"path":[]},{"path":"/reference/propagate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method propagate — propagate","text":"FLR Team","code":""},{"path":"/reference/propagate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method propagate — propagate","text":"","code":"# An FLQuant with one iter (dim(flq)[6] == 1) flq <- FLQuant(rnorm(80), dim=c(4,20), quant='age')  # can now be extended along the `iter` dimension, with #' copies of the first propagate(flq, 100) #> An object of class \"FLQuant\" #> iters:  100  #>  #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1            2            3            4            5            #>   1 -0.971903(0) -1.255819(0) -1.561730(0) -0.215550(0)  0.831618(0) #>   2 -0.029049(0)  1.252001(0)  0.363128(0)  1.342257(0) -0.726416(0) #>   3 -1.578651(0)  0.725936(0) -1.324855(0)  0.190960(0) -0.538961(0) #>   4  0.732943(0) -0.650217(0) -2.189010(0)  1.220296(0) -0.548577(0) #>    year #> age 6            7            8            9            10           #>   1 -0.898656(0) -0.899102(0)  1.016168(0)  0.755474(0)  1.233541(0) #>   2  0.059854(0) -0.068150(0) -1.087255(0) -1.783025(0) -0.946419(0) #>   3 -1.308017(0) -0.024684(0) -1.405239(0) -0.846609(0) -0.699733(0) #>   4 -1.550817(0)  0.278563(0) -1.477079(0) -1.150954(0) -0.103936(0) #>    year #> age 11           12           13           14           15           #>   1  0.231130(0) -0.346203(0)  0.460412(0)  0.762842(0)  0.057472(0) #>   2  1.172588(0) -0.317502(0)  0.315868(0)  0.355808(0) -0.021236(0) #>   3 -2.282545(0)  1.647992(0)  0.738424(0)  2.273589(0) -0.776503(0) #>   4 -0.659351(0)  3.161160(0) -0.377477(0) -0.142483(0)  0.527718(0) #>    year #> age 16           17           18           19           20           #>   1  0.993382(0) -0.950556(0) -1.399191(0)  1.520860(0)  1.080170(0) #>   2  0.719519(0)  0.182349(0)  0.390854(0) -0.383122(0) -0.979794(0) #>   3  2.000959(0) -0.244649(0) -0.249553(0) -0.130078(0) -1.069041(0) #>   4 -0.368017(0)  1.127821(0) -1.193375(0) -1.218575(0) -0.163427(0) #>  #> units:  NA   # or without iter(propagate(flq, 100, fill.iter=FALSE), 2) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 #>   1 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA #>   2 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA #>   3 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA #>   4 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA #>  #> units:  NA"},{"path":"/reference/properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a series of properties of the fisheries element represented by the class. — properties","title":"Returns a series of properties of the fisheries element represented by the class. — properties","text":"Returns series properties fisheries element represented class.","code":""},{"path":"/reference/properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a series of properties of the fisheries element represented by the class. — properties","text":"","code":"properties(object, ...)"},{"path":"/reference/properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a series of properties of the fisheries element represented by the class. — properties","text":"object object properties can extracted.","code":""},{"path":"/reference/properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a series of properties of the fisheries element represented by the class. — properties","text":"correspodning properties, FLPar.","code":""},{"path":"/reference/properties.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns a series of properties of the fisheries element represented by the class. — properties","text":"Laurie Kell (Sea++), Iago Mosqueira (WMR)","code":""},{"path":"/reference/quant.html","id":null,"dir":"Reference","previous_headings":"","what":"Method quant — quant","title":"Method quant — quant","text":"Function get set name first dimension (quant) object FLArray-based class, like FLQuant FLCohort.","code":""},{"path":"/reference/quant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method quant — quant","text":"","code":"quant(object, ...)  # S4 method for FLArray quant(object)  # S4 method for FLArray,character quant(object) <- value"},{"path":"/reference/quant.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method quant — quant","text":"quant(object) quant<-(object,value)","code":""},{"path":[]},{"path":"/reference/quant.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method quant — quant","text":"FLR Team","code":""},{"path":"/reference/quant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method quant — quant","text":"","code":"# quant is 'quant' by default   quant(FLQuant()) #> [1] \"quant\"  flq <- FLQuant(rnorm(80), dim=c(4,20), quant='age') quant(flq) #> [1] \"age\" quant(flq) <- 'length' summary(flq) #> An object of class \"FLQuant\" with: #> dim  :  4 20 1 1 1 1  #> quant:  length  #> units:  NA  #>  #> Min    :  -1.891413  #> 1st Qu.:  -0.7409567  #> Mean   :  0.08605245  #> Median :  0.02204099  #> 3rd Qu.:  0.9080153  #> Max    :  2.25582  #> NAs    :  0 %   # quant is 'quant' by default   quant(FLQuant()) #> [1] \"quant\"  flq <- FLQuant(rnorm(80), dim=c(4,20), quant='age') quant(flq) #> [1] \"age\" quant(flq) <- 'length' summary(flq) #> An object of class \"FLQuant\" with: #> dim  :  4 20 1 1 1 1  #> quant:  length  #> units:  NA  #>  #> Min    :  -2.460227  #> 1st Qu.:  -0.7235499  #> Mean   :  -0.06884895  #> Median :  0.04868018  #> 3rd Qu.:  0.473452  #> Max    :  1.998408  #> NAs    :  0 %"},{"path":"/reference/quantTotals.html","id":null,"dir":"Reference","previous_headings":"","what":"Methods quantTotals — quantTotals","title":"Methods quantTotals — quantTotals","text":"Methods compute totals selected dimensions FLQuant objects methods return object dimensions input sums along first (yearTotals) second dimension (quantTotals). Although names might appear contradictory, must noted method really returns totals selected dimension.","code":""},{"path":"/reference/quantTotals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Methods quantTotals — quantTotals","text":"","code":"quantTotals(x, ...)"},{"path":"/reference/quantTotals.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Methods quantTotals — quantTotals","text":"quantTotals(x) yearTotals(x)","code":""},{"path":[]},{"path":"/reference/quantTotals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Methods quantTotals — quantTotals","text":"FLR Team","code":""},{"path":"/reference/quantTotals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Methods quantTotals — quantTotals","text":"","code":"flq <- FLQuant(rlnorm(100), dim=c(10,10)) quantTotals(flq) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       2       3       4       5       6       7       8       9       #>    1  29.7234 29.7234 29.7234 29.7234 29.7234 29.7234 29.7234 29.7234 29.7234 #>    2  10.4986 10.4986 10.4986 10.4986 10.4986 10.4986 10.4986 10.4986 10.4986 #>    3  12.8588 12.8588 12.8588 12.8588 12.8588 12.8588 12.8588 12.8588 12.8588 #>    4  40.1999 40.1999 40.1999 40.1999 40.1999 40.1999 40.1999 40.1999 40.1999 #>    5  22.2456 22.2456 22.2456 22.2456 22.2456 22.2456 22.2456 22.2456 22.2456 #>    6  10.3951 10.3951 10.3951 10.3951 10.3951 10.3951 10.3951 10.3951 10.3951 #>    7  10.0079 10.0079 10.0079 10.0079 10.0079 10.0079 10.0079 10.0079 10.0079 #>    8  11.3852 11.3852 11.3852 11.3852 11.3852 11.3852 11.3852 11.3852 11.3852 #>    9   7.5651  7.5651  7.5651  7.5651  7.5651  7.5651  7.5651  7.5651  7.5651 #>    10 31.4908 31.4908 31.4908 31.4908 31.4908 31.4908 31.4908 31.4908 31.4908 #>      year #> quant 10      #>    1  29.7234 #>    2  10.4986 #>    3  12.8588 #>    4  40.1999 #>    5  22.2456 #>    6  10.3951 #>    7  10.0079 #>    8  11.3852 #>    9   7.5651 #>    10 31.4908 #>  #> units:  NA  # See how the values obtained by yearSums are being replicated   yearSums(flq) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       #>    1  29.7234 #>    2  10.4986 #>    3  12.8588 #>    4  40.1999 #>    5  22.2456 #>    6  10.3951 #>    7  10.0079 #>    8  11.3852 #>    9   7.5651 #>    10 31.4908 #>  #> units:  NA  # Get the proportions by quant   flq / quantTotals(flq) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1         2         3         4         5         6         7         #>    1  0.0102262 0.4740858 0.0052518 0.0399841 0.0238343 0.2528938 0.0535763 #>    2  0.0308577 0.1111179 0.0117361 0.1419445 0.1832639 0.0645143 0.0764293 #>    3  0.0661400 0.0686662 0.2943833 0.2626021 0.0742639 0.0356456 0.0683202 #>    4  0.0114894 0.0386392 0.0554091 0.1187885 0.3976189 0.0579956 0.1261062 #>    5  0.0343655 0.0072476 0.0463921 0.4746251 0.0651319 0.0514096 0.0452111 #>    6  0.0134776 0.1531387 0.1146877 0.2798408 0.0854058 0.0354065 0.0446041 #>    7  0.0893084 0.0598781 0.0407770 0.0055078 0.1314200 0.1213795 0.0752119 #>    8  0.0760796 0.0406151 0.0218903 0.0293232 0.0382301 0.1044732 0.0959325 #>    9  0.1644812 0.1840483 0.0507512 0.0550968 0.0676102 0.1854379 0.0987736 #>    10 0.0142279 0.0149324 0.0298655 0.0199528 0.0993833 0.0047344 0.0955929 #>      year #> quant 8         9         10        #>    1  0.0023086 0.0489219 0.0889172 #>    2  0.0849537 0.2456885 0.0494942 #>    3  0.0144158 0.0390966 0.0764664 #>    4  0.0209226 0.1361284 0.0369019 #>    5  0.0285275 0.2148501 0.0322396 #>    6  0.0702897 0.0685988 0.1345503 #>    7  0.0233273 0.3338459 0.1193441 #>    8  0.2744723 0.1059551 0.2130286 #>    9  0.0260751 0.1106233 0.0571024 #>    10 0.0281396 0.6744582 0.0187129 #>  #> units:  NA  # or year   flq / yearTotals(flq) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1         2         3         4         5         6         7         #>    1  0.0482686 0.6298791 0.0148693 0.0461859 0.0259501 0.4569021 0.1033083 #>    2  0.0514455 0.0521457 0.0117366 0.0579128 0.0704769 0.0411694 0.0520543 #>    3  0.1350576 0.0394682 0.3605810 0.1312272 0.0349798 0.0278609 0.0569923 #>    4  0.0733459 0.0694312 0.2121745 0.1855765 0.5855035 0.1417120 0.3288711 #>    5  0.1214002 0.0072068 0.0983053 0.4103167 0.0530733 0.0695146 0.0652462 #>    6  0.0222483 0.0711569 0.1135625 0.1130486 0.0325204 0.0223718 0.0300794 #>    7  0.1419344 0.0267863 0.0388728 0.0021421 0.0481772 0.0738371 0.0488308 #>    8  0.1375499 0.0206695 0.0237399 0.0129740 0.0159435 0.0722988 0.0708549 #>    9  0.1975992 0.0622372 0.0365721 0.0161982 0.0187355 0.0852711 0.0484755 #>    10 0.0711504 0.0210191 0.0895860 0.0244180 0.1146397 0.0090623 0.1952872 #>      year #> quant 8         9         10        #>    1  0.0088042 0.0345196 0.2133771 #>    2  0.1144333 0.0612323 0.0419517 #>    3  0.0237836 0.0119345 0.0793846 #>    4  0.1079141 0.1299083 0.1197671 #>    5  0.0814228 0.1134602 0.0579026 #>    6  0.0937477 0.0169282 0.1129221 #>    7  0.0299533 0.0793145 0.0964290 #>    8  0.4009371 0.0286368 0.1958129 #>    9  0.0253093 0.0198667 0.0348766 #>    10 0.1136946 0.5041989 0.0475761 #>  #> units:  NA"},{"path":"/reference/readVPAIntercatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads a single file with one year of data in VPA format as output by\nICES Intercatch — readVPAIntercatch","title":"Reads a single file with one year of data in VPA format as output by\nICES Intercatch — readVPAIntercatch","text":"Reads single file one year data VPA format output ICES Intercatch","code":""},{"path":"/reference/readVPAIntercatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads a single file with one year of data in VPA format as output by\nICES Intercatch — readVPAIntercatch","text":"","code":"readVPAIntercatch(file)"},{"path":"/reference/readVPAIntercatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads a single file with one year of data in VPA format as output by\nICES Intercatch — readVPAIntercatch","text":"file Intercatch VPA file load","code":""},{"path":"/reference/readVPAIntercatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads a single file with one year of data in VPA format as output by\nICES Intercatch — readVPAIntercatch","text":"object class FLQuant.","code":""},{"path":"/reference/residuals-FLQuant.html","id":null,"dir":"Reference","previous_headings":"","what":"residuals — residuals-FLQuant","title":"residuals — residuals-FLQuant","text":"residuals","code":""},{"path":"/reference/residuals-FLQuant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"residuals — residuals-FLQuant","text":"","code":"# S4 method for FLQuant residuals(object, fit, type = \"log\", ...)"},{"path":"/reference/residuals-FLQuant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"residuals — residuals-FLQuant","text":"","code":"data(ple4) fit <- rlnorm(1, log(catch(ple4)), 0.1) residuals(catch(ple4), fit) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957       1958       1959       1960       1961       1962       #>   all -0.0108789 -0.0589731  0.0043977  0.1686388  0.0552120 -0.0281764 #>      year #> age   1963       1964       1965       1966       1967       1968       #>   all  0.1230334 -0.1588650  0.1178664 -0.0533698  0.2165916  0.0444650 #>      year #> age   1969       1970       1971       1972       1973       1974       #>   all  0.1146472 -0.0569631  0.0340476 -0.1488198 -0.0871604  0.0893161 #>      year #> age   1975       1976       1977       1978       1979       1980       #>   all  0.0820421 -0.1366244  0.1660949 -0.1495924 -0.1057146  0.1078429 #>      year #> age   1981       1982       1983       1984       1985       1986       #>   all  0.0716095 -0.0749412  0.1019636  0.1266241 -0.0059314 -0.0064608 #>      year #> age   1987       1988       1989       1990       1991       1992       #>   all  0.0939218  0.1281953  0.0546810  0.0121466 -0.0518721  0.0422410 #>      year #> age   1993       1994       1995       1996       1997       1998       #>   all  0.0915435  0.0114923 -0.1623184  0.0558999 -0.0717652  0.1263555 #>      year #> age   1999       2000       2001       2002       2003       2004       #>   all  0.2495706 -0.1567068  0.1268930 -0.1281268  0.0426292 -0.1292239 #>      year #> age   2005       2006       2007       2008       2009       2010       #>   all -0.0687038 -0.0750960 -0.0980274 -0.0130738  0.0549904 -0.1086788 #>      year #> age   2011       2012       2013       2014       2015       2016       #>   all  0.1060384  0.0137913 -0.0438652  0.1281073  0.0811740  0.1201914 #>      year #> age   2017       #>   all  0.0176347 #>  #> units:  t  residuals(catch(ple4), fit, type=\"student\") #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957       1958       1959       1960       1961       1962       #>   all  0.3684981  0.2952185  0.2251625  0.2127320  0.1596261  0.0880482 #>      year #> age   1963       1964       1965       1966       1967       1968       #>   all  0.0674997 -0.0211240  0.0235204  0.0026447  0.0229652  0.0170615 #>      year #> age   1969       1970       1971       1972       1973       1974       #>   all  0.0421306  0.0314899  0.0424563 -0.0188638 -0.0074573  0.0039738 #>      year #> age   1975       1976       1977       1978       1979       1980       #>   all -0.0031742  0.0856788 -0.0110329  0.1117918  0.0516109  0.0257718 #>      year #> age   1981       1982       1983       1984       1985       1986       #>   all  0.0445782  0.2210007  0.2750476  0.4861785  1.4095564  2.9683767 #>      year #> age   1987       1988       1989       1990       1991       1992       #>   all  4.0807817  4.2365213  3.3127507  1.4723064  0.6576836  0.1209183 #>      year #> age   1993       1994       1995       1996       1997       1998       #>   all  0.0149143  0.0085550  0.0049861  0.0920652 -0.0052623 -0.0092081 #>      year #> age   1999       2000       2001       2002       2003       2004       #>   all -0.0311314 -0.0200036  0.1362068 -0.0098510  0.0075256 -0.0031891 #>      year #> age   2005       2006       2007       2008       2009       2010       #>   all  0.1348259  0.1477090  0.1798691  0.1672035  0.1825749  0.0916176 #>      year #> age   2011       2012       2013       2014       2015       2016       #>   all  0.1785514  0.0765191  0.0209775  0.0739139  0.0724932  0.1163009 #>      year #> age   2017       #>   all  0.1137737 #>  #> units:    rraw(catch(ple4), fit) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957      1958      1959      1960      1961      1962      1963      #>   all   -857.13  -5393.41    461.56  18308.00   6421.19  -3609.01  16301.52 #>      year #> age   1964      1965      1966      1967      1968      1969      1970      #>   all -25403.41  16834.30  -8895.40  30082.49   6515.82  15833.86  -8008.18 #>      year #> age   1971      1972      1973      1974      1975      1976      1977      #>   all   4727.48 -23971.67 -13798.71  13499.56  13027.40 -25748.59  25379.66 #>      year #> age   1978      1979      1980      1981      1982      1983      1984      #>   all -28748.94 -19251.51  18881.15  12749.58 -14975.76  20612.00  27148.77 #>      year #> age   1985      1986      1987      1988      1989      1990      1991      #>   all  -1469.83  -1809.87  27654.00  37929.74  15540.02   3025.58 -11616.34 #>      year #> age   1992      1993      1994      1995      1996      1997      1998      #>   all   7969.97  15708.76   1728.24 -23373.75   7161.07 -11323.74  20325.95 #>      year #> age   1999      2000      2001      2002      2003      2004      2005      #>   all  37693.24 -24768.93  15266.75 -19658.05   6428.16 -19320.06  -8146.72 #>      year #> age   2006      2007      2008      2009      2010      2011      2012      #>   all  -8724.02 -10790.58  -1492.26   6190.75 -13641.52  12044.82   1806.19 #>      year #> age   2013      2014      2015      2016      2017      #>   all  -6325.14  16803.70  10707.83  14860.14   2183.64 #>  #> units:  t  rlogstandard(catch(ple4), fit) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957      1958      1959      1960      1961      1962      1963      #>   all -0.105966 -0.574427  0.042836  1.642626  0.537792 -0.274452  1.198406 #>      year #> age   1964      1965      1966      1967      1968      1969      1970      #>   all -1.547424  1.148077 -0.519849  2.109709  0.433111  1.116721 -0.554849 #>      year #> age   1971      1972      1973      1974      1975      1976      1977      #>   all  0.331641 -1.449578 -0.848985  0.869983  0.799131 -1.330789  1.617846 #>      year #> age   1978      1979      1980      1981      1982      1983      1984      #>   all -1.457103 -1.029712  1.050443  0.697512 -0.729964  0.993175  1.233381 #>      year #> age   1985      1986      1987      1988      1989      1990      1991      #>   all -0.057774 -0.062931  0.914845  1.248685  0.532620  0.118314 -0.505260 #>      year #> age   1992      1993      1994      1995      1996      1997      1998      #>   all  0.411449  0.891679  0.111941 -1.581061  0.544492 -0.699028  1.230765 #>      year #> age   1999      2000      2001      2002      2003      2004      2005      #>   all  2.430940 -1.526401  1.236001 -1.248018  0.415229 -1.258704 -0.669209 #>      year #> age   2006      2007      2008      2009      2010      2011      2012      #>   all -0.731472 -0.954836 -0.127346  0.535634 -1.058585  1.032866  0.134334 #>      year #> age   2013      2014      2015      2016      2017      #>   all -0.427269  1.247829  0.790675  1.170724  0.171770 #>  #> units:    rstandard(catch(ple4), fit) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   all  9.4504  9.0066  9.5959 11.3087 10.0961  9.2883 10.8046  8.1504 10.7489 #>      year #> age   1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   all  9.0573 11.8642  9.9882 10.7143  9.0248  9.8847  8.2327  8.7563 10.4463 #>      year #> age   1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   all 10.3706  8.3337 11.2800  8.2264  8.5953 10.6417 10.2630  8.8640 10.5793 #>      year #> age   1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   all 10.8434  9.4973  9.4922 10.4946 10.8605 10.0907  9.6705  9.0708  9.9660 #>      year #> age   1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   all 10.4696  9.6642  8.1223 10.1030  8.8922 10.8405 12.2620  8.1680 10.8463 #>      year #> age   2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   all  8.4048  9.9698  8.3956  8.9194  8.8626  8.6617  9.4297 10.0938  8.5699 #>      year #> age   2011    2012    2013    2014    2015    2016    2017    #>   all 10.6225  9.6864  9.1437 10.8595 10.3616 10.7739  9.7237 #>  #> units:    rstudent(catch(ple4), fit) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957       1958       1959       1960       1961       1962       #>   all  0.3684981  0.2952185  0.2251625  0.2127320  0.1596261  0.0880482 #>      year #> age   1963       1964       1965       1966       1967       1968       #>   all  0.0674997 -0.0211240  0.0235204  0.0026447  0.0229652  0.0170615 #>      year #> age   1969       1970       1971       1972       1973       1974       #>   all  0.0421306  0.0314899  0.0424563 -0.0188638 -0.0074573  0.0039738 #>      year #> age   1975       1976       1977       1978       1979       1980       #>   all -0.0031742  0.0856788 -0.0110329  0.1117918  0.0516109  0.0257718 #>      year #> age   1981       1982       1983       1984       1985       1986       #>   all  0.0445782  0.2210007  0.2750476  0.4861785  1.4095564  2.9683767 #>      year #> age   1987       1988       1989       1990       1991       1992       #>   all  4.0807817  4.2365213  3.3127507  1.4723064  0.6576836  0.1209183 #>      year #> age   1993       1994       1995       1996       1997       1998       #>   all  0.0149143  0.0085550  0.0049861  0.0920652 -0.0052623 -0.0092081 #>      year #> age   1999       2000       2001       2002       2003       2004       #>   all -0.0311314 -0.0200036  0.1362068 -0.0098510  0.0075256 -0.0031891 #>      year #> age   2005       2006       2007       2008       2009       2010       #>   all  0.1348259  0.1477090  0.1798691  0.1672035  0.1825749  0.0916176 #>      year #> age   2011       2012       2013       2014       2015       2016       #>   all  0.1785514  0.0765191  0.0209775  0.0739139  0.0724932  0.1163009 #>      year #> age   2017       #>   all  0.1137737 #>  #> units:"},{"path":"/reference/rnoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Random noise with different frequencies — rnoise,numeric,FLQuant-method","title":"Random noise with different frequencies — rnoise,numeric,FLQuant-method","text":"noise generator","code":""},{"path":"/reference/rnoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random noise with different frequencies — rnoise,numeric,FLQuant-method","text":"","code":"# S4 method for numeric,FLQuant rnoise(   n = n,   len = len,   sd = 1,   b = 0,   burn = 0,   trunc = 0,   what = c(\"year\", \"cohort\", \"age\"),   seed = NA )  # S4 method for numeric,missing rnoise(n = n, sd = 1, b = 0, burn = 0, trunc = 0, seed = NA)  # S4 method for numeric,FLQuant rlnoise(   n = n,   len = len,   sd = 1,   b = 0,   burn = 0,   trunc = 0,   what = c(\"year\", \"cohort\", \"age\"),   seed = NA )"},{"path":"/reference/rnoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random noise with different frequencies — rnoise,numeric,FLQuant-method","text":"n number iterations len FLQuant sd standard error simulated series b autocorrelation parameter real number 0,1 burn gets rid 1st values series trunc get rid values > abs(trunc) returns time series year, cohort age\" ... ","code":""},{"path":"/reference/rnoise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random noise with different frequencies — rnoise,numeric,FLQuant-method","text":"FLQuant autocorrelation equal B.","code":""},{"path":"/reference/rnoise.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random noise with different frequencies — rnoise,numeric,FLQuant-method","text":"Ranta Kaitala 2001 Proc. R. Soc. vt = b * vt-1 + s * sqrt(1 - b^2) s normally distributed random variable mean = 0 b autocorrelation parameter","code":""},{"path":"/reference/rnoise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random noise with different frequencies — rnoise,numeric,FLQuant-method","text":"","code":"if (FALSE) { flq <- FLQuant(1:100, quant=\"age\") white <- rnoise(100,flq,sd=.3,b=0) plot(white) acf(white)  red <- rnoise(100,flq,sd=.3,b=0.7) plot(red) acf(red)  res <- rnoise(100,flq,sd=.3,b=0)  ggplot() +   geom_point(aes(year,age,size=data),     data=subset(as.data.frame(res), data>0)) + geom_point(aes(year,age,size=-data),             data=subset(as.data.frame(res),data<=0),colour=\"red\")+ scale_size_area(max_size=4, guide=\"none\")+ facet_wrap(~iter)  data(ple4) res <- rnoise(4,m(ple4),burn=10,b=0.9,what=\"cohort\") ggplot()+ geom_point(aes(year,age,size= data),           data=subset(as.data.frame(res),data>0))+ geom_point(aes(year,age,size=-data),           data=subset(as.data.frame(res),data<=0),colour=\"red\")+ scale_size_area(max_size=4, guide=\"none\")+ facet_wrap(~iter)  }"},{"path":"/reference/roc.html","id":null,"dir":"Reference","previous_headings":"","what":"Receiver Operating Characteristic (ROC) — roc","title":"Receiver Operating Characteristic (ROC) — roc","text":"receiver operating characteristic (ROC) curve shows ability binary classifier. applied compare two sets values, stored two FLQuant objects. first result aplying logical comparison given state reference value, contains binary (0, 1) label. second, score, contains alternative metric attempts measure absolute value first. examples compare observation stock status, SSB less reference point, alternative metric, catch curve estimates total mortality.","code":""},{"path":"/reference/roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Receiver Operating Characteristic (ROC) — roc","text":"","code":"roc(label, ind, direction = c(\">=\", \"<=\"))  auc(x = NULL, TPR = x$TPR, FPR = x$FPR)"},{"path":"/reference/roc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Receiver Operating Characteristic (ROC) — roc","text":"","code":"data(ple4) # OM 'reality' on stock status (fbar) state <- fbar(ple4)[, ac(1960:2017)] # Model estimates of F using catch curves ind <- acc(catch.n(ple4)[, ac(1960:2017)]) # Compute TSS, returns data.frame roc(state >= 0.22, ind) #>    year       ind label TP TN FP FN        TPR       FPR          TSS #> 43 2002 0.7097662     1  1  9  0 48 0.02040816 0.0000000  0.020408163 #> 45 2004 0.6789889     1  2  9  0 47 0.04081633 0.0000000  0.040816327 #> 44 2003 0.6727245     1  3  9  0 46 0.06122449 0.0000000  0.061224490 #> 27 1986 0.6719858     1  4  9  0 45 0.08163265 0.0000000  0.081632653 #> 48 2007 0.6657043     1  5  9  0 44 0.10204082 0.0000000  0.102040816 #> 49 2008 0.6596211     1  6  9  0 43 0.12244898 0.0000000  0.122448980 #> 42 2001 0.6574388     1  7  9  0 42 0.14285714 0.0000000  0.142857143 #> 28 1987 0.6534843     1  8  9  0 41 0.16326531 0.0000000  0.163265306 #> 46 2005 0.6476648     1  9  9  0 40 0.18367347 0.0000000  0.183673469 #> 47 2006 0.6459748     1 10  9  0 39 0.20408163 0.0000000  0.204081633 #> 41 2000 0.6438515     1 11  9  0 38 0.22448980 0.0000000  0.224489796 #> 50 2009 0.6373167     0 11  8  1 38 0.22448980 0.1111111  0.113378685 #> 29 1988 0.6314991     1 12  8  1 37 0.24489796 0.1111111  0.133786848 #> 26 1985 0.6143431     1 13  8  1 36 0.26530612 0.1111111  0.154195011 #> 30 1989 0.6090999     1 14  8  1 35 0.28571429 0.1111111  0.174603175 #> 40 1999 0.6073061     1 15  8  1 34 0.30612245 0.1111111  0.195011338 #> 51 2010 0.5961145     0 15  7  2 34 0.30612245 0.2222222  0.083900227 #> 25 1984 0.5948203     1 16  7  2 33 0.32653061 0.2222222  0.104308390 #> 39 1998 0.5870266     1 17  7  2 32 0.34693878 0.2222222  0.124716553 #> 31 1990 0.5793923     1 18  7  2 31 0.36734694 0.2222222  0.145124717 #> 52 2011 0.5756761     0 18  6  3 31 0.36734694 0.3333333  0.034013605 #> 24 1983 0.5727272     1 19  6  3 30 0.38775510 0.3333333  0.054421769 #> 38 1997 0.5721862     1 20  6  3 29 0.40816327 0.3333333  0.074829932 #> 32 1991 0.5479495     1 21  6  3 28 0.42857143 0.3333333  0.095238095 #> 23 1982 0.5334924     1 22  6  3 27 0.44897959 0.3333333  0.115646259 #> 53 2012 0.5211683     0 22  5  4 27 0.44897959 0.4444444  0.004535147 #> 20 1979 0.5205015     1 23  5  4 26 0.46938776 0.4444444  0.024943311 #> 54 2013 0.5148835     0 23  4  5 26 0.46938776 0.5555556 -0.086167800 #> 19 1978 0.5136786     1 24  4  5 25 0.48979592 0.5555556 -0.065759637 #> 55 2014 0.5135529     0 24  3  6 25 0.48979592 0.6666667 -0.176870748 #> 21 1980 0.5080961     1 25  3  6 24 0.51020408 0.6666667 -0.156462585 #> 33 1992 0.5010075     1 26  3  6 23 0.53061224 0.6666667 -0.136054422 #> 18 1977 0.4931742     1 27  3  6 22 0.55102041 0.6666667 -0.115646259 #> 37 1996 0.4907357     1 28  3  6 21 0.57142857 0.6666667 -0.095238095 #> 22 1981 0.4791809     1 29  3  6 20 0.59183673 0.6666667 -0.074829932 #> 56 2015 0.4644625     0 29  2  7 20 0.59183673 0.7777778 -0.185941043 #> 36 1995 0.4642887     1 30  2  7 19 0.61224490 0.7777778 -0.165532880 #> 17 1976 0.4608337     1 31  2  7 18 0.63265306 0.7777778 -0.145124717 #> 34 1993 0.4438759     1 32  2  7 17 0.65306122 0.7777778 -0.124716553 #> 16 1975 0.4400404     1 33  2  7 16 0.67346939 0.7777778 -0.104308390 #> 57 2016 0.4380586     0 33  1  8 16 0.67346939 0.8888889 -0.215419501 #> 58 2017 0.4276845     0 33  0  9 16 0.67346939 1.0000000 -0.326530612 #> 35 1994 0.4238022     1 34  0  9 15 0.69387755 1.0000000 -0.306122449 #> 15 1974 0.3944662     1 35  0  9 14 0.71428571 1.0000000 -0.285714286 #> 5  1964 0.3806223     1 36  0  9 13 0.73469388 1.0000000 -0.265306122 #> 2  1961 0.3596979     1 37  0  9 12 0.75510204 1.0000000 -0.244897959 #> 3  1962 0.3489301     1 38  0  9 11 0.77551020 1.0000000 -0.224489796 #> 1  1960 0.3471932     1 39  0  9 10 0.79591837 1.0000000 -0.204081633 #> 6  1965 0.3455516     1 40  0  9  9 0.81632653 1.0000000 -0.183673469 #> 7  1966 0.3260040     1 41  0  9  8 0.83673469 1.0000000 -0.163265306 #> 14 1973 0.3253669     1 42  0  9  7 0.85714286 1.0000000 -0.142857143 #> 4  1963 0.3231395     1 43  0  9  6 0.87755102 1.0000000 -0.122448980 #> 10 1969 0.3153705     1 44  0  9  5 0.89795918 1.0000000 -0.102040816 #> 11 1970 0.3135998     1 45  0  9  4 0.91836735 1.0000000 -0.081632653 #> 8  1967 0.3094249     1 46  0  9  3 0.93877551 1.0000000 -0.061224490 #> 9  1968 0.3031928     1 47  0  9  2 0.95918367 1.0000000 -0.040816327 #> 12 1971 0.2692419     1 48  0  9  1 0.97959184 1.0000000 -0.020408163 #> 13 1972 0.2286824     1 49  0  9  0 1.00000000 1.0000000  0.000000000 # Needs ggplotFL if (FALSE) { ggplot(roc(state >= 0.22, ind, direction='>='), aes(x=FPR, y=TPR)) +   geom_line() +   geom_abline(slope=1, intercept=0, colour=\"red\", linetype=2) } # Computes auc using the output of roc() with(roc(state >= 0.22, ind), auc(TPR=TPR, FPR=FPR)) #> [1] 0.4716553 auc(roc(state >= 0.22, ind)) #> [1] 0.4716553"},{"path":"/reference/ruleset.html","id":null,"dir":"Reference","previous_headings":"","what":"Set of verify rules for an FLR class — ruleset","title":"Set of verify rules for an FLR class — ruleset","text":"Returns set standard rules used verify method object given class.","code":""},{"path":"/reference/ruleset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set of verify rules for an FLR class — ruleset","text":"","code":"ruleset(object, ...)  # S4 method for FLStock ruleset(object, ...)"},{"path":"/reference/ruleset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set of verify rules for an FLR class — ruleset","text":"object object FLR class method defined. ... Names positions standard list subset.","code":""},{"path":"/reference/ruleset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set of verify rules for an FLR class — ruleset","text":"named list containing rules defined class object belongs .","code":""},{"path":"/reference/ruleset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set of verify rules for an FLR class — ruleset","text":"standard minimal set rules check FLStock objects using verify method. included rules (names italics) check : NAs slot, anyna. catch.wt, landings.wt, discards.wt stock.wt > 0. mat, m.spwn harvest.spwn values 0 1. harvest >= 0. cohorts stock.n slot contain decreasing numbers, except plusgroup age.","code":""},{"path":"/reference/ruleset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set of verify rules for an FLR class — ruleset","text":"FLR Team","code":""},{"path":"/reference/ruleset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set of verify rules for an FLR class — ruleset","text":"","code":"data(ple4) ruleset(ple4) #> $anyna #> $anyna$rule #> [1] \"!anyna\" #>  #> $anyna$anyna #> function(x) #>       unlist(qapply(x, function(y) sum(is.na(y), na.rm=TRUE) > 0)) #> <bytecode: 0x557afe281d80> #> <environment: 0x557aff7260f0> #>  #>  #> $catch.wt #> ~catch.wt > 0 #> <environment: 0x557aff7260f0> #>  #> $landings.wt #> ~landings.wt > 0 #> <environment: 0x557aff7260f0> #>  #> $discards.wt #> ~discards.wt > 0 #> <environment: 0x557aff7260f0> #>  #> $stock.wt #> ~stock.wt > 0 #> <environment: 0x557aff7260f0> #>  #> $mat #> ~mat <= 1 & mat >= 0 #> <environment: 0x557aff7260f0> #>  #> $harvest.spwn #> ~harvest.spwn <= 1 & harvest.spwn >= 0 #> <environment: 0x557aff7260f0> #>  #> $m.spwn #> ~m.spwn <= 1 & m.spwn >= 0 #> <environment: 0x557aff7260f0> #>  #> $harvest #> ~harvest >= 0 #> <environment: 0x557aff7260f0> #>  #> $cohorts #> $cohorts$rule #> ~ccohorts(stock.n) #> <environment: 0x557aff7260f0> #>  #> $cohorts$ccohorts #> function(x) { #>         if(dim(x)[2] < dim(x)[1]) #>           return(NA) #>         #   DROP plusgroup, SELECT full cohorts #>         x <- FLCohort(x)[-dim(x)[1], seq(dim(x)[1], dim(x)[2] - dim(x)[1])] #>         # CHECK cohort change in abundances #>         return((x[-1, ] / x[-dim(x)[1],]) < 1) #>       } #> <bytecode: 0x557afe282bc8> #> <environment: 0x557aff7260f0> #>  #>  #> $uoms #> $uoms$rule #> [1] \"uoms\" #>  #> $uoms$uoms #> function(x) #>       uomUnits(unlist(units(x))) #> <bytecode: 0x557afe2891e8> #> <environment: 0x557aff7260f0> #>  #>  # Extract single rule by name ruleset(ple4, 'anyna') #> $anyna #> $anyna$rule #> [1] \"!anyna\" #>  #> $anyna$anyna #> function(x) #>       unlist(qapply(x, function(y) sum(is.na(y), na.rm=TRUE) > 0)) #> <bytecode: 0x557afe281d80> #> <environment: 0x557aff5fec80> #>  #>"},{"path":"/reference/runstest.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes Runs Test p-values — runstest","title":"Computes Runs Test p-values — runstest","text":"Computes Runs Test p-values","code":""},{"path":"/reference/runstest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes Runs Test p-values — runstest","text":"","code":"runstest(fit, obs, ...)  # S4 method for FLQuants,missing runstest(fit, combine = TRUE)  # S4 method for FLQuants,FLQuants runstest(fit, obs, combine = TRUE)  # S4 method for FLQuant,FLQuant runstest(fit, obs, combine = TRUE)  # S4 method for FLQuant,missing runstest(fit, combine = TRUE)  # S4 method for numeric,numeric runstest(fit, obs, combine = TRUE)  # S4 method for numeric,missing runstest(fit, obs, combine = TRUE)"},{"path":"/reference/runstest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes Runs Test p-values — runstest","text":"fit result model fit. obs observations used fit. ... Extra arguments. combine ages combined addition, defaults TRUE.","code":""},{"path":"/reference/runstest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes Runs Test p-values — runstest","text":"list elements 'p.values' 'pass'.","code":""},{"path":"/reference/runstest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes Runs Test p-values — runstest","text":"","code":"data(nsher) # Compute 'runstest' for FLSR fit runstest(fit=fitted(nsher), obs=rec(nsher)) #>         lcl      ucl p.value qname pass #> 1 -1.189247 1.189247   0.234     A TRUE # Example runstest by age data(ple4) runstest(catch.n(ple4), landings.n(ple4), combine=FALSE) #>              lcl          ucl p.value age qname  pass #> 1  -2.811846e+00 2.811846e+00   0.001   1     A FALSE #> 2  -1.339891e+00 1.339891e+00   0.001   2     A FALSE #> 3  -6.552912e-01 6.552912e-01   0.001   3     A FALSE #> 4  -4.274117e-01 4.274117e-01   0.001   4     A FALSE #> 5  -1.125936e-01 1.125936e-01   0.001   5     A FALSE #> 6  -3.002645e-02 3.002645e-02   0.001   6     A FALSE #> 7  -2.409905e-02 2.409905e-02   0.001   7     A FALSE #> 8  -1.192001e-02 1.192001e-02   0.001   8     A FALSE #> 9  -1.725063e-04 1.725063e-04   0.001   9     A FALSE #> 10 -6.805882e-05 6.805882e-05   0.001  10     A FALSE runstest(fit=FLQuants(D=residuals(catch(ple4), discards(ple4)),   L=residuals(catch(ple4), landings(ple4)))) #>          lcl       ucl p.value qname  pass #> 1 -0.5206050 0.5206050   0.001     D FALSE #> 2 -0.2531267 0.2531267   0.001     L FALSE runstest(fit=residuals(fitted(nsher), rec(nsher))) #>         lcl      ucl p.value qname pass #> 1 -1.189247 1.189247   0.234     A TRUE runstest(FLQuants(residuals(fitted(nsher), rec(nsher)))) #>         lcl      ucl p.value qname pass #> 1 -1.189247 1.189247   0.234  <NA> TRUE # Returns value per iter runstest(fit=rnorm(25, residuals(fitted(nsher), rec(nsher)), 0.2)) #> $A #>      iter       lcl      ucl p.value qname  pass #> 1       1 -1.440006 1.440006   0.441     A  TRUE #> 2       2 -1.336854 1.336854   0.025     A FALSE #> 3       3 -1.404849 1.404849   0.088     A  TRUE #> 4       4 -1.243019 1.243019   0.226     A  TRUE #> 5       5 -1.393433 1.393433   0.088     A  TRUE #> 6       6 -1.234886 1.234886   0.273     A  TRUE #> 7       7 -1.435763 1.435763   0.088     A  TRUE #> 8       8 -1.523302 1.523302   0.249     A  TRUE #> 9       9 -1.182922 1.182922   0.091     A  TRUE #> 10     10 -1.237815 1.237815   0.249     A  TRUE #> 11     11 -1.344669 1.344669   0.234     A  TRUE #> 12     12 -1.258182 1.258182   0.026     A FALSE #> 13     13 -1.420424 1.420424   0.234     A  TRUE #> 14     14 -1.394136 1.394136   0.099     A  TRUE #> 15     15 -1.453805 1.453805   0.099     A  TRUE #> 16     16 -1.408866 1.408866   0.686     A  TRUE #> 17     17 -1.363725 1.363725   0.099     A  TRUE #> 18     18 -1.401884 1.401884   0.025     A FALSE #> 19     19 -1.338102 1.338102   0.249     A  TRUE #> 20     20 -1.197513 1.197513   0.088     A  TRUE #> 21     21 -1.343913 1.343913   0.099     A  TRUE #> 22     22 -1.382179 1.382179   0.234     A  TRUE #> 23     23 -1.145647 1.145647   0.091     A  TRUE #> 24     24 -1.371010 1.371010   0.234     A  TRUE #> 25     25 -1.397024 1.397024   0.307     A  TRUE #> 26     26 -1.440006 1.440006   0.441     A  TRUE #> 27     27 -1.336854 1.336854   0.025     A FALSE #> 28     28 -1.404849 1.404849   0.088     A  TRUE #> 29     29 -1.243019 1.243019   0.226     A  TRUE #> 30     30 -1.393433 1.393433   0.088     A  TRUE #> 31     31 -1.234886 1.234886   0.273     A  TRUE #> 32     32 -1.435763 1.435763   0.088     A  TRUE #> 33     33 -1.523302 1.523302   0.249     A  TRUE #> 34     34 -1.182922 1.182922   0.091     A  TRUE #> 35     35 -1.237815 1.237815   0.249     A  TRUE #> 36     36 -1.344669 1.344669   0.234     A  TRUE #> 37     37 -1.258182 1.258182   0.026     A FALSE #> 38     38 -1.420424 1.420424   0.234     A  TRUE #> 39     39 -1.394136 1.394136   0.099     A  TRUE #> 40     40 -1.453805 1.453805   0.099     A  TRUE #> 41     41 -1.408866 1.408866   0.686     A  TRUE #> 42     42 -1.363725 1.363725   0.099     A  TRUE #> 43     43 -1.401884 1.401884   0.025     A FALSE #> 44     44 -1.338102 1.338102   0.249     A  TRUE #> 45     45 -1.197513 1.197513   0.088     A  TRUE #> 46     46 -1.343913 1.343913   0.099     A  TRUE #> 47     47 -1.382179 1.382179   0.234     A  TRUE #> 48     48 -1.145647 1.145647   0.091     A  TRUE #> 49     49 -1.371010 1.371010   0.234     A  TRUE #> 50     50 -1.397024 1.397024   0.307     A  TRUE #> 51     51 -1.440006 1.440006   0.441     A  TRUE #> 52     52 -1.336854 1.336854   0.025     A FALSE #> 53     53 -1.404849 1.404849   0.088     A  TRUE #> 54     54 -1.243019 1.243019   0.226     A  TRUE #> 55     55 -1.393433 1.393433   0.088     A  TRUE #> 56     56 -1.234886 1.234886   0.273     A  TRUE #> 57     57 -1.435763 1.435763   0.088     A  TRUE #> 58     58 -1.523302 1.523302   0.249     A  TRUE #> 59     59 -1.182922 1.182922   0.091     A  TRUE #> 60     60 -1.237815 1.237815   0.249     A  TRUE #> 61     61 -1.344669 1.344669   0.234     A  TRUE #> 62     62 -1.258182 1.258182   0.026     A FALSE #> 63     63 -1.420424 1.420424   0.234     A  TRUE #> 64     64 -1.394136 1.394136   0.099     A  TRUE #> 65     65 -1.453805 1.453805   0.099     A  TRUE #> 66     66 -1.408866 1.408866   0.686     A  TRUE #> 67     67 -1.363725 1.363725   0.099     A  TRUE #> 68     68 -1.401884 1.401884   0.025     A FALSE #> 69     69 -1.338102 1.338102   0.249     A  TRUE #> 70     70 -1.197513 1.197513   0.088     A  TRUE #> 71     71 -1.343913 1.343913   0.099     A  TRUE #> 72     72 -1.382179 1.382179   0.234     A  TRUE #> 73     73 -1.145647 1.145647   0.091     A  TRUE #> 74     74 -1.371010 1.371010   0.234     A  TRUE #> 75     75 -1.397024 1.397024   0.307     A  TRUE #> 76     76 -1.440006 1.440006   0.441     A  TRUE #> 77     77 -1.336854 1.336854   0.025     A FALSE #> 78     78 -1.404849 1.404849   0.088     A  TRUE #> 79     79 -1.243019 1.243019   0.226     A  TRUE #> 80     80 -1.393433 1.393433   0.088     A  TRUE #> 81     81 -1.234886 1.234886   0.273     A  TRUE #> 82     82 -1.435763 1.435763   0.088     A  TRUE #> 83     83 -1.523302 1.523302   0.249     A  TRUE #> 84     84 -1.182922 1.182922   0.091     A  TRUE #> 85     85 -1.237815 1.237815   0.249     A  TRUE #> 86     86 -1.344669 1.344669   0.234     A  TRUE #> 87     87 -1.258182 1.258182   0.026     A FALSE #> 88     88 -1.420424 1.420424   0.234     A  TRUE #> 89     89 -1.394136 1.394136   0.099     A  TRUE #> 90     90 -1.453805 1.453805   0.099     A  TRUE #> 91     91 -1.408866 1.408866   0.686     A  TRUE #> 92     92 -1.363725 1.363725   0.099     A  TRUE #> 93     93 -1.401884 1.401884   0.025     A FALSE #> 94     94 -1.338102 1.338102   0.249     A  TRUE #> 95     95 -1.197513 1.197513   0.088     A  TRUE #> 96     96 -1.343913 1.343913   0.099     A  TRUE #> 97     97 -1.382179 1.382179   0.234     A  TRUE #> 98     98 -1.145647 1.145647   0.091     A  TRUE #> 99     99 -1.371010 1.371010   0.234     A  TRUE #> 100   100 -1.397024 1.397024   0.307     A  TRUE #> 101   101 -1.440006 1.440006   0.441     A  TRUE #> 102   102 -1.336854 1.336854   0.025     A FALSE #> 103   103 -1.404849 1.404849   0.088     A  TRUE #> 104   104 -1.243019 1.243019   0.226     A  TRUE #> 105   105 -1.393433 1.393433   0.088     A  TRUE #> 106   106 -1.234886 1.234886   0.273     A  TRUE #> 107   107 -1.435763 1.435763   0.088     A  TRUE #> 108   108 -1.523302 1.523302   0.249     A  TRUE #> 109   109 -1.182922 1.182922   0.091     A  TRUE #> 110   110 -1.237815 1.237815   0.249     A  TRUE #> 111   111 -1.344669 1.344669   0.234     A  TRUE #> 112   112 -1.258182 1.258182   0.026     A FALSE #> 113   113 -1.420424 1.420424   0.234     A  TRUE #> 114   114 -1.394136 1.394136   0.099     A  TRUE #> 115   115 -1.453805 1.453805   0.099     A  TRUE #> 116   116 -1.408866 1.408866   0.686     A  TRUE #> 117   117 -1.363725 1.363725   0.099     A  TRUE #> 118   118 -1.401884 1.401884   0.025     A FALSE #> 119   119 -1.338102 1.338102   0.249     A  TRUE #> 120   120 -1.197513 1.197513   0.088     A  TRUE #> 121   121 -1.343913 1.343913   0.099     A  TRUE #> 122   122 -1.382179 1.382179   0.234     A  TRUE #> 123   123 -1.145647 1.145647   0.091     A  TRUE #> 124   124 -1.371010 1.371010   0.234     A  TRUE #> 125   125 -1.397024 1.397024   0.307     A  TRUE #> 126   126 -1.440006 1.440006   0.441     A  TRUE #> 127   127 -1.336854 1.336854   0.025     A FALSE #> 128   128 -1.404849 1.404849   0.088     A  TRUE #> 129   129 -1.243019 1.243019   0.226     A  TRUE #> 130   130 -1.393433 1.393433   0.088     A  TRUE #> 131   131 -1.234886 1.234886   0.273     A  TRUE #> 132   132 -1.435763 1.435763   0.088     A  TRUE #> 133   133 -1.523302 1.523302   0.249     A  TRUE #> 134   134 -1.182922 1.182922   0.091     A  TRUE #> 135   135 -1.237815 1.237815   0.249     A  TRUE #> 136   136 -1.344669 1.344669   0.234     A  TRUE #> 137   137 -1.258182 1.258182   0.026     A FALSE #> 138   138 -1.420424 1.420424   0.234     A  TRUE #> 139   139 -1.394136 1.394136   0.099     A  TRUE #> 140   140 -1.453805 1.453805   0.099     A  TRUE #> 141   141 -1.408866 1.408866   0.686     A  TRUE #> 142   142 -1.363725 1.363725   0.099     A  TRUE #> 143   143 -1.401884 1.401884   0.025     A FALSE #> 144   144 -1.338102 1.338102   0.249     A  TRUE #> 145   145 -1.197513 1.197513   0.088     A  TRUE #> 146   146 -1.343913 1.343913   0.099     A  TRUE #> 147   147 -1.382179 1.382179   0.234     A  TRUE #> 148   148 -1.145647 1.145647   0.091     A  TRUE #> 149   149 -1.371010 1.371010   0.234     A  TRUE #> 150   150 -1.397024 1.397024   0.307     A  TRUE #> 151   151 -1.440006 1.440006   0.441     A  TRUE #> 152   152 -1.336854 1.336854   0.025     A FALSE #> 153   153 -1.404849 1.404849   0.088     A  TRUE #> 154   154 -1.243019 1.243019   0.226     A  TRUE #> 155   155 -1.393433 1.393433   0.088     A  TRUE #> 156   156 -1.234886 1.234886   0.273     A  TRUE #> 157   157 -1.435763 1.435763   0.088     A  TRUE #> 158   158 -1.523302 1.523302   0.249     A  TRUE #> 159   159 -1.182922 1.182922   0.091     A  TRUE #> 160   160 -1.237815 1.237815   0.249     A  TRUE #> 161   161 -1.344669 1.344669   0.234     A  TRUE #> 162   162 -1.258182 1.258182   0.026     A FALSE #> 163   163 -1.420424 1.420424   0.234     A  TRUE #> 164   164 -1.394136 1.394136   0.099     A  TRUE #> 165   165 -1.453805 1.453805   0.099     A  TRUE #> 166   166 -1.408866 1.408866   0.686     A  TRUE #> 167   167 -1.363725 1.363725   0.099     A  TRUE #> 168   168 -1.401884 1.401884   0.025     A FALSE #> 169   169 -1.338102 1.338102   0.249     A  TRUE #> 170   170 -1.197513 1.197513   0.088     A  TRUE #> 171   171 -1.343913 1.343913   0.099     A  TRUE #> 172   172 -1.382179 1.382179   0.234     A  TRUE #> 173   173 -1.145647 1.145647   0.091     A  TRUE #> 174   174 -1.371010 1.371010   0.234     A  TRUE #> 175   175 -1.397024 1.397024   0.307     A  TRUE #> 176   176 -1.440006 1.440006   0.441     A  TRUE #> 177   177 -1.336854 1.336854   0.025     A FALSE #> 178   178 -1.404849 1.404849   0.088     A  TRUE #> 179   179 -1.243019 1.243019   0.226     A  TRUE #> 180   180 -1.393433 1.393433   0.088     A  TRUE #> 181   181 -1.234886 1.234886   0.273     A  TRUE #> 182   182 -1.435763 1.435763   0.088     A  TRUE #> 183   183 -1.523302 1.523302   0.249     A  TRUE #> 184   184 -1.182922 1.182922   0.091     A  TRUE #> 185   185 -1.237815 1.237815   0.249     A  TRUE #> 186   186 -1.344669 1.344669   0.234     A  TRUE #> 187   187 -1.258182 1.258182   0.026     A FALSE #> 188   188 -1.420424 1.420424   0.234     A  TRUE #> 189   189 -1.394136 1.394136   0.099     A  TRUE #> 190   190 -1.453805 1.453805   0.099     A  TRUE #> 191   191 -1.408866 1.408866   0.686     A  TRUE #> 192   192 -1.363725 1.363725   0.099     A  TRUE #> 193   193 -1.401884 1.401884   0.025     A FALSE #> 194   194 -1.338102 1.338102   0.249     A  TRUE #> 195   195 -1.197513 1.197513   0.088     A  TRUE #> 196   196 -1.343913 1.343913   0.099     A  TRUE #> 197   197 -1.382179 1.382179   0.234     A  TRUE #> 198   198 -1.145647 1.145647   0.091     A  TRUE #> 199   199 -1.371010 1.371010   0.234     A  TRUE #> 200   200 -1.397024 1.397024   0.307     A  TRUE #> 201   201 -1.440006 1.440006   0.441     A  TRUE #> 202   202 -1.336854 1.336854   0.025     A FALSE #> 203   203 -1.404849 1.404849   0.088     A  TRUE #> 204   204 -1.243019 1.243019   0.226     A  TRUE #> 205   205 -1.393433 1.393433   0.088     A  TRUE #> 206   206 -1.234886 1.234886   0.273     A  TRUE #> 207   207 -1.435763 1.435763   0.088     A  TRUE #> 208   208 -1.523302 1.523302   0.249     A  TRUE #> 209   209 -1.182922 1.182922   0.091     A  TRUE #> 210   210 -1.237815 1.237815   0.249     A  TRUE #> 211   211 -1.344669 1.344669   0.234     A  TRUE #> 212   212 -1.258182 1.258182   0.026     A FALSE #> 213   213 -1.420424 1.420424   0.234     A  TRUE #> 214   214 -1.394136 1.394136   0.099     A  TRUE #> 215   215 -1.453805 1.453805   0.099     A  TRUE #> 216   216 -1.408866 1.408866   0.686     A  TRUE #> 217   217 -1.363725 1.363725   0.099     A  TRUE #> 218   218 -1.401884 1.401884   0.025     A FALSE #> 219   219 -1.338102 1.338102   0.249     A  TRUE #> 220   220 -1.197513 1.197513   0.088     A  TRUE #> 221   221 -1.343913 1.343913   0.099     A  TRUE #> 222   222 -1.382179 1.382179   0.234     A  TRUE #> 223   223 -1.145647 1.145647   0.091     A  TRUE #> 224   224 -1.371010 1.371010   0.234     A  TRUE #> 225   225 -1.397024 1.397024   0.307     A  TRUE #> 226   226 -1.440006 1.440006   0.441     A  TRUE #> 227   227 -1.336854 1.336854   0.025     A FALSE #> 228   228 -1.404849 1.404849   0.088     A  TRUE #> 229   229 -1.243019 1.243019   0.226     A  TRUE #> 230   230 -1.393433 1.393433   0.088     A  TRUE #> 231   231 -1.234886 1.234886   0.273     A  TRUE #> 232   232 -1.435763 1.435763   0.088     A  TRUE #> 233   233 -1.523302 1.523302   0.249     A  TRUE #> 234   234 -1.182922 1.182922   0.091     A  TRUE #> 235   235 -1.237815 1.237815   0.249     A  TRUE #> 236   236 -1.344669 1.344669   0.234     A  TRUE #> 237   237 -1.258182 1.258182   0.026     A FALSE #> 238   238 -1.420424 1.420424   0.234     A  TRUE #> 239   239 -1.394136 1.394136   0.099     A  TRUE #> 240   240 -1.453805 1.453805   0.099     A  TRUE #> 241   241 -1.408866 1.408866   0.686     A  TRUE #> 242   242 -1.363725 1.363725   0.099     A  TRUE #> 243   243 -1.401884 1.401884   0.025     A FALSE #> 244   244 -1.338102 1.338102   0.249     A  TRUE #> 245   245 -1.197513 1.197513   0.088     A  TRUE #> 246   246 -1.343913 1.343913   0.099     A  TRUE #> 247   247 -1.382179 1.382179   0.234     A  TRUE #> 248   248 -1.145647 1.145647   0.091     A  TRUE #> 249   249 -1.371010 1.371010   0.234     A  TRUE #> 250   250 -1.397024 1.397024   0.307     A  TRUE #> 251   251 -1.440006 1.440006   0.441     A  TRUE #> 252   252 -1.336854 1.336854   0.025     A FALSE #> 253   253 -1.404849 1.404849   0.088     A  TRUE #> 254   254 -1.243019 1.243019   0.226     A  TRUE #> 255   255 -1.393433 1.393433   0.088     A  TRUE #> 256   256 -1.234886 1.234886   0.273     A  TRUE #> 257   257 -1.435763 1.435763   0.088     A  TRUE #> 258   258 -1.523302 1.523302   0.249     A  TRUE #> 259   259 -1.182922 1.182922   0.091     A  TRUE #> 260   260 -1.237815 1.237815   0.249     A  TRUE #> 261   261 -1.344669 1.344669   0.234     A  TRUE #> 262   262 -1.258182 1.258182   0.026     A FALSE #> 263   263 -1.420424 1.420424   0.234     A  TRUE #> 264   264 -1.394136 1.394136   0.099     A  TRUE #> 265   265 -1.453805 1.453805   0.099     A  TRUE #> 266   266 -1.408866 1.408866   0.686     A  TRUE #> 267   267 -1.363725 1.363725   0.099     A  TRUE #> 268   268 -1.401884 1.401884   0.025     A FALSE #> 269   269 -1.338102 1.338102   0.249     A  TRUE #> 270   270 -1.197513 1.197513   0.088     A  TRUE #> 271   271 -1.343913 1.343913   0.099     A  TRUE #> 272   272 -1.382179 1.382179   0.234     A  TRUE #> 273   273 -1.145647 1.145647   0.091     A  TRUE #> 274   274 -1.371010 1.371010   0.234     A  TRUE #> 275   275 -1.397024 1.397024   0.307     A  TRUE #> 276   276 -1.440006 1.440006   0.441     A  TRUE #> 277   277 -1.336854 1.336854   0.025     A FALSE #> 278   278 -1.404849 1.404849   0.088     A  TRUE #> 279   279 -1.243019 1.243019   0.226     A  TRUE #> 280   280 -1.393433 1.393433   0.088     A  TRUE #> 281   281 -1.234886 1.234886   0.273     A  TRUE #> 282   282 -1.435763 1.435763   0.088     A  TRUE #> 283   283 -1.523302 1.523302   0.249     A  TRUE #> 284   284 -1.182922 1.182922   0.091     A  TRUE #> 285   285 -1.237815 1.237815   0.249     A  TRUE #> 286   286 -1.344669 1.344669   0.234     A  TRUE #> 287   287 -1.258182 1.258182   0.026     A FALSE #> 288   288 -1.420424 1.420424   0.234     A  TRUE #> 289   289 -1.394136 1.394136   0.099     A  TRUE #> 290   290 -1.453805 1.453805   0.099     A  TRUE #> 291   291 -1.408866 1.408866   0.686     A  TRUE #> 292   292 -1.363725 1.363725   0.099     A  TRUE #> 293   293 -1.401884 1.401884   0.025     A FALSE #> 294   294 -1.338102 1.338102   0.249     A  TRUE #> 295   295 -1.197513 1.197513   0.088     A  TRUE #> 296   296 -1.343913 1.343913   0.099     A  TRUE #> 297   297 -1.382179 1.382179   0.234     A  TRUE #> 298   298 -1.145647 1.145647   0.091     A  TRUE #> 299   299 -1.371010 1.371010   0.234     A  TRUE #> 300   300 -1.397024 1.397024   0.307     A  TRUE #> 301   301 -1.440006 1.440006   0.441     A  TRUE #> 302   302 -1.336854 1.336854   0.025     A FALSE #> 303   303 -1.404849 1.404849   0.088     A  TRUE #> 304   304 -1.243019 1.243019   0.226     A  TRUE #> 305   305 -1.393433 1.393433   0.088     A  TRUE #> 306   306 -1.234886 1.234886   0.273     A  TRUE #> 307   307 -1.435763 1.435763   0.088     A  TRUE #> 308   308 -1.523302 1.523302   0.249     A  TRUE #> 309   309 -1.182922 1.182922   0.091     A  TRUE #> 310   310 -1.237815 1.237815   0.249     A  TRUE #> 311   311 -1.344669 1.344669   0.234     A  TRUE #> 312   312 -1.258182 1.258182   0.026     A FALSE #> 313   313 -1.420424 1.420424   0.234     A  TRUE #> 314   314 -1.394136 1.394136   0.099     A  TRUE #> 315   315 -1.453805 1.453805   0.099     A  TRUE #> 316   316 -1.408866 1.408866   0.686     A  TRUE #> 317   317 -1.363725 1.363725   0.099     A  TRUE #> 318   318 -1.401884 1.401884   0.025     A FALSE #> 319   319 -1.338102 1.338102   0.249     A  TRUE #> 320   320 -1.197513 1.197513   0.088     A  TRUE #> 321   321 -1.343913 1.343913   0.099     A  TRUE #> 322   322 -1.382179 1.382179   0.234     A  TRUE #> 323   323 -1.145647 1.145647   0.091     A  TRUE #> 324   324 -1.371010 1.371010   0.234     A  TRUE #> 325   325 -1.397024 1.397024   0.307     A  TRUE #> 326   326 -1.440006 1.440006   0.441     A  TRUE #> 327   327 -1.336854 1.336854   0.025     A FALSE #> 328   328 -1.404849 1.404849   0.088     A  TRUE #> 329   329 -1.243019 1.243019   0.226     A  TRUE #> 330   330 -1.393433 1.393433   0.088     A  TRUE #> 331   331 -1.234886 1.234886   0.273     A  TRUE #> 332   332 -1.435763 1.435763   0.088     A  TRUE #> 333   333 -1.523302 1.523302   0.249     A  TRUE #> 334   334 -1.182922 1.182922   0.091     A  TRUE #> 335   335 -1.237815 1.237815   0.249     A  TRUE #> 336   336 -1.344669 1.344669   0.234     A  TRUE #> 337   337 -1.258182 1.258182   0.026     A FALSE #> 338   338 -1.420424 1.420424   0.234     A  TRUE #> 339   339 -1.394136 1.394136   0.099     A  TRUE #> 340   340 -1.453805 1.453805   0.099     A  TRUE #> 341   341 -1.408866 1.408866   0.686     A  TRUE #> 342   342 -1.363725 1.363725   0.099     A  TRUE #> 343   343 -1.401884 1.401884   0.025     A FALSE #> 344   344 -1.338102 1.338102   0.249     A  TRUE #> 345   345 -1.197513 1.197513   0.088     A  TRUE #> 346   346 -1.343913 1.343913   0.099     A  TRUE #> 347   347 -1.382179 1.382179   0.234     A  TRUE #> 348   348 -1.145647 1.145647   0.091     A  TRUE #> 349   349 -1.371010 1.371010   0.234     A  TRUE #> 350   350 -1.397024 1.397024   0.307     A  TRUE #> 351   351 -1.440006 1.440006   0.441     A  TRUE #> 352   352 -1.336854 1.336854   0.025     A FALSE #> 353   353 -1.404849 1.404849   0.088     A  TRUE #> 354   354 -1.243019 1.243019   0.226     A  TRUE #> 355   355 -1.393433 1.393433   0.088     A  TRUE #> 356   356 -1.234886 1.234886   0.273     A  TRUE #> 357   357 -1.435763 1.435763   0.088     A  TRUE #> 358   358 -1.523302 1.523302   0.249     A  TRUE #> 359   359 -1.182922 1.182922   0.091     A  TRUE #> 360   360 -1.237815 1.237815   0.249     A  TRUE #> 361   361 -1.344669 1.344669   0.234     A  TRUE #> 362   362 -1.258182 1.258182   0.026     A FALSE #> 363   363 -1.420424 1.420424   0.234     A  TRUE #> 364   364 -1.394136 1.394136   0.099     A  TRUE #> 365   365 -1.453805 1.453805   0.099     A  TRUE #> 366   366 -1.408866 1.408866   0.686     A  TRUE #> 367   367 -1.363725 1.363725   0.099     A  TRUE #> 368   368 -1.401884 1.401884   0.025     A FALSE #> 369   369 -1.338102 1.338102   0.249     A  TRUE #> 370   370 -1.197513 1.197513   0.088     A  TRUE #> 371   371 -1.343913 1.343913   0.099     A  TRUE #> 372   372 -1.382179 1.382179   0.234     A  TRUE #> 373   373 -1.145647 1.145647   0.091     A  TRUE #> 374   374 -1.371010 1.371010   0.234     A  TRUE #> 375   375 -1.397024 1.397024   0.307     A  TRUE #> 376   376 -1.440006 1.440006   0.441     A  TRUE #> 377   377 -1.336854 1.336854   0.025     A FALSE #> 378   378 -1.404849 1.404849   0.088     A  TRUE #> 379   379 -1.243019 1.243019   0.226     A  TRUE #> 380   380 -1.393433 1.393433   0.088     A  TRUE #> 381   381 -1.234886 1.234886   0.273     A  TRUE #> 382   382 -1.435763 1.435763   0.088     A  TRUE #> 383   383 -1.523302 1.523302   0.249     A  TRUE #> 384   384 -1.182922 1.182922   0.091     A  TRUE #> 385   385 -1.237815 1.237815   0.249     A  TRUE #> 386   386 -1.344669 1.344669   0.234     A  TRUE #> 387   387 -1.258182 1.258182   0.026     A FALSE #> 388   388 -1.420424 1.420424   0.234     A  TRUE #> 389   389 -1.394136 1.394136   0.099     A  TRUE #> 390   390 -1.453805 1.453805   0.099     A  TRUE #> 391   391 -1.408866 1.408866   0.686     A  TRUE #> 392   392 -1.363725 1.363725   0.099     A  TRUE #> 393   393 -1.401884 1.401884   0.025     A FALSE #> 394   394 -1.338102 1.338102   0.249     A  TRUE #> 395   395 -1.197513 1.197513   0.088     A  TRUE #> 396   396 -1.343913 1.343913   0.099     A  TRUE #> 397   397 -1.382179 1.382179   0.234     A  TRUE #> 398   398 -1.145647 1.145647   0.091     A  TRUE #> 399   399 -1.371010 1.371010   0.234     A  TRUE #> 400   400 -1.397024 1.397024   0.307     A  TRUE #> 401   401 -1.440006 1.440006   0.441     A  TRUE #> 402   402 -1.336854 1.336854   0.025     A FALSE #> 403   403 -1.404849 1.404849   0.088     A  TRUE #> 404   404 -1.243019 1.243019   0.226     A  TRUE #> 405   405 -1.393433 1.393433   0.088     A  TRUE #> 406   406 -1.234886 1.234886   0.273     A  TRUE #> 407   407 -1.435763 1.435763   0.088     A  TRUE #> 408   408 -1.523302 1.523302   0.249     A  TRUE #> 409   409 -1.182922 1.182922   0.091     A  TRUE #> 410   410 -1.237815 1.237815   0.249     A  TRUE #> 411   411 -1.344669 1.344669   0.234     A  TRUE #> 412   412 -1.258182 1.258182   0.026     A FALSE #> 413   413 -1.420424 1.420424   0.234     A  TRUE #> 414   414 -1.394136 1.394136   0.099     A  TRUE #> 415   415 -1.453805 1.453805   0.099     A  TRUE #> 416   416 -1.408866 1.408866   0.686     A  TRUE #> 417   417 -1.363725 1.363725   0.099     A  TRUE #> 418   418 -1.401884 1.401884   0.025     A FALSE #> 419   419 -1.338102 1.338102   0.249     A  TRUE #> 420   420 -1.197513 1.197513   0.088     A  TRUE #> 421   421 -1.343913 1.343913   0.099     A  TRUE #> 422   422 -1.382179 1.382179   0.234     A  TRUE #> 423   423 -1.145647 1.145647   0.091     A  TRUE #> 424   424 -1.371010 1.371010   0.234     A  TRUE #> 425   425 -1.397024 1.397024   0.307     A  TRUE #> 426   426 -1.440006 1.440006   0.441     A  TRUE #> 427   427 -1.336854 1.336854   0.025     A FALSE #> 428   428 -1.404849 1.404849   0.088     A  TRUE #> 429   429 -1.243019 1.243019   0.226     A  TRUE #> 430   430 -1.393433 1.393433   0.088     A  TRUE #> 431   431 -1.234886 1.234886   0.273     A  TRUE #> 432   432 -1.435763 1.435763   0.088     A  TRUE #> 433   433 -1.523302 1.523302   0.249     A  TRUE #> 434   434 -1.182922 1.182922   0.091     A  TRUE #> 435   435 -1.237815 1.237815   0.249     A  TRUE #> 436   436 -1.344669 1.344669   0.234     A  TRUE #> 437   437 -1.258182 1.258182   0.026     A FALSE #> 438   438 -1.420424 1.420424   0.234     A  TRUE #> 439   439 -1.394136 1.394136   0.099     A  TRUE #> 440   440 -1.453805 1.453805   0.099     A  TRUE #> 441   441 -1.408866 1.408866   0.686     A  TRUE #> 442   442 -1.363725 1.363725   0.099     A  TRUE #> 443   443 -1.401884 1.401884   0.025     A FALSE #> 444   444 -1.338102 1.338102   0.249     A  TRUE #> 445   445 -1.197513 1.197513   0.088     A  TRUE #> 446   446 -1.343913 1.343913   0.099     A  TRUE #> 447   447 -1.382179 1.382179   0.234     A  TRUE #> 448   448 -1.145647 1.145647   0.091     A  TRUE #> 449   449 -1.371010 1.371010   0.234     A  TRUE #> 450   450 -1.397024 1.397024   0.307     A  TRUE #> 451   451 -1.440006 1.440006   0.441     A  TRUE #> 452   452 -1.336854 1.336854   0.025     A FALSE #> 453   453 -1.404849 1.404849   0.088     A  TRUE #> 454   454 -1.243019 1.243019   0.226     A  TRUE #> 455   455 -1.393433 1.393433   0.088     A  TRUE #> 456   456 -1.234886 1.234886   0.273     A  TRUE #> 457   457 -1.435763 1.435763   0.088     A  TRUE #> 458   458 -1.523302 1.523302   0.249     A  TRUE #> 459   459 -1.182922 1.182922   0.091     A  TRUE #> 460   460 -1.237815 1.237815   0.249     A  TRUE #> 461   461 -1.344669 1.344669   0.234     A  TRUE #> 462   462 -1.258182 1.258182   0.026     A FALSE #> 463   463 -1.420424 1.420424   0.234     A  TRUE #> 464   464 -1.394136 1.394136   0.099     A  TRUE #> 465   465 -1.453805 1.453805   0.099     A  TRUE #> 466   466 -1.408866 1.408866   0.686     A  TRUE #> 467   467 -1.363725 1.363725   0.099     A  TRUE #> 468   468 -1.401884 1.401884   0.025     A FALSE #> 469   469 -1.338102 1.338102   0.249     A  TRUE #> 470   470 -1.197513 1.197513   0.088     A  TRUE #> 471   471 -1.343913 1.343913   0.099     A  TRUE #> 472   472 -1.382179 1.382179   0.234     A  TRUE #> 473   473 -1.145647 1.145647   0.091     A  TRUE #> 474   474 -1.371010 1.371010   0.234     A  TRUE #> 475   475 -1.397024 1.397024   0.307     A  TRUE #> 476   476 -1.440006 1.440006   0.441     A  TRUE #> 477   477 -1.336854 1.336854   0.025     A FALSE #> 478   478 -1.404849 1.404849   0.088     A  TRUE #> 479   479 -1.243019 1.243019   0.226     A  TRUE #> 480   480 -1.393433 1.393433   0.088     A  TRUE #> 481   481 -1.234886 1.234886   0.273     A  TRUE #> 482   482 -1.435763 1.435763   0.088     A  TRUE #> 483   483 -1.523302 1.523302   0.249     A  TRUE #> 484   484 -1.182922 1.182922   0.091     A  TRUE #> 485   485 -1.237815 1.237815   0.249     A  TRUE #> 486   486 -1.344669 1.344669   0.234     A  TRUE #> 487   487 -1.258182 1.258182   0.026     A FALSE #> 488   488 -1.420424 1.420424   0.234     A  TRUE #> 489   489 -1.394136 1.394136   0.099     A  TRUE #> 490   490 -1.453805 1.453805   0.099     A  TRUE #> 491   491 -1.408866 1.408866   0.686     A  TRUE #> 492   492 -1.363725 1.363725   0.099     A  TRUE #> 493   493 -1.401884 1.401884   0.025     A FALSE #> 494   494 -1.338102 1.338102   0.249     A  TRUE #> 495   495 -1.197513 1.197513   0.088     A  TRUE #> 496   496 -1.343913 1.343913   0.099     A  TRUE #> 497   497 -1.382179 1.382179   0.234     A  TRUE #> 498   498 -1.145647 1.145647   0.091     A  TRUE #> 499   499 -1.371010 1.371010   0.234     A  TRUE #> 500   500 -1.397024 1.397024   0.307     A  TRUE #> 501   501 -1.440006 1.440006   0.441     A  TRUE #> 502   502 -1.336854 1.336854   0.025     A FALSE #> 503   503 -1.404849 1.404849   0.088     A  TRUE #> 504   504 -1.243019 1.243019   0.226     A  TRUE #> 505   505 -1.393433 1.393433   0.088     A  TRUE #> 506   506 -1.234886 1.234886   0.273     A  TRUE #> 507   507 -1.435763 1.435763   0.088     A  TRUE #> 508   508 -1.523302 1.523302   0.249     A  TRUE #> 509   509 -1.182922 1.182922   0.091     A  TRUE #> 510   510 -1.237815 1.237815   0.249     A  TRUE #> 511   511 -1.344669 1.344669   0.234     A  TRUE #> 512   512 -1.258182 1.258182   0.026     A FALSE #> 513   513 -1.420424 1.420424   0.234     A  TRUE #> 514   514 -1.394136 1.394136   0.099     A  TRUE #> 515   515 -1.453805 1.453805   0.099     A  TRUE #> 516   516 -1.408866 1.408866   0.686     A  TRUE #> 517   517 -1.363725 1.363725   0.099     A  TRUE #> 518   518 -1.401884 1.401884   0.025     A FALSE #> 519   519 -1.338102 1.338102   0.249     A  TRUE #> 520   520 -1.197513 1.197513   0.088     A  TRUE #> 521   521 -1.343913 1.343913   0.099     A  TRUE #> 522   522 -1.382179 1.382179   0.234     A  TRUE #> 523   523 -1.145647 1.145647   0.091     A  TRUE #> 524   524 -1.371010 1.371010   0.234     A  TRUE #> 525   525 -1.397024 1.397024   0.307     A  TRUE #> 526   526 -1.440006 1.440006   0.441     A  TRUE #> 527   527 -1.336854 1.336854   0.025     A FALSE #> 528   528 -1.404849 1.404849   0.088     A  TRUE #> 529   529 -1.243019 1.243019   0.226     A  TRUE #> 530   530 -1.393433 1.393433   0.088     A  TRUE #> 531   531 -1.234886 1.234886   0.273     A  TRUE #> 532   532 -1.435763 1.435763   0.088     A  TRUE #> 533   533 -1.523302 1.523302   0.249     A  TRUE #> 534   534 -1.182922 1.182922   0.091     A  TRUE #> 535   535 -1.237815 1.237815   0.249     A  TRUE #> 536   536 -1.344669 1.344669   0.234     A  TRUE #> 537   537 -1.258182 1.258182   0.026     A FALSE #> 538   538 -1.420424 1.420424   0.234     A  TRUE #> 539   539 -1.394136 1.394136   0.099     A  TRUE #> 540   540 -1.453805 1.453805   0.099     A  TRUE #> 541   541 -1.408866 1.408866   0.686     A  TRUE #> 542   542 -1.363725 1.363725   0.099     A  TRUE #> 543   543 -1.401884 1.401884   0.025     A FALSE #> 544   544 -1.338102 1.338102   0.249     A  TRUE #> 545   545 -1.197513 1.197513   0.088     A  TRUE #> 546   546 -1.343913 1.343913   0.099     A  TRUE #> 547   547 -1.382179 1.382179   0.234     A  TRUE #> 548   548 -1.145647 1.145647   0.091     A  TRUE #> 549   549 -1.371010 1.371010   0.234     A  TRUE #> 550   550 -1.397024 1.397024   0.307     A  TRUE #> 551   551 -1.440006 1.440006   0.441     A  TRUE #> 552   552 -1.336854 1.336854   0.025     A FALSE #> 553   553 -1.404849 1.404849   0.088     A  TRUE #> 554   554 -1.243019 1.243019   0.226     A  TRUE #> 555   555 -1.393433 1.393433   0.088     A  TRUE #> 556   556 -1.234886 1.234886   0.273     A  TRUE #> 557   557 -1.435763 1.435763   0.088     A  TRUE #> 558   558 -1.523302 1.523302   0.249     A  TRUE #> 559   559 -1.182922 1.182922   0.091     A  TRUE #> 560   560 -1.237815 1.237815   0.249     A  TRUE #> 561   561 -1.344669 1.344669   0.234     A  TRUE #> 562   562 -1.258182 1.258182   0.026     A FALSE #> 563   563 -1.420424 1.420424   0.234     A  TRUE #> 564   564 -1.394136 1.394136   0.099     A  TRUE #> 565   565 -1.453805 1.453805   0.099     A  TRUE #> 566   566 -1.408866 1.408866   0.686     A  TRUE #> 567   567 -1.363725 1.363725   0.099     A  TRUE #> 568   568 -1.401884 1.401884   0.025     A FALSE #> 569   569 -1.338102 1.338102   0.249     A  TRUE #> 570   570 -1.197513 1.197513   0.088     A  TRUE #> 571   571 -1.343913 1.343913   0.099     A  TRUE #> 572   572 -1.382179 1.382179   0.234     A  TRUE #> 573   573 -1.145647 1.145647   0.091     A  TRUE #> 574   574 -1.371010 1.371010   0.234     A  TRUE #> 575   575 -1.397024 1.397024   0.307     A  TRUE #> 576   576 -1.440006 1.440006   0.441     A  TRUE #> 577   577 -1.336854 1.336854   0.025     A FALSE #> 578   578 -1.404849 1.404849   0.088     A  TRUE #> 579   579 -1.243019 1.243019   0.226     A  TRUE #> 580   580 -1.393433 1.393433   0.088     A  TRUE #> 581   581 -1.234886 1.234886   0.273     A  TRUE #> 582   582 -1.435763 1.435763   0.088     A  TRUE #> 583   583 -1.523302 1.523302   0.249     A  TRUE #> 584   584 -1.182922 1.182922   0.091     A  TRUE #> 585   585 -1.237815 1.237815   0.249     A  TRUE #> 586   586 -1.344669 1.344669   0.234     A  TRUE #> 587   587 -1.258182 1.258182   0.026     A FALSE #> 588   588 -1.420424 1.420424   0.234     A  TRUE #> 589   589 -1.394136 1.394136   0.099     A  TRUE #> 590   590 -1.453805 1.453805   0.099     A  TRUE #> 591   591 -1.408866 1.408866   0.686     A  TRUE #> 592   592 -1.363725 1.363725   0.099     A  TRUE #> 593   593 -1.401884 1.401884   0.025     A FALSE #> 594   594 -1.338102 1.338102   0.249     A  TRUE #> 595   595 -1.197513 1.197513   0.088     A  TRUE #> 596   596 -1.343913 1.343913   0.099     A  TRUE #> 597   597 -1.382179 1.382179   0.234     A  TRUE #> 598   598 -1.145647 1.145647   0.091     A  TRUE #> 599   599 -1.371010 1.371010   0.234     A  TRUE #> 600   600 -1.397024 1.397024   0.307     A  TRUE #> 601   601 -1.440006 1.440006   0.441     A  TRUE #> 602   602 -1.336854 1.336854   0.025     A FALSE #> 603   603 -1.404849 1.404849   0.088     A  TRUE #> 604   604 -1.243019 1.243019   0.226     A  TRUE #> 605   605 -1.393433 1.393433   0.088     A  TRUE #> 606   606 -1.234886 1.234886   0.273     A  TRUE #> 607   607 -1.435763 1.435763   0.088     A  TRUE #> 608   608 -1.523302 1.523302   0.249     A  TRUE #> 609   609 -1.182922 1.182922   0.091     A  TRUE #> 610   610 -1.237815 1.237815   0.249     A  TRUE #> 611   611 -1.344669 1.344669   0.234     A  TRUE #> 612   612 -1.258182 1.258182   0.026     A FALSE #> 613   613 -1.420424 1.420424   0.234     A  TRUE #> 614   614 -1.394136 1.394136   0.099     A  TRUE #> 615   615 -1.453805 1.453805   0.099     A  TRUE #> 616   616 -1.408866 1.408866   0.686     A  TRUE #> 617   617 -1.363725 1.363725   0.099     A  TRUE #> 618   618 -1.401884 1.401884   0.025     A FALSE #> 619   619 -1.338102 1.338102   0.249     A  TRUE #> 620   620 -1.197513 1.197513   0.088     A  TRUE #> 621   621 -1.343913 1.343913   0.099     A  TRUE #> 622   622 -1.382179 1.382179   0.234     A  TRUE #> 623   623 -1.145647 1.145647   0.091     A  TRUE #> 624   624 -1.371010 1.371010   0.234     A  TRUE #> 625   625 -1.397024 1.397024   0.307     A  TRUE #> 626   626 -1.440006 1.440006   0.441     A  TRUE #> 627   627 -1.336854 1.336854   0.025     A FALSE #> 628   628 -1.404849 1.404849   0.088     A  TRUE #> 629   629 -1.243019 1.243019   0.226     A  TRUE #> 630   630 -1.393433 1.393433   0.088     A  TRUE #> 631   631 -1.234886 1.234886   0.273     A  TRUE #> 632   632 -1.435763 1.435763   0.088     A  TRUE #> 633   633 -1.523302 1.523302   0.249     A  TRUE #> 634   634 -1.182922 1.182922   0.091     A  TRUE #> 635   635 -1.237815 1.237815   0.249     A  TRUE #> 636   636 -1.344669 1.344669   0.234     A  TRUE #> 637   637 -1.258182 1.258182   0.026     A FALSE #> 638   638 -1.420424 1.420424   0.234     A  TRUE #> 639   639 -1.394136 1.394136   0.099     A  TRUE #> 640   640 -1.453805 1.453805   0.099     A  TRUE #> 641   641 -1.408866 1.408866   0.686     A  TRUE #> 642   642 -1.363725 1.363725   0.099     A  TRUE #> 643   643 -1.401884 1.401884   0.025     A FALSE #> 644   644 -1.338102 1.338102   0.249     A  TRUE #> 645   645 -1.197513 1.197513   0.088     A  TRUE #> 646   646 -1.343913 1.343913   0.099     A  TRUE #> 647   647 -1.382179 1.382179   0.234     A  TRUE #> 648   648 -1.145647 1.145647   0.091     A  TRUE #> 649   649 -1.371010 1.371010   0.234     A  TRUE #> 650   650 -1.397024 1.397024   0.307     A  TRUE #> 651   651 -1.440006 1.440006   0.441     A  TRUE #> 652   652 -1.336854 1.336854   0.025     A FALSE #> 653   653 -1.404849 1.404849   0.088     A  TRUE #> 654   654 -1.243019 1.243019   0.226     A  TRUE #> 655   655 -1.393433 1.393433   0.088     A  TRUE #> 656   656 -1.234886 1.234886   0.273     A  TRUE #> 657   657 -1.435763 1.435763   0.088     A  TRUE #> 658   658 -1.523302 1.523302   0.249     A  TRUE #> 659   659 -1.182922 1.182922   0.091     A  TRUE #> 660   660 -1.237815 1.237815   0.249     A  TRUE #> 661   661 -1.344669 1.344669   0.234     A  TRUE #> 662   662 -1.258182 1.258182   0.026     A FALSE #> 663   663 -1.420424 1.420424   0.234     A  TRUE #> 664   664 -1.394136 1.394136   0.099     A  TRUE #> 665   665 -1.453805 1.453805   0.099     A  TRUE #> 666   666 -1.408866 1.408866   0.686     A  TRUE #> 667   667 -1.363725 1.363725   0.099     A  TRUE #> 668   668 -1.401884 1.401884   0.025     A FALSE #> 669   669 -1.338102 1.338102   0.249     A  TRUE #> 670   670 -1.197513 1.197513   0.088     A  TRUE #> 671   671 -1.343913 1.343913   0.099     A  TRUE #> 672   672 -1.382179 1.382179   0.234     A  TRUE #> 673   673 -1.145647 1.145647   0.091     A  TRUE #> 674   674 -1.371010 1.371010   0.234     A  TRUE #> 675   675 -1.397024 1.397024   0.307     A  TRUE #> 676   676 -1.440006 1.440006   0.441     A  TRUE #> 677   677 -1.336854 1.336854   0.025     A FALSE #> 678   678 -1.404849 1.404849   0.088     A  TRUE #> 679   679 -1.243019 1.243019   0.226     A  TRUE #> 680   680 -1.393433 1.393433   0.088     A  TRUE #> 681   681 -1.234886 1.234886   0.273     A  TRUE #> 682   682 -1.435763 1.435763   0.088     A  TRUE #> 683   683 -1.523302 1.523302   0.249     A  TRUE #> 684   684 -1.182922 1.182922   0.091     A  TRUE #> 685   685 -1.237815 1.237815   0.249     A  TRUE #> 686   686 -1.344669 1.344669   0.234     A  TRUE #> 687   687 -1.258182 1.258182   0.026     A FALSE #> 688   688 -1.420424 1.420424   0.234     A  TRUE #> 689   689 -1.394136 1.394136   0.099     A  TRUE #> 690   690 -1.453805 1.453805   0.099     A  TRUE #> 691   691 -1.408866 1.408866   0.686     A  TRUE #> 692   692 -1.363725 1.363725   0.099     A  TRUE #> 693   693 -1.401884 1.401884   0.025     A FALSE #> 694   694 -1.338102 1.338102   0.249     A  TRUE #> 695   695 -1.197513 1.197513   0.088     A  TRUE #> 696   696 -1.343913 1.343913   0.099     A  TRUE #> 697   697 -1.382179 1.382179   0.234     A  TRUE #> 698   698 -1.145647 1.145647   0.091     A  TRUE #> 699   699 -1.371010 1.371010   0.234     A  TRUE #> 700   700 -1.397024 1.397024   0.307     A  TRUE #> 701   701 -1.440006 1.440006   0.441     A  TRUE #> 702   702 -1.336854 1.336854   0.025     A FALSE #> 703   703 -1.404849 1.404849   0.088     A  TRUE #> 704   704 -1.243019 1.243019   0.226     A  TRUE #> 705   705 -1.393433 1.393433   0.088     A  TRUE #> 706   706 -1.234886 1.234886   0.273     A  TRUE #> 707   707 -1.435763 1.435763   0.088     A  TRUE #> 708   708 -1.523302 1.523302   0.249     A  TRUE #> 709   709 -1.182922 1.182922   0.091     A  TRUE #> 710   710 -1.237815 1.237815   0.249     A  TRUE #> 711   711 -1.344669 1.344669   0.234     A  TRUE #> 712   712 -1.258182 1.258182   0.026     A FALSE #> 713   713 -1.420424 1.420424   0.234     A  TRUE #> 714   714 -1.394136 1.394136   0.099     A  TRUE #> 715   715 -1.453805 1.453805   0.099     A  TRUE #> 716   716 -1.408866 1.408866   0.686     A  TRUE #> 717   717 -1.363725 1.363725   0.099     A  TRUE #> 718   718 -1.401884 1.401884   0.025     A FALSE #> 719   719 -1.338102 1.338102   0.249     A  TRUE #> 720   720 -1.197513 1.197513   0.088     A  TRUE #> 721   721 -1.343913 1.343913   0.099     A  TRUE #> 722   722 -1.382179 1.382179   0.234     A  TRUE #> 723   723 -1.145647 1.145647   0.091     A  TRUE #> 724   724 -1.371010 1.371010   0.234     A  TRUE #> 725   725 -1.397024 1.397024   0.307     A  TRUE #> 726   726 -1.440006 1.440006   0.441     A  TRUE #> 727   727 -1.336854 1.336854   0.025     A FALSE #> 728   728 -1.404849 1.404849   0.088     A  TRUE #> 729   729 -1.243019 1.243019   0.226     A  TRUE #> 730   730 -1.393433 1.393433   0.088     A  TRUE #> 731   731 -1.234886 1.234886   0.273     A  TRUE #> 732   732 -1.435763 1.435763   0.088     A  TRUE #> 733   733 -1.523302 1.523302   0.249     A  TRUE #> 734   734 -1.182922 1.182922   0.091     A  TRUE #> 735   735 -1.237815 1.237815   0.249     A  TRUE #> 736   736 -1.344669 1.344669   0.234     A  TRUE #> 737   737 -1.258182 1.258182   0.026     A FALSE #> 738   738 -1.420424 1.420424   0.234     A  TRUE #> 739   739 -1.394136 1.394136   0.099     A  TRUE #> 740   740 -1.453805 1.453805   0.099     A  TRUE #> 741   741 -1.408866 1.408866   0.686     A  TRUE #> 742   742 -1.363725 1.363725   0.099     A  TRUE #> 743   743 -1.401884 1.401884   0.025     A FALSE #> 744   744 -1.338102 1.338102   0.249     A  TRUE #> 745   745 -1.197513 1.197513   0.088     A  TRUE #> 746   746 -1.343913 1.343913   0.099     A  TRUE #> 747   747 -1.382179 1.382179   0.234     A  TRUE #> 748   748 -1.145647 1.145647   0.091     A  TRUE #> 749   749 -1.371010 1.371010   0.234     A  TRUE #> 750   750 -1.397024 1.397024   0.307     A  TRUE #> 751   751 -1.440006 1.440006   0.441     A  TRUE #> 752   752 -1.336854 1.336854   0.025     A FALSE #> 753   753 -1.404849 1.404849   0.088     A  TRUE #> 754   754 -1.243019 1.243019   0.226     A  TRUE #> 755   755 -1.393433 1.393433   0.088     A  TRUE #> 756   756 -1.234886 1.234886   0.273     A  TRUE #> 757   757 -1.435763 1.435763   0.088     A  TRUE #> 758   758 -1.523302 1.523302   0.249     A  TRUE #> 759   759 -1.182922 1.182922   0.091     A  TRUE #> 760   760 -1.237815 1.237815   0.249     A  TRUE #> 761   761 -1.344669 1.344669   0.234     A  TRUE #> 762   762 -1.258182 1.258182   0.026     A FALSE #> 763   763 -1.420424 1.420424   0.234     A  TRUE #> 764   764 -1.394136 1.394136   0.099     A  TRUE #> 765   765 -1.453805 1.453805   0.099     A  TRUE #> 766   766 -1.408866 1.408866   0.686     A  TRUE #> 767   767 -1.363725 1.363725   0.099     A  TRUE #> 768   768 -1.401884 1.401884   0.025     A FALSE #> 769   769 -1.338102 1.338102   0.249     A  TRUE #> 770   770 -1.197513 1.197513   0.088     A  TRUE #> 771   771 -1.343913 1.343913   0.099     A  TRUE #> 772   772 -1.382179 1.382179   0.234     A  TRUE #> 773   773 -1.145647 1.145647   0.091     A  TRUE #> 774   774 -1.371010 1.371010   0.234     A  TRUE #> 775   775 -1.397024 1.397024   0.307     A  TRUE #> 776   776 -1.440006 1.440006   0.441     A  TRUE #> 777   777 -1.336854 1.336854   0.025     A FALSE #> 778   778 -1.404849 1.404849   0.088     A  TRUE #> 779   779 -1.243019 1.243019   0.226     A  TRUE #> 780   780 -1.393433 1.393433   0.088     A  TRUE #> 781   781 -1.234886 1.234886   0.273     A  TRUE #> 782   782 -1.435763 1.435763   0.088     A  TRUE #> 783   783 -1.523302 1.523302   0.249     A  TRUE #> 784   784 -1.182922 1.182922   0.091     A  TRUE #> 785   785 -1.237815 1.237815   0.249     A  TRUE #> 786   786 -1.344669 1.344669   0.234     A  TRUE #> 787   787 -1.258182 1.258182   0.026     A FALSE #> 788   788 -1.420424 1.420424   0.234     A  TRUE #> 789   789 -1.394136 1.394136   0.099     A  TRUE #> 790   790 -1.453805 1.453805   0.099     A  TRUE #> 791   791 -1.408866 1.408866   0.686     A  TRUE #> 792   792 -1.363725 1.363725   0.099     A  TRUE #> 793   793 -1.401884 1.401884   0.025     A FALSE #> 794   794 -1.338102 1.338102   0.249     A  TRUE #> 795   795 -1.197513 1.197513   0.088     A  TRUE #> 796   796 -1.343913 1.343913   0.099     A  TRUE #> 797   797 -1.382179 1.382179   0.234     A  TRUE #> 798   798 -1.145647 1.145647   0.091     A  TRUE #> 799   799 -1.371010 1.371010   0.234     A  TRUE #> 800   800 -1.397024 1.397024   0.307     A  TRUE #> 801   801 -1.440006 1.440006   0.441     A  TRUE #> 802   802 -1.336854 1.336854   0.025     A FALSE #> 803   803 -1.404849 1.404849   0.088     A  TRUE #> 804   804 -1.243019 1.243019   0.226     A  TRUE #> 805   805 -1.393433 1.393433   0.088     A  TRUE #> 806   806 -1.234886 1.234886   0.273     A  TRUE #> 807   807 -1.435763 1.435763   0.088     A  TRUE #> 808   808 -1.523302 1.523302   0.249     A  TRUE #> 809   809 -1.182922 1.182922   0.091     A  TRUE #> 810   810 -1.237815 1.237815   0.249     A  TRUE #> 811   811 -1.344669 1.344669   0.234     A  TRUE #> 812   812 -1.258182 1.258182   0.026     A FALSE #> 813   813 -1.420424 1.420424   0.234     A  TRUE #> 814   814 -1.394136 1.394136   0.099     A  TRUE #> 815   815 -1.453805 1.453805   0.099     A  TRUE #> 816   816 -1.408866 1.408866   0.686     A  TRUE #> 817   817 -1.363725 1.363725   0.099     A  TRUE #> 818   818 -1.401884 1.401884   0.025     A FALSE #> 819   819 -1.338102 1.338102   0.249     A  TRUE #> 820   820 -1.197513 1.197513   0.088     A  TRUE #> 821   821 -1.343913 1.343913   0.099     A  TRUE #> 822   822 -1.382179 1.382179   0.234     A  TRUE #> 823   823 -1.145647 1.145647   0.091     A  TRUE #> 824   824 -1.371010 1.371010   0.234     A  TRUE #> 825   825 -1.397024 1.397024   0.307     A  TRUE #> 826   826 -1.440006 1.440006   0.441     A  TRUE #> 827   827 -1.336854 1.336854   0.025     A FALSE #> 828   828 -1.404849 1.404849   0.088     A  TRUE #> 829   829 -1.243019 1.243019   0.226     A  TRUE #> 830   830 -1.393433 1.393433   0.088     A  TRUE #> 831   831 -1.234886 1.234886   0.273     A  TRUE #> 832   832 -1.435763 1.435763   0.088     A  TRUE #> 833   833 -1.523302 1.523302   0.249     A  TRUE #> 834   834 -1.182922 1.182922   0.091     A  TRUE #> 835   835 -1.237815 1.237815   0.249     A  TRUE #> 836   836 -1.344669 1.344669   0.234     A  TRUE #> 837   837 -1.258182 1.258182   0.026     A FALSE #> 838   838 -1.420424 1.420424   0.234     A  TRUE #> 839   839 -1.394136 1.394136   0.099     A  TRUE #> 840   840 -1.453805 1.453805   0.099     A  TRUE #> 841   841 -1.408866 1.408866   0.686     A  TRUE #> 842   842 -1.363725 1.363725   0.099     A  TRUE #> 843   843 -1.401884 1.401884   0.025     A FALSE #> 844   844 -1.338102 1.338102   0.249     A  TRUE #> 845   845 -1.197513 1.197513   0.088     A  TRUE #> 846   846 -1.343913 1.343913   0.099     A  TRUE #> 847   847 -1.382179 1.382179   0.234     A  TRUE #> 848   848 -1.145647 1.145647   0.091     A  TRUE #> 849   849 -1.371010 1.371010   0.234     A  TRUE #> 850   850 -1.397024 1.397024   0.307     A  TRUE #> 851   851 -1.440006 1.440006   0.441     A  TRUE #> 852   852 -1.336854 1.336854   0.025     A FALSE #> 853   853 -1.404849 1.404849   0.088     A  TRUE #> 854   854 -1.243019 1.243019   0.226     A  TRUE #> 855   855 -1.393433 1.393433   0.088     A  TRUE #> 856   856 -1.234886 1.234886   0.273     A  TRUE #> 857   857 -1.435763 1.435763   0.088     A  TRUE #> 858   858 -1.523302 1.523302   0.249     A  TRUE #> 859   859 -1.182922 1.182922   0.091     A  TRUE #> 860   860 -1.237815 1.237815   0.249     A  TRUE #> 861   861 -1.344669 1.344669   0.234     A  TRUE #> 862   862 -1.258182 1.258182   0.026     A FALSE #> 863   863 -1.420424 1.420424   0.234     A  TRUE #> 864   864 -1.394136 1.394136   0.099     A  TRUE #> 865   865 -1.453805 1.453805   0.099     A  TRUE #> 866   866 -1.408866 1.408866   0.686     A  TRUE #> 867   867 -1.363725 1.363725   0.099     A  TRUE #> 868   868 -1.401884 1.401884   0.025     A FALSE #> 869   869 -1.338102 1.338102   0.249     A  TRUE #> 870   870 -1.197513 1.197513   0.088     A  TRUE #> 871   871 -1.343913 1.343913   0.099     A  TRUE #> 872   872 -1.382179 1.382179   0.234     A  TRUE #> 873   873 -1.145647 1.145647   0.091     A  TRUE #> 874   874 -1.371010 1.371010   0.234     A  TRUE #> 875   875 -1.397024 1.397024   0.307     A  TRUE #> 876   876 -1.440006 1.440006   0.441     A  TRUE #> 877   877 -1.336854 1.336854   0.025     A FALSE #> 878   878 -1.404849 1.404849   0.088     A  TRUE #> 879   879 -1.243019 1.243019   0.226     A  TRUE #> 880   880 -1.393433 1.393433   0.088     A  TRUE #> 881   881 -1.234886 1.234886   0.273     A  TRUE #> 882   882 -1.435763 1.435763   0.088     A  TRUE #> 883   883 -1.523302 1.523302   0.249     A  TRUE #> 884   884 -1.182922 1.182922   0.091     A  TRUE #> 885   885 -1.237815 1.237815   0.249     A  TRUE #> 886   886 -1.344669 1.344669   0.234     A  TRUE #> 887   887 -1.258182 1.258182   0.026     A FALSE #> 888   888 -1.420424 1.420424   0.234     A  TRUE #> 889   889 -1.394136 1.394136   0.099     A  TRUE #> 890   890 -1.453805 1.453805   0.099     A  TRUE #> 891   891 -1.408866 1.408866   0.686     A  TRUE #> 892   892 -1.363725 1.363725   0.099     A  TRUE #> 893   893 -1.401884 1.401884   0.025     A FALSE #> 894   894 -1.338102 1.338102   0.249     A  TRUE #> 895   895 -1.197513 1.197513   0.088     A  TRUE #> 896   896 -1.343913 1.343913   0.099     A  TRUE #> 897   897 -1.382179 1.382179   0.234     A  TRUE #> 898   898 -1.145647 1.145647   0.091     A  TRUE #> 899   899 -1.371010 1.371010   0.234     A  TRUE #> 900   900 -1.397024 1.397024   0.307     A  TRUE #> 901   901 -1.440006 1.440006   0.441     A  TRUE #> 902   902 -1.336854 1.336854   0.025     A FALSE #> 903   903 -1.404849 1.404849   0.088     A  TRUE #> 904   904 -1.243019 1.243019   0.226     A  TRUE #> 905   905 -1.393433 1.393433   0.088     A  TRUE #> 906   906 -1.234886 1.234886   0.273     A  TRUE #> 907   907 -1.435763 1.435763   0.088     A  TRUE #> 908   908 -1.523302 1.523302   0.249     A  TRUE #> 909   909 -1.182922 1.182922   0.091     A  TRUE #> 910   910 -1.237815 1.237815   0.249     A  TRUE #> 911   911 -1.344669 1.344669   0.234     A  TRUE #> 912   912 -1.258182 1.258182   0.026     A FALSE #> 913   913 -1.420424 1.420424   0.234     A  TRUE #> 914   914 -1.394136 1.394136   0.099     A  TRUE #> 915   915 -1.453805 1.453805   0.099     A  TRUE #> 916   916 -1.408866 1.408866   0.686     A  TRUE #> 917   917 -1.363725 1.363725   0.099     A  TRUE #> 918   918 -1.401884 1.401884   0.025     A FALSE #> 919   919 -1.338102 1.338102   0.249     A  TRUE #> 920   920 -1.197513 1.197513   0.088     A  TRUE #> 921   921 -1.343913 1.343913   0.099     A  TRUE #> 922   922 -1.382179 1.382179   0.234     A  TRUE #> 923   923 -1.145647 1.145647   0.091     A  TRUE #> 924   924 -1.371010 1.371010   0.234     A  TRUE #> 925   925 -1.397024 1.397024   0.307     A  TRUE #> 926   926 -1.440006 1.440006   0.441     A  TRUE #> 927   927 -1.336854 1.336854   0.025     A FALSE #> 928   928 -1.404849 1.404849   0.088     A  TRUE #> 929   929 -1.243019 1.243019   0.226     A  TRUE #> 930   930 -1.393433 1.393433   0.088     A  TRUE #> 931   931 -1.234886 1.234886   0.273     A  TRUE #> 932   932 -1.435763 1.435763   0.088     A  TRUE #> 933   933 -1.523302 1.523302   0.249     A  TRUE #> 934   934 -1.182922 1.182922   0.091     A  TRUE #> 935   935 -1.237815 1.237815   0.249     A  TRUE #> 936   936 -1.344669 1.344669   0.234     A  TRUE #> 937   937 -1.258182 1.258182   0.026     A FALSE #> 938   938 -1.420424 1.420424   0.234     A  TRUE #> 939   939 -1.394136 1.394136   0.099     A  TRUE #> 940   940 -1.453805 1.453805   0.099     A  TRUE #> 941   941 -1.408866 1.408866   0.686     A  TRUE #> 942   942 -1.363725 1.363725   0.099     A  TRUE #> 943   943 -1.401884 1.401884   0.025     A FALSE #> 944   944 -1.338102 1.338102   0.249     A  TRUE #> 945   945 -1.197513 1.197513   0.088     A  TRUE #> 946   946 -1.343913 1.343913   0.099     A  TRUE #> 947   947 -1.382179 1.382179   0.234     A  TRUE #> 948   948 -1.145647 1.145647   0.091     A  TRUE #> 949   949 -1.371010 1.371010   0.234     A  TRUE #> 950   950 -1.397024 1.397024   0.307     A  TRUE #> 951   951 -1.440006 1.440006   0.441     A  TRUE #> 952   952 -1.336854 1.336854   0.025     A FALSE #> 953   953 -1.404849 1.404849   0.088     A  TRUE #> 954   954 -1.243019 1.243019   0.226     A  TRUE #> 955   955 -1.393433 1.393433   0.088     A  TRUE #> 956   956 -1.234886 1.234886   0.273     A  TRUE #> 957   957 -1.435763 1.435763   0.088     A  TRUE #> 958   958 -1.523302 1.523302   0.249     A  TRUE #> 959   959 -1.182922 1.182922   0.091     A  TRUE #> 960   960 -1.237815 1.237815   0.249     A  TRUE #> 961   961 -1.344669 1.344669   0.234     A  TRUE #> 962   962 -1.258182 1.258182   0.026     A FALSE #> 963   963 -1.420424 1.420424   0.234     A  TRUE #> 964   964 -1.394136 1.394136   0.099     A  TRUE #> 965   965 -1.453805 1.453805   0.099     A  TRUE #> 966   966 -1.408866 1.408866   0.686     A  TRUE #> 967   967 -1.363725 1.363725   0.099     A  TRUE #> 968   968 -1.401884 1.401884   0.025     A FALSE #> 969   969 -1.338102 1.338102   0.249     A  TRUE #> 970   970 -1.197513 1.197513   0.088     A  TRUE #> 971   971 -1.343913 1.343913   0.099     A  TRUE #> 972   972 -1.382179 1.382179   0.234     A  TRUE #> 973   973 -1.145647 1.145647   0.091     A  TRUE #> 974   974 -1.371010 1.371010   0.234     A  TRUE #> 975   975 -1.397024 1.397024   0.307     A  TRUE #> 976   976 -1.440006 1.440006   0.441     A  TRUE #> 977   977 -1.336854 1.336854   0.025     A FALSE #> 978   978 -1.404849 1.404849   0.088     A  TRUE #> 979   979 -1.243019 1.243019   0.226     A  TRUE #> 980   980 -1.393433 1.393433   0.088     A  TRUE #> 981   981 -1.234886 1.234886   0.273     A  TRUE #> 982   982 -1.435763 1.435763   0.088     A  TRUE #> 983   983 -1.523302 1.523302   0.249     A  TRUE #> 984   984 -1.182922 1.182922   0.091     A  TRUE #> 985   985 -1.237815 1.237815   0.249     A  TRUE #> 986   986 -1.344669 1.344669   0.234     A  TRUE #> 987   987 -1.258182 1.258182   0.026     A FALSE #> 988   988 -1.420424 1.420424   0.234     A  TRUE #> 989   989 -1.394136 1.394136   0.099     A  TRUE #> 990   990 -1.453805 1.453805   0.099     A  TRUE #> 991   991 -1.408866 1.408866   0.686     A  TRUE #> 992   992 -1.363725 1.363725   0.099     A  TRUE #> 993   993 -1.401884 1.401884   0.025     A FALSE #> 994   994 -1.338102 1.338102   0.249     A  TRUE #> 995   995 -1.197513 1.197513   0.088     A  TRUE #> 996   996 -1.343913 1.343913   0.099     A  TRUE #> 997   997 -1.382179 1.382179   0.234     A  TRUE #> 998   998 -1.145647 1.145647   0.091     A  TRUE #> 999   999 -1.371010 1.371010   0.234     A  TRUE #> 1000 1000 -1.397024 1.397024   0.307     A  TRUE #> 1001 1001 -1.440006 1.440006   0.441     A  TRUE #> 1002 1002 -1.336854 1.336854   0.025     A FALSE #> 1003 1003 -1.404849 1.404849   0.088     A  TRUE #> 1004 1004 -1.243019 1.243019   0.226     A  TRUE #> 1005 1005 -1.393433 1.393433   0.088     A  TRUE #> 1006 1006 -1.234886 1.234886   0.273     A  TRUE #> 1007 1007 -1.435763 1.435763   0.088     A  TRUE #> 1008 1008 -1.523302 1.523302   0.249     A  TRUE #> 1009 1009 -1.182922 1.182922   0.091     A  TRUE #> 1010 1010 -1.237815 1.237815   0.249     A  TRUE #> 1011 1011 -1.344669 1.344669   0.234     A  TRUE #> 1012 1012 -1.258182 1.258182   0.026     A FALSE #> 1013 1013 -1.420424 1.420424   0.234     A  TRUE #> 1014 1014 -1.394136 1.394136   0.099     A  TRUE #> 1015 1015 -1.453805 1.453805   0.099     A  TRUE #> 1016 1016 -1.408866 1.408866   0.686     A  TRUE #> 1017 1017 -1.363725 1.363725   0.099     A  TRUE #> 1018 1018 -1.401884 1.401884   0.025     A FALSE #> 1019 1019 -1.338102 1.338102   0.249     A  TRUE #> 1020 1020 -1.197513 1.197513   0.088     A  TRUE #> 1021 1021 -1.343913 1.343913   0.099     A  TRUE #> 1022 1022 -1.382179 1.382179   0.234     A  TRUE #> 1023 1023 -1.145647 1.145647   0.091     A  TRUE #> 1024 1024 -1.371010 1.371010   0.234     A  TRUE #> 1025 1025 -1.397024 1.397024   0.307     A  TRUE #> 1026 1026 -1.440006 1.440006   0.441     A  TRUE #> 1027 1027 -1.336854 1.336854   0.025     A FALSE #> 1028 1028 -1.404849 1.404849   0.088     A  TRUE #> 1029 1029 -1.243019 1.243019   0.226     A  TRUE #> 1030 1030 -1.393433 1.393433   0.088     A  TRUE #> 1031 1031 -1.234886 1.234886   0.273     A  TRUE #> 1032 1032 -1.435763 1.435763   0.088     A  TRUE #> 1033 1033 -1.523302 1.523302   0.249     A  TRUE #> 1034 1034 -1.182922 1.182922   0.091     A  TRUE #> 1035 1035 -1.237815 1.237815   0.249     A  TRUE #> 1036 1036 -1.344669 1.344669   0.234     A  TRUE #> 1037 1037 -1.258182 1.258182   0.026     A FALSE #> 1038 1038 -1.420424 1.420424   0.234     A  TRUE #> 1039 1039 -1.394136 1.394136   0.099     A  TRUE #> 1040 1040 -1.453805 1.453805   0.099     A  TRUE #> 1041 1041 -1.408866 1.408866   0.686     A  TRUE #> 1042 1042 -1.363725 1.363725   0.099     A  TRUE #> 1043 1043 -1.401884 1.401884   0.025     A FALSE #> 1044 1044 -1.338102 1.338102   0.249     A  TRUE #> 1045 1045 -1.197513 1.197513   0.088     A  TRUE #> 1046 1046 -1.343913 1.343913   0.099     A  TRUE #> 1047 1047 -1.382179 1.382179   0.234     A  TRUE #> 1048 1048 -1.145647 1.145647   0.091     A  TRUE #> 1049 1049 -1.371010 1.371010   0.234     A  TRUE #> 1050 1050 -1.397024 1.397024   0.307     A  TRUE #> 1051 1051 -1.440006 1.440006   0.441     A  TRUE #> 1052 1052 -1.336854 1.336854   0.025     A FALSE #> 1053 1053 -1.404849 1.404849   0.088     A  TRUE #> 1054 1054 -1.243019 1.243019   0.226     A  TRUE #> 1055 1055 -1.393433 1.393433   0.088     A  TRUE #> 1056 1056 -1.234886 1.234886   0.273     A  TRUE #> 1057 1057 -1.435763 1.435763   0.088     A  TRUE #> 1058 1058 -1.523302 1.523302   0.249     A  TRUE #> 1059 1059 -1.182922 1.182922   0.091     A  TRUE #> 1060 1060 -1.237815 1.237815   0.249     A  TRUE #> 1061 1061 -1.344669 1.344669   0.234     A  TRUE #> 1062 1062 -1.258182 1.258182   0.026     A FALSE #> 1063 1063 -1.420424 1.420424   0.234     A  TRUE #> 1064 1064 -1.394136 1.394136   0.099     A  TRUE #> 1065 1065 -1.453805 1.453805   0.099     A  TRUE #> 1066 1066 -1.408866 1.408866   0.686     A  TRUE #> 1067 1067 -1.363725 1.363725   0.099     A  TRUE #> 1068 1068 -1.401884 1.401884   0.025     A FALSE #> 1069 1069 -1.338102 1.338102   0.249     A  TRUE #> 1070 1070 -1.197513 1.197513   0.088     A  TRUE #> 1071 1071 -1.343913 1.343913   0.099     A  TRUE #> 1072 1072 -1.382179 1.382179   0.234     A  TRUE #> 1073 1073 -1.145647 1.145647   0.091     A  TRUE #> 1074 1074 -1.371010 1.371010   0.234     A  TRUE #> 1075 1075 -1.397024 1.397024   0.307     A  TRUE #> 1076 1076 -1.440006 1.440006   0.441     A  TRUE #> 1077 1077 -1.336854 1.336854   0.025     A FALSE #> 1078 1078 -1.404849 1.404849   0.088     A  TRUE #> 1079 1079 -1.243019 1.243019   0.226     A  TRUE #> 1080 1080 -1.393433 1.393433   0.088     A  TRUE #> 1081 1081 -1.234886 1.234886   0.273     A  TRUE #> 1082 1082 -1.435763 1.435763   0.088     A  TRUE #> 1083 1083 -1.523302 1.523302   0.249     A  TRUE #> 1084 1084 -1.182922 1.182922   0.091     A  TRUE #> 1085 1085 -1.237815 1.237815   0.249     A  TRUE #> 1086 1086 -1.344669 1.344669   0.234     A  TRUE #> 1087 1087 -1.258182 1.258182   0.026     A FALSE #> 1088 1088 -1.420424 1.420424   0.234     A  TRUE #> 1089 1089 -1.394136 1.394136   0.099     A  TRUE #> 1090 1090 -1.453805 1.453805   0.099     A  TRUE #> 1091 1091 -1.408866 1.408866   0.686     A  TRUE #> 1092 1092 -1.363725 1.363725   0.099     A  TRUE #> 1093 1093 -1.401884 1.401884   0.025     A FALSE #> 1094 1094 -1.338102 1.338102   0.249     A  TRUE #> 1095 1095 -1.197513 1.197513   0.088     A  TRUE #> 1096 1096 -1.343913 1.343913   0.099     A  TRUE #> 1097 1097 -1.382179 1.382179   0.234     A  TRUE #> 1098 1098 -1.145647 1.145647   0.091     A  TRUE #> 1099 1099 -1.371010 1.371010   0.234     A  TRUE #> 1100 1100 -1.397024 1.397024   0.307     A  TRUE #> 1101 1101 -1.440006 1.440006   0.441     A  TRUE #> 1102 1102 -1.336854 1.336854   0.025     A FALSE #> 1103 1103 -1.404849 1.404849   0.088     A  TRUE #> 1104 1104 -1.243019 1.243019   0.226     A  TRUE #> 1105 1105 -1.393433 1.393433   0.088     A  TRUE #> 1106 1106 -1.234886 1.234886   0.273     A  TRUE #> 1107 1107 -1.435763 1.435763   0.088     A  TRUE #> 1108 1108 -1.523302 1.523302   0.249     A  TRUE #> 1109 1109 -1.182922 1.182922   0.091     A  TRUE #> 1110 1110 -1.237815 1.237815   0.249     A  TRUE #> 1111 1111 -1.344669 1.344669   0.234     A  TRUE #> 1112 1112 -1.258182 1.258182   0.026     A FALSE #> 1113 1113 -1.420424 1.420424   0.234     A  TRUE #> 1114 1114 -1.394136 1.394136   0.099     A  TRUE #> 1115 1115 -1.453805 1.453805   0.099     A  TRUE #> 1116 1116 -1.408866 1.408866   0.686     A  TRUE #> 1117 1117 -1.363725 1.363725   0.099     A  TRUE #> 1118 1118 -1.401884 1.401884   0.025     A FALSE #> 1119 1119 -1.338102 1.338102   0.249     A  TRUE #> 1120 1120 -1.197513 1.197513   0.088     A  TRUE #> 1121 1121 -1.343913 1.343913   0.099     A  TRUE #> 1122 1122 -1.382179 1.382179   0.234     A  TRUE #> 1123 1123 -1.145647 1.145647   0.091     A  TRUE #> 1124 1124 -1.371010 1.371010   0.234     A  TRUE #> 1125 1125 -1.397024 1.397024   0.307     A  TRUE #>  runstest(ssb(nsher)) #>         lcl      ucl p.value qname  pass #> 1 -37.36636 37.36636   0.001     A FALSE runstest(rnorm(1, FLQuant(1, dimnames=list(year=1973:2021)))) #>         lcl      ucl p.value qname pass #> 1 -2.422594 2.422594   0.515     A TRUE runstest(rep(0.1, 10), cumsum(rnorm(10, 0.1, 0.01))) #>          lcl       ucl p.value qname  pass #> 1 -0.6797637 0.6797637   0.001  <NA> FALSE runstest(rnorm(10, 0, 0.1)) #>          lcl       ucl p.value qname pass #> 1 -0.4089718 0.4089718   0.103  <NA> TRUE"},{"path":"/reference/rwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a random walk time series from a starting point — rwalk","title":"Generate a random walk time series from a starting point — rwalk","text":"last year FLQuant object used atrating point generate time series following random walk drift: $$z_t = z_{t-1} + \\epsilon_t + \\delta_t, t=1,2,...$$ \\(\\epsilon\\) \\(\\mathcal{N}(0, \\sigma)\\)","code":""},{"path":"/reference/rwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a random walk time series from a starting point — rwalk","text":"","code":"rwalk(x0, end = 1, sd = 0.05, delta = 0)"},{"path":"/reference/rwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a random walk time series from a starting point — rwalk","text":"x0 initial state random walk, 'FLQuant'. end number years final year series. numeric. sd standard deviation random walk, numeric. delta drift random walk.","code":""},{"path":"/reference/rwalk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a random walk time series from a starting point — rwalk","text":"'FLQuant' object.","code":""},{"path":"/reference/rwalk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a random walk time series from a starting point — rwalk","text":"length series set argument end. taken number years, value smaller final 'year' 'x0', final year larger class 'character'.","code":""},{"path":[]},{"path":"/reference/rwalk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a random walk time series from a starting point — rwalk","text":"Iago Mosqueira, WMR (2023)","code":""},{"path":"/reference/rwalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a random walk time series from a starting point — rwalk","text":"","code":"data(ple4) # Generate random walk recruitmrnt with positive drift rwalk(rec(ple4), end=5, sd=0.08, delta=0.05) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   2018    2019    2020    2021    2022    #>   all 2183684 2539488 2826942 2967576 3195928 #>  #> units:  1000  # Use append() to add the new values at the end append(rec(ple4), rwalk(rec(ple4), end=10, sd=0.04, delta=0)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   1  477074  710748  874712  797702  870799  615691  610017 2449900  664500 #>    year #> age 1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   1  579075  428110  418228  666902  671454  433599  367450 1391430 1074920 #>    year #> age 1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   1  787372  674010 1033740  879043  915553 1078660  999968 1935350 1375880 #>    year #> age 1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   1 1302060 1792220 4303680 1910200 1774940 1250510 1083810  981356  854841 #>    year #> age 1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   1  550376  566448  932162  893056 2431310  778427  683151  857525  634808 #>    year #> age 2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   1 1792880  557844 1235790  863893  875191 1379750 1135050 1088820 1444570 #>    year #> age 2011    2012    2013    2014    2015    2016    2017    2018    2019    #>   1 1608190 1278010 1455050 1640700  895620 1211320 1823000 1759380 1729163 #>    year #> age 2020    2021    2022    2023    2024    2025    2026    2027    #>   1 1744349 1673871 1763022 1747150 1687970 1608391 1675001 1645038 #>  #> units:  1000  # Use end as number of years rwalk(rec(ple4), end=5) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   2018    2019    2020    2021    2022    #>   all 1815915 1820430 1807299 1679329 1714100 #>  #> units:  1000  # or as final year rwalk(rec(ple4), end=2020) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   2018    2019    2020    #>   all 1799865 1792118 1925256 #>  #> units:  1000"},{"path":"/reference/show.html","id":null,"dir":"Reference","previous_headings":"","what":"Method show — show","title":"Method show — show","text":"Standard display object contents interactive session. Objects class FLQuant length > 1 along sixth dimension (iter) output summarised form, median(mad), mad median absolute deviation. See mad.","code":""},{"path":"/reference/show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method show — show","text":"","code":"# S4 method for FLArray show(object)"},{"path":"/reference/show.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method show — show","text":"format used objects class FLPar length > 1 last dimension (iter).","code":""},{"path":"/reference/show.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method show — show","text":"show(object)","code":""},{"path":[]},{"path":"/reference/show.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method show — show","text":"FLR Team","code":""},{"path":"/reference/show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method show — show","text":"","code":"# no 'iter'   flq <- FLQuant(rnorm(80), dim=c(4,20), quant='age', units='kg')   flq #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1         2         3         4         5         6         7         #>   1  1.271252  0.032911  0.375711 -0.439019 -0.838299  1.163149  0.818696 #>   2  0.243976  2.094692  1.572370 -0.995664 -0.506914  1.166703 -0.480893 #>   3  0.848595  1.130655 -1.136223 -0.052321 -0.203883  0.841376 -0.864438 #>   4  0.071205  1.753819 -0.490602  0.268262  0.311160 -0.650181 -0.905919 #>    year #> age 8         9         10        11        12        13        14        #>   1  0.153291 -0.712742  0.533097  1.830176  0.343902  0.226830  0.360262 #>   2  0.495628 -0.465994 -0.812553  0.689716 -0.446518  0.642837 -0.512805 #>   3 -0.373004  0.187112 -0.813350 -0.222695 -0.794747  0.219696  0.110008 #>   4  0.314186  0.110642  0.468605  0.338550 -0.782291 -0.015230  1.312848 #>    year #> age 15        16        17        18        19        20        #>   1  0.014958  1.016462 -0.738116  0.627374  1.847553 -0.995209 #>   2  0.190096 -0.183635  0.526129  0.925017 -0.269524  0.602072 #>   3 -0.779454 -0.988987 -0.438680  0.160177 -0.278919 -1.856290 #>   4 -1.366896  0.440471  0.671194 -1.119939  0.250624 -0.610363 #>  #> units:  kg   # with 'iter'   flq <- FLQuant(rnorm(800), dim=c(4,20,1,1,1,10), quant='age', units='kg')   flq #> An object of class \"FLQuant\" #> iters:  10  #>  #> , , unit = unique, season = all, area = unique #>  #>    year #> age 1                 2                 3                 4                 #>   1 -0.3089296(0.899)  0.0631446(0.592)  0.2551947(0.591)  0.0862811(1.159) #>   2  0.8942780(0.616) -0.0178774(0.910) -0.0290428(0.976) -0.0450279(0.705) #>   3  0.0146506(0.744) -0.3430955(1.009) -0.1736159(1.202) -0.1475128(0.764) #>   4  0.3368354(0.777)  0.2662023(0.958) -0.2165251(1.078) -0.3996970(0.634) #>    year #> age 5                 6                 7                 8                 #>   1  0.0114645(1.308) -0.3046330(0.304) -0.1350969(0.919) -0.4944649(1.792) #>   2  0.2693854(1.314)  0.2028819(0.523) -0.4081432(0.475) -0.1746503(0.869) #>   3 -0.1559973(1.105) -0.1045653(0.672)  0.0579263(0.899)  0.1712732(1.382) #>   4 -0.2390533(0.822) -0.2301584(0.916)  0.2340851(0.449) -0.1444576(1.356) #>    year #> age 9                 10                11                12                #>   1 -0.3668160(1.180)  0.1910958(1.253)  0.3319283(0.479)  0.1530920(0.997) #>   2  0.3299629(0.976)  0.5383774(1.010) -0.2158444(1.170)  0.7036873(1.290) #>   3  0.0354759(1.055)  0.0031582(0.898) -0.3911477(1.132) -0.0133351(1.542) #>   4 -0.4160365(1.094) -0.2595765(1.280)  0.1028569(0.807) -0.0619296(0.887) #>    year #> age 13                14                15                16                #>   1  0.3143253(0.677) -0.6711947(0.554) -0.5340848(0.489)  0.4195613(0.884) #>   2  0.0179421(0.543) -0.2930193(0.862) -0.5833958(0.522)  0.1534410(0.955) #>   3  0.2347924(0.734) -0.1337129(0.770)  0.3144784(0.872)  0.2939867(1.431) #>   4  0.4103916(1.485)  0.1070403(0.661)  0.4149749(0.945) -0.1032012(0.644) #>    year #> age 17                18                19                20                #>   1 -0.4409126(0.625)  0.5630499(0.390) -0.2518662(1.103)  0.4655326(0.714) #>   2 -0.3165033(1.062) -0.3608176(0.396) -0.4430595(0.566)  0.7060585(0.436) #>   3  0.1738286(1.078)  0.1950127(1.081)  0.0762994(0.903) -0.5391107(0.851) #>   4 -0.6829497(0.679) -0.1380817(0.420) -0.0465230(1.498) -0.4580658(0.530) #>  #> units:  kg"},{"path":"/reference/simplify.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate or select along unwanted dimensions — simplify","title":"Aggregate or select along unwanted dimensions — simplify","text":"Objects many FLR classes might aggregated along \"unit\", \"season\", /\"area\" dimensions according type data contain.","code":""},{"path":"/reference/simplify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate or select along unwanted dimensions — simplify","text":"","code":"simplify(object, ...)  # S4 method for FLStock simplify(   object,   dims = c(\"unit\", \"season\", \"area\")[dim(object)[3:5] > 1],   spwn.season = 1,   rec.season = spwn.season,   harvest = TRUE,   weighted = FALSE )"},{"path":"/reference/simplify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate or select along unwanted dimensions — simplify","text":"object complex FLR object aggregate.","code":""},{"path":"/reference/simplify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate or select along unwanted dimensions — simplify","text":"object class input.","code":""},{"path":"/reference/simplify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Aggregate or select along unwanted dimensions — simplify","text":"FLR Team","code":""},{"path":"/reference/slim.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop unnecesary 'iters' — slim","title":"Drop unnecesary 'iters' — slim","text":"Objects FLR classes can vary length along sixth dimension slot class FLQuant. reduces object size memory usage. object extended fully, example using propagate, can slim object reducing slot iters identical keeping yhe first iter.","code":""},{"path":"/reference/slim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop unnecesary 'iters' — slim","text":"","code":"slim(object, ...)  # S4 method for FLComp slim(object, ...)"},{"path":"/reference/slim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop unnecesary 'iters' — slim","text":"object complex FLR object slim .","code":""},{"path":"/reference/slim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop unnecesary 'iters' — slim","text":"object class input.","code":""},{"path":"/reference/slim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Drop unnecesary 'iters' — slim","text":"test whether slot can slimmed based checking sum variance along 6th dimensions equal zero.","code":""},{"path":[]},{"path":"/reference/slim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Drop unnecesary 'iters' — slim","text":"FLR Team","code":""},{"path":"/reference/slim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop unnecesary 'iters' — slim","text":"","code":"data(ple4) # Extend all of ple4 to 50 iters ple4 <- propagate(ple4, 50) # Add variability in catch.n catch.n(ple4) <- rlnoise(50, log(catch.n(ple4)), log(catch.n(ple4))/10) summary(ple4) #> An object of class \"FLStock\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t61\t1\t1\t1\t50\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t1\t10\t10\t1957\t2017\t2\t6\t #>  #> Metrics:  #>   rec: 367450 - 4303680  (1000)  #>   ssb: 203391 - 913290  (t)  #>   catch: 78360 - 315245  (t)  #>   fbar: 0.20 - 0.72  (f)  # slim object by dropping identical iters sple4 <- slim(ple4) summary(sple4) #> An object of class \"FLStock\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t61\t1\t1\t1\t50\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t1\t10\t10\t1957\t2017\t2\t6\t #>  #> Metrics:  #>   rec: 367450 - 4303680  (1000)  #>   ssb: 203391 - 913290  (t)  #>   catch: 78360 - 315245  (t)  #>   fbar: 0.20 - 0.72  (f)"},{"path":"/reference/split.html","id":null,"dir":"Reference","previous_headings":"","what":"splits x along the iter dimension into the groups defined by f. — split-methods","title":"splits x along the iter dimension into the groups defined by f. — split-methods","text":"Similar  base::split, working along 6th, iter, dimension singular FLR object. object divided many objects unique values f, returned FLlst-derived object, e.g. FLQuants object applied FLQuant.","code":""},{"path":"/reference/split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"splits x along the iter dimension into the groups defined by f. — split-methods","text":"","code":"# S4 method for FLQuant,vector split(x, f)  # S4 method for FLComp,vector split(x, f)"},{"path":"/reference/split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"splits x along the iter dimension into the groups defined by f. — split-methods","text":"x object split. f vector group names.","code":""},{"path":"/reference/split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"splits x along the iter dimension into the groups defined by f. — split-methods","text":"object corresponding plural class (FLQuants FLQuant).","code":""},{"path":"/reference/split.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"splits x along the iter dimension into the groups defined by f. — split-methods","text":"Iago Mosqueira (WMR).","code":""},{"path":"/reference/split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"splits x along the iter dimension into the groups defined by f. — split-methods","text":"","code":"# FROM FLQuant to FLQuants flq <- rlnorm(20, FLQuant(seq(0.1, 0.8, length=10)), 0.2) split(flq, c(rep(1, 5), rep(2,15))) #> $ 1  #> An object of class \"FLQuant\" #> iters:  5  #>  #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1              2              3              4              #>   all 1.4697(0.1599) 1.1846(0.3660) 1.2176(0.3565) 1.2799(0.0788) #>      year #> quant 5              6              7              8              #>   all 1.5019(0.3056) 1.4185(0.4543) 1.7979(0.5126) 1.4599(0.1864) #>      year #> quant 9              10             #>   all 2.0834(0.2119) 1.9777(0.6666) #>  #> units:  NA  #>  #> $ 2  #> An object of class \"FLQuant\" #> iters:  15  #>  #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1               2               3               4               #>   all 1.12681(0.2068) 0.97934(0.0847) 1.50875(0.3653) 1.26261(0.1581) #>      year #> quant 5               6               7               8               #>   all 1.54094(0.3109) 1.62053(0.2897) 1.93952(0.2817) 2.01271(0.3607) #>      year #> quant 9               10              #>   all 1.94046(0.4493) 2.17696(0.2441) #>  #> units:  NA  #>"},{"path":"/reference/splom.html","id":null,"dir":"Reference","previous_headings":"","what":"Method splom — splom","title":"Method splom — splom","text":"Draws conditional scatter plot matrix.","code":""},{"path":"/reference/splom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method splom — splom","text":"","code":"# S4 method for FLPar,missing splom(x, data, ...)"},{"path":"/reference/splom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method splom — splom","text":"See help page lattice full description plot possible arguments.","code":""},{"path":"/reference/splom.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method splom — splom","text":"splom(x,data)","code":""},{"path":[]},{"path":"/reference/splom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method splom — splom","text":"FLR Team","code":""},{"path":"/reference/splom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method splom — splom","text":"","code":"flp <- FLPar(c(t(mvrnorm(500, mu=c(0, 120, 0.01, 20),   Sigma=matrix(.7, nrow=4, ncol=4) + diag(4) * 0.3))),   dimnames=list(params=c('a','b','c','d'), iter=1:500), units=\"NA\")  splom(flp)"},{"path":"/reference/spread.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to make available list elements inside a function or method — spread","title":"A function to make available list elements inside a function or method — spread","text":"Inside function, call spread() attach function environment, sys.frame(), elements list, conversion list object (e.g. named vector FLPar), called name. function environment deleted function returns, variables make environment function called, call stack.","code":""},{"path":"/reference/spread.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to make available list elements inside a function or method — spread","text":"","code":"spread(object, FORCE = FALSE)"},{"path":"/reference/spread.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to make available list elements inside a function or method — spread","text":"object named list vector whose elements loaded calling environment. FORCE existing variable matching names redefined?","code":""},{"path":"/reference/spread.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to make available list elements inside a function or method — spread","text":"Invisibly names variables loaded calling environment.","code":""},{"path":"/reference/spread.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to make available list elements inside a function or method — spread","text":"default, spread() overwrite variables function environment name list element, unless FORCE=TRUE","code":""},{"path":[]},{"path":"/reference/spread.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A function to make available list elements inside a function or method — spread","text":"FLR Team","code":""},{"path":"/reference/spread.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to make available list elements inside a function or method — spread","text":"","code":"# EXAMPLE function foo <- function (params) {   a <- spread(params)  print(a)  x*y } # x and y are accesible to the internal calculation foo(params=list(x=3.5, y=9)) #> [1] \"x\" \"y\" #> [1] 31.5  # Works with FLPar foo(params=FLPar(x=3L, y=0.99238)) #> [1] \"x\" \"y\" #> [1] 2.97714  # Elements in object must be named if (FALSE) foo(list(3, y=0.99238))  # If a variable is missing from the spread object, function will fail if (FALSE) foo(list(x=4)) # Unless the variable is already defined in the calling environment, # in this case <environment: R_GlobalEnv> y <- 45 foo(params=list(x=4)) #> [1] \"x\" #> [1] 180"},{"path":"/reference/ssb.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate or return the Spawning Stock Biomass — ssb","title":"Calculate or return the Spawning Stock Biomass — ssb","text":"calculated Spawning Stock Biomass (SSB) fish population returned method. SSB combined weight individuals fish stock capable reproducing. classes calculated information stored different slots, others ssb() simply slot accessor. later case, corresponding replacement method also exists. object class FLStock, calculation SSB depends value 'units' attribute harvest slot. terms fishing mortality (units(harvest(object)) == 'f'), assuming object structured age, SSB calculated $$SSB_{y} = \\sum\\nolimits_{} N_{,y} \\cdot e^{-(F_{,y} \\cdot Hs_{,y} + M_{,y} \\cdot Ms_{,y})} \\cdot W_{,y} \\cdot T_{,y} $$ \\(N_{,y}\\) abundance numbers (stock.n) age () year (y), \\(F_{,y}\\) fishing mortality (harvest), \\(Hs_{,y}\\) proportion fishing mortality spawning (harvest.spwn), \\(M_{,y}\\) natural mortality (m), \\(Ms_{,y}\\) proportion natural mortality spawning (m.spwn), \\(W_{,y}\\) mean weight age stock (m), \\(T_{,y}\\) proportion mature age stock (mat). FLStock objects dimensions (area, unit), calculation carried along dimensions . obtain global value please use corresponding summing method. harvest slot contains estimates terms harvest rates (units(harvest(object)) == \"hr\"), SSB computed $$SSB_{y} = \\sum\\nolimits_{} N_{,y} \\cdot (1 - H_{,y} \\cdot Hs_{,y}) \\cdot e^{-(M_{,y} \\cdot Ms_{,y})} \\cdot W_{,y} \\cdot T_{,y} $$ \\(H_{,y}\\) harvest rate (proportion catch weight total biomass).","code":""},{"path":"/reference/ssb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate or return the Spawning Stock Biomass — ssb","text":"","code":"ssb(object, ...)  # S4 method for FLStock ssb(object, ...)  # S4 method for FLBiol ssb(object, ...)"},{"path":"/reference/ssb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate or return the Spawning Stock Biomass — ssb","text":"object Object ssb calculated extracted.","code":""},{"path":"/reference/ssb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate or return the Spawning Stock Biomass — ssb","text":"object, generally class FLQuant.","code":""},{"path":"/reference/ssb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate or return the Spawning Stock Biomass — ssb","text":"Objects FLBiol class contain information catch fishing mortality, call ssb() correct abundances natural mortality moment spawning. method can also take information catches fishing mortality use calculating abundances spawning time. FLQuant named either 'catch.n', 'f', 'hr' 'harvest' can used. first three self-explanatory, last units must either 'f' 'hr'. quantities refer total yearly values, value 'spwn' slot used calculate fraction fishing mortality apply.","code":""},{"path":[]},{"path":"/reference/ssb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate or return the Spawning Stock Biomass — ssb","text":"FLR Team","code":""},{"path":"/reference/ssb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate or return the Spawning Stock Biomass — ssb","text":"","code":"data(ple4) # SSB from FLStock ssb(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  biol <- as(ple4, \"FLBiol\") # SSB from FLBiol, abundances corrected only for M ssb(biol) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  # Provide catch-at-age, F or HR to correct N ssb(biol, catch.n=catch.n(ple4)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  ssb(biol, f=harvest(ple4)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  ssb(biol, harvest=harvest(ple4)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t  ssb(biol, hr=catch.n(ple4) / stock.n(ple4)) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1957   1958   1959   1960   1961   1962   1963   1964   1965   1966   #>   all 342223 355375 362119 380052 391386 482245 440658 430475 383583 404516 #>      year #> age   1967   1968   1969   1970   1971   1972   1973   1974   1975   1976   #>   all 473938 458977 402865 370472 361610 366129 302365 298094 301757 328726 #>      year #> age   1977   1978   1979   1980   1981   1982   1983   1984   1985   1986   #>   all 329116 327544 302271 319090 290780 284211 339238 367251 394666 407972 #>      year #> age   1987   1988   1989   1990   1991   1992   1993   1994   1995   1996   #>   all 470952 424696 448230 396458 356947 311431 279962 233481 222203 203391 #>      year #> age   1997   1998   1999   2000   2001   2002   2003   2004   2005   2006   #>   all 204948 237863 219149 230902 234211 221902 248312 233478 253737 284447 #>      year #> age   2007   2008   2009   2010   2011   2012   2013   2014   2015   2016   #>   all 293330 371837 453026 554245 575459 617539 709948 823276 774157 836453 #>      year #> age   2017   #>   all 913290 #>  #> units:  t"},{"path":"/reference/ssb_next.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate next yera's SSB from survivors and Fbar — ssb_next","title":"Calculate next yera's SSB from survivors and Fbar — ssb_next","text":"spawning stock biomass (SSB) stock gets calculated survivors previous year. provides value first year end object. Weights--age, maturity extra year calculated averages last wts.nyears.","code":""},{"path":"/reference/ssb_next.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate next yera's SSB from survivors and Fbar — ssb_next","text":"","code":"ssb_next(x, fbar = 0, wts.nyears = 3, fbar.nyears = 3)"},{"path":"/reference/ssb_next.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate next yera's SSB from survivors and Fbar — ssb_next","text":"x FLStock object containing estimates abundance harvesting. fbar Fbar rate assumed extra year. Defaults 0. wts.nyears Number years calculation mean weight--age maturity extra year. fbar.nyears Number years calculation mean selectivity, natural mortality fraction F abnd M spawning extra year.","code":""},{"path":"/reference/ssb_next.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate next yera's SSB from survivors and Fbar — ssb_next","text":"FLQuant.","code":""},{"path":"/reference/ssb_next.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate next yera's SSB from survivors and Fbar — ssb_next","text":"stocks spawning later year, value average fishing mortality, fbar, expected year can provided. Mortality spawning calculated, M selectivity assumed extra year average last fbar.nyears.","code":""},{"path":"/reference/ssb_next.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate next yera's SSB from survivors and Fbar — ssb_next","text":"","code":"data(ple4) ssb_next(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   1958   1959   1960   1961   1962   1963   1964   1965   1966   1967   #>   all 355374 362120 380052 391385 482245 440658 430475 383583 404516 473937 #>      year #> age   1968   1969   1970   1971   1972   1973   1974   1975   1976   1977   #>   all 458977 402865 370473 361610 366129 302365 298094 301757 328726 329116 #>      year #> age   1978   1979   1980   1981   1982   1983   1984   1985   1986   1987   #>   all 327543 302271 319089 290780 284211 339238 367251 394666 407972 470953 #>      year #> age   1988   1989   1990   1991   1992   1993   1994   1995   1996   1997   #>   all 424696 448230 396458 356947 311431 279962 233481 222203 203391 204948 #>      year #> age   1998   1999   2000   2001   2002   2003   2004   2005   2006   2007   #>   all 237863 219149 230902 234211 221902 248312 233477 253737 284447 293330 #>      year #> age   2008   2009   2010   2011   2012   2013   2014   2015   2016   2017   #>   all 371837 453027 554244 575459 617538 709948 823276 774157 836453 913289 #>      year #> age   2018   #>   all 980986 #>  #> units:  t  # Compare with ssb() ssb(ple4)[, ac(2014:2017)] / ssb_next(ple4)[, ac(2014:2017)] #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> age   2014 2015 2016 2017 #>   all 1    1    1    1    #>  #> units:"},{"path":"/reference/standardUnits-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard units of measurement for a complex class object — standardUnits","title":"Standard units of measurement for a complex class object — standardUnits","text":"Returns values units FLQuant slot according standard adopted FLR Team supplied class.","code":""},{"path":"/reference/standardUnits-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard units of measurement for a complex class object — standardUnits","text":"","code":"standardUnits(object, ...)  # S4 method for character standardUnits(object, ...)  # S4 method for FLS standardUnits(object, ...)  # S4 method for FLBiol standardUnits(object, ...)"},{"path":"/reference/standardUnits-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard units of measurement for a complex class object — standardUnits","text":"object standard units returned","code":""},{"path":"/reference/standardUnits-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard units of measurement for a complex class object — standardUnits","text":"list corresponding units value slot","code":""},{"path":"/reference/standardUnits-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard units of measurement for a complex class object — standardUnits","text":"objects derived class FLS, currently includes FLStock FLStockLen, adopted standard includes: 'kg' individual weights, '1000' number individuals, 't' biomass, 'f' harvest, 'm' natural mortality, empty string proportions (spwn, mat). objects derived class FLBiol adopted standard units : 'kg' individual weights, '1000' number individuals, 'm' natural mortality, empty string proportions (spwn, mat).","code":""},{"path":[]},{"path":"/reference/standardUnits-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standard units of measurement for a complex class object — standardUnits","text":"FLR Team","code":""},{"path":"/reference/standardUnits-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard units of measurement for a complex class object — standardUnits","text":"","code":"stk <- FLStock(catch=FLQuant(runif(20, 2, 120))) # FLStock object has no units summary(stk) #> An object of class \"FLStock\" #>  #> Name:   #> Description:   #> Quant: quant  #> Dims:  quant \tyear\tunit\tseason\tarea\titer #> \t1\t20\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \tNA\tNA\tNA\t1\t20\tNA\tNA\t #>  #> Metrics:  #>   rec: NA - NA (NA) #>   ssb: NA - NA (NA) #>   catch: 5 - 84  (NA)  #>   fbar: NA - NA (NA) # Obtain standard units for the class as a list standardUnits(stk) #> $catch.wt #> [1] \"kg\" #>  #> $landings.wt #> [1] \"kg\" #>  #> $discards.wt #> [1] \"kg\" #>  #> $stock.wt #> [1] \"kg\" #>  #> $catch #> [1] \"t\" #>  #> $landings #> [1] \"t\" #>  #> $discards #> [1] \"t\" #>  #> $stock #> [1] \"t\" #>  #> $catch.n #> [1] \"1000\" #>  #> $landings.n #> [1] \"1000\" #>  #> $discards.n #> [1] \"1000\" #>  #> $stock.n #> [1] \"1000\" #>  #> $mat #> [1] \"\" #>  #> $harvest.spwn #> [1] \"\" #>  #> $m.spwn #> [1] \"\" #>  #> $m #> [1] \"m\" #>  #> $harvest #> [1] \"f\" #>  # which can then be assigned to the object units(stk) <- standardUnits(stk) summary(stk) #> An object of class \"FLStock\" #>  #> Name:   #> Description:   #> Quant: quant  #> Dims:  quant \tyear\tunit\tseason\tarea\titer #> \t1\t20\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \tNA\tNA\tNA\t1\t20\tNA\tNA\t #>  #> Metrics:  #>   rec: NA - NA (NA) #>   ssb: NA - NA  (t)  #>   catch: 5 - 84  (t)  #>   fbar: NA - NA (NA) # units<- methjod also accepts a function to be called to provide units units(stk) <- standardUnits bio <- FLBiol(n=FLQuant(runif(50, 2, 120), dim=c(5, 10))) # Object has no units summary(bio) #> An object of class \"FLBiol\" #>  #> Name:   #> Description:   #> Quant: quant  #> Dims:  quant \tyear\tunit\tseason\tarea\titer #> \t5\t10\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear  #> \t1\t5\t5\t1\t10\t #>  #> mat           ~ mat  #>   mat         : [ 5 10 1 1 1 1 ], units =  NA  #>   NA          : [ 1 1 ], units =  NA  #> fec           ~ fec  #>   fec         : [ 5 10 1 1 1 1 ], units =  NA  #>   NA          : [ 1 1 ], units =  NA  #> rec           ~ rec  #>   rec         : [ 1 10 1 1 1 1 ], units =  NA  #>   NA          : [ 1 1 ], units =  NA  # Obtain standard units for the class as a list standardUnits(bio) #> $n #> [1] \"1000\" #>  #> $m #> [1] \"m\" #>  #> $wt #> [1] \"kg\" #>  #> $spwn #> [1] \"\" #>  #> $mat #> [1] \"mat\" #>  #> $fec #> [1] \"NA\" #>  #> $rec #> [1] \"1000\" #>  # which can then be assigned to the object units(bio) <- standardUnits(bio) summary(stk) #> An object of class \"FLStock\" #>  #> Name:   #> Description:   #> Quant: quant  #> Dims:  quant \tyear\tunit\tseason\tarea\titer #> \t1\t20\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \tNA\tNA\tNA\t1\t20\tNA\tNA\t #>  #> Metrics:  #>   rec: NA - NA (NA) #>   ssb: NA - NA  (t)  #>   catch: 5 - 84  (t)  #>   fbar: NA - NA (NA)"},{"path":"/reference/summary-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Method summary — summary,FLArray-method","title":"Method summary — summary,FLArray-method","text":"Outputs general summary structure content fwdControl object. method invisibly returns data.frame shown screen.","code":""},{"path":"/reference/summary-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method summary — summary,FLArray-method","text":"","code":"# S4 method for FLArray summary(object, ...)  # S4 method for FLQuantPoint summary(object, ...)  # S4 method for FLPar summary(object, title = TRUE, ...)  # S4 method for FLComp summary(object, ...)  # S4 method for FLQuants summary(object)  # S4 method for predictModel summary(object)  # S4 method for FLBiol summary(object)  # S4 method for FLModel summary(object, ...)  # S4 method for FLlst summary(object)"},{"path":"/reference/summary-methods.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method summary — summary,FLArray-method","text":"summary(object)","code":""},{"path":[]},{"path":"/reference/summary-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method summary — summary,FLArray-method","text":"FLR Team","code":""},{"path":"/reference/summary-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method summary — summary,FLArray-method","text":"","code":"flq <- FLQuant(rlnorm(90), dim=c(3,10), units='kg') summary(flq) #> An object of class \"FLQuant\" with: #> dim  :  3 10 1 1 1 1  #> quant:  quant  #> units:  kg  #>  #> Min    :  0.0786848  #> 1st Qu.:  0.4852103  #> Mean   :  1.202291  #> Median :  0.7210273  #> 3rd Qu.:  1.29724  #> Max    :  7.152933  #> NAs    :  0 %  data(ple4) summary(ple4) #> An object of class \"FLStock\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t61\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t1\t10\t10\t1957\t2017\t2\t6\t #>  #> Metrics:  #>   rec: 367450 - 4303680  (1000)  #>   ssb: 203391 - 913290  (t)  #>   catch: 78360 - 315245  (t)  #>   fbar: 0.20 - 0.72  (f)   data(nsher) summary(nsher) #> An object of class \"FLSR\" #>  #> Name:   #> Description:   #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t1\t45\t1\t1\t1\t1\t #>  #> Range:  min\tminyear\tmax\tmaxyear  #> \t0\t1960\t0\t2004\t #>  #>  #> Model: \trec ~ a * ssb * exp(-b * ssb) #> An object of class \"FLPar\" #> params #>        a        b  #> 1.19e+02 9.45e-03  #> units:  NA  #> Log-likelihood:  15.862(0)  #> Variance-covariance:     #>               a            b #>   a 255.3388181 1.808870e-02 #>   b   0.0180887 1.992659e-06"},{"path":"/reference/survey.html","id":null,"dir":"Reference","previous_headings":"","what":"A method to generate observations of abundance at age. — survey","title":"A method to generate observations of abundance at age. — survey","text":"method generate observations abundance age.","code":""},{"path":"/reference/survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A method to generate observations of abundance at age. — survey","text":"","code":"survey(object, index, ...)  # S4 method for FLStock,FLIndex survey(   object,   index,   sel = sel.pattern(index),   ages = dimnames(index)$age,   timing = mean(range(index, c(\"startf\", \"endf\"))),   index.q = index@index.q,   stability = 1 )  # S4 method for FLStock,FLIndexBiomass survey(   object,   index,   sel = sel.pattern(index),   ages = ac(seq(range(index, c(\"min\")), range(index, c(\"max\")))),   timing = mean(range(index, c(\"startf\", \"endf\"))),   catch.wt = stock.wt(object)[, dimnames(index)$year],   index.q = index@index.q,   stability = 1 )  # S4 method for FLStock,missing survey(   object,   sel = catch.sel(object),   ages = dimnames(sel)$age,   timing = 0.5,   index.q = 1,   biomass = FALSE,   stability = 1 )  # S4 method for FLStock,FLIndices survey(object, index, ...)"},{"path":"/reference/survey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A method to generate observations of abundance at age. — survey","text":"object object draw observation","code":""},{"path":"/reference/survey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A method to generate observations of abundance at age. — survey","text":"FLQuant index abundance","code":""},{"path":[]},{"path":"/reference/survey.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A method to generate observations of abundance at age. — survey","text":"FLR Team","code":""},{"path":"/reference/survey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A method to generate observations of abundance at age. — survey","text":"","code":"data(ple4) data(ple4.index) # CONSTRUCT a survey from stock and index survey(ple4, ple4.index) #> An object of class \"FLIndex\" #>  #> Name: BTS-Combined (all)  #> Description: Plaice in IV\t\t\t\t\t\t\t\t\t\t\t . Imported from VPA file.  #> Type :  numbers  #> Distribution :    #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t22\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tstartf\tendf  #> \t1\t10\t1\t1996\t2017\t0.6453376\t0.6453376\t #>  # Create FLIndexBiomass ple4.biom <- as(ple4.index, \"FLIndexBiomass\") survey(ple4, ple4.biom) #> An object of class \"FLIndexBiomass\" #>  #> Name: BTS-Combined (all)  #> Description: Plaice in IV\t\t\t\t\t\t\t\t\t\t\t . Imported from VPA file.  #> Distribution :    #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t22\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tstartf\tendf  #> \t1\t10\t1\t1996\t2017\t0.6453376\t0.6453376\t #>  data(ple4) survey(ple4) #> An object of class \"FLIndex\" #>  #> Name:   #> Description:   #> Type :  number  #> Distribution :    #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t61\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tstartf\tendf  #> \t1\t10\t10\t1957\t2017\t0.5\t0.5\t #>  survey(ple4, biomass=TRUE) #> An object of class \"FLIndexBiomass\" #>  #> Name:   #> Description:   #> Distribution :    #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t61\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tstartf\tendf  #> \t1\t10\t10\t1957\t2017\t0.5\t0.5\t #>"},{"path":"/reference/survivors.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the survivors of a stock to the next year. — survivors","title":"Calculate the survivors of a stock to the next year. — survivors","text":"FLStock object containing estimates adundance age ('stock.n') harvest level age ('harvest'), used bring forward population applying total mortality age ('z'). calculation made recruitment, abundances first age set 'NA', unless value provided.","code":""},{"path":"/reference/survivors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the survivors of a stock to the next year. — survivors","text":"","code":"survivors(object, rec = NA)"},{"path":"/reference/survivors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the survivors of a stock to the next year. — survivors","text":"object FLStock estimated harvest abundances rec Value recruitment, first age abundance, 'numeric' 'FLQuant'.'","code":""},{"path":"/reference/survivors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the survivors of a stock to the next year. — survivors","text":"abundances age survivors, 'FLQuant'.","code":""},{"path":"/reference/survivors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the survivors of a stock to the next year. — survivors","text":"","code":"data(ple4) stock.n(ple4[, ac(2002:2006)]) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  2002      2003      2004      2005      2006      #>   1  1792880.0  557844.0 1235790.0  863893.0  875191.0 #>   2   481832.0 1362670.0  417612.0  894667.0  618023.0 #>   3   413685.0  272903.0  729522.0  238706.0  552652.0 #>   4   181506.0  185801.0  118238.0  365617.0  136058.0 #>   5    98489.7   90505.8   97419.1   66113.3  219194.0 #>   6   106479.0   49763.0   49696.3   57107.9   41505.0 #>   7    13278.2   51718.8   26043.7   29565.3   37777.6 #>   8     7752.1    7045.7   28478.9   16720.1   21233.8 #>   9     3675.4    4964.1    4649.5   20533.5   12941.5 #>   10    9308.9    9758.3   11423.5   12764.9   27199.2 #>  #> units:  1000  survivors(ple4[, ac(2002:2006)]) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  2003      2004      2005      2006      2007      #>   1         NA        NA        NA        NA        NA #>   2  1362673.1  417612.2  894668.0  618023.2  651006.8 #>   3   272903.6  729521.1  238706.3  552652.0  393106.5 #>   4   185801.5  118237.7  365617.1  136057.6  326369.0 #>   5    90505.7   97418.9   66113.3  219193.4   87128.7 #>   6    49763.0   49696.3   57107.9   41505.0  148406.1 #>   7    51718.9   26043.7   29565.3   37777.6   29245.6 #>   8     7045.7   28478.9   16720.1   21233.8   28310.9 #>   9     4964.1    4649.5   20533.5   12941.5   17026.1 #>   10    9758.3   11423.5   12764.9   27199.1   33875.0 #>  #> units:  1000"},{"path":"/reference/sweep-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Method sweep for FLCore classes — sweep,FLArray-method","title":"Method sweep for FLCore classes — sweep,FLArray-method","text":"Use R's sweep method FLCore classes","code":""},{"path":"/reference/sweep-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method sweep for FLCore classes — sweep,FLArray-method","text":"","code":"# S4 method for FLArray sweep(x, MARGIN, STATS, FUN = \"-\", check.margin = TRUE, ...)  # S4 method for FLPar sweep(x, MARGIN, STATS, FUN = \"-\", check.margin = TRUE, ...)"},{"path":"/reference/sweep-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method sweep for FLCore classes — sweep,FLArray-method","text":"methods call base R sweep method FLCore classes ensure returned object class.","code":""},{"path":"/reference/sweep-methods.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method sweep for FLCore classes — sweep,FLArray-method","text":"sweep(x, MARGIN, STATS, FUN = \"-\", check.margin = TRUE, ...)","code":""},{"path":[]},{"path":"/reference/sweep-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method sweep for FLCore classes — sweep,FLArray-method","text":"FLR Team","code":""},{"path":"/reference/sweep-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method sweep for FLCore classes — sweep,FLArray-method","text":"","code":"flq <- FLQuant(rlnorm(90), dim=c(3,10), units='kg') # Get ratio of max value by year sweep(flq, 2, apply(flq, 2, max), \"/\") #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1       2       3       4       5       6       7       8       9       #>     1 0.23447 1.00000 0.66169 1.00000 0.37764 1.00000 1.00000 0.52301 0.53742 #>     2 0.85924 0.49154 0.96254 0.58859 1.00000 0.47852 0.12800 0.29560 1.00000 #>     3 1.00000 0.38721 1.00000 0.39603 0.42064 0.77241 0.54346 1.00000 0.74176 #>      year #> quant 10      #>     1 1.00000 #>     2 0.14132 #>     3 0.29221 #>  #> units:  kg"},{"path":"/reference/tail.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the first and last parts of an FLQuant. — tail,FLQuant-method","title":"Returns the first and last parts of an FLQuant. — tail,FLQuant-method","text":"Standard tail head methods can applied along dimension FLQuant object.","code":""},{"path":"/reference/tail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the first and last parts of an FLQuant. — tail,FLQuant-method","text":"","code":"# S4 method for FLQuant tail(x, n = 1, dim = 2, ...)  # S4 method for FLQuant head(x, n = 1, dim = 2, ...)"},{"path":"/reference/tail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the first and last parts of an FLQuant. — tail,FLQuant-method","text":"x object extract , FLQuant. n number elements extract, numeric. dim Dimension extract , defaults 2, 'year'.","code":""},{"path":"/reference/tail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the first and last parts of an FLQuant. — tail,FLQuant-method","text":"FLQuant extracted elements.","code":""},{"path":[]},{"path":"/reference/tail.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns the first and last parts of an FLQuant. — tail,FLQuant-method","text":"Iago Mosqueira (WMR)","code":""},{"path":"/reference/tail.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the first and last parts of an FLQuant. — tail,FLQuant-method","text":"","code":"x <- FLQuant(1:10)  # Extract the last 3 years tail(x, 3) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 8  9  10 #>   all  8  9 10 #>  #> units:  NA   # Extract all but the first 3 years tail(x, -3) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 4  5  6  7  8  9  10 #>   all  4  5  6  7  8  9 10 #>  #> units:  NA   # Extract the first 3 years head(x, 3) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1  2  3  4  5  6  7  8  9  10 #>   all  1  2  3  4  5  6  7  8  9 10 #>  #> units:  NA   # Extract all but the last 3 years head(x, -3) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>       year #> quant  1 2 3 4 5 6 7 8 9 10 #>  #> units:  NA"},{"path":"/reference/trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Method trim — trim","title":"Method trim — trim","text":"Trim FLR objects using named dimensions","code":""},{"path":"/reference/trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method trim — trim","text":"","code":"trim(x, ...)  # S4 method for FLArray trim(x, ...)  # S4 method for FLComp trim(x, ...)  # S4 method for FLS trim(x, ...)  # S4 method for FLBiol trim(x, ...)"},{"path":"/reference/trim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method trim — trim","text":"Subsetting FLR objects can carried dimension names using trim. number dimension names selected dimensions passed method used subset input object. Exceptions made classes certain slots might differ one dimensions. trim applied FLQuant object length 1 first dimension dimension name equal '', values trim specified dimension ignored. example, FLStock objects contain slots length=1 first dimension. Specifying values trim first dimension effect slots (catch, landings, discards, stock). Calculations might need carried recalculate slots (e.g. using computeCatch, computeLandings, computeDiscards computeStock) quant-structured counterparts modified along first dimension.","code":""},{"path":"/reference/trim.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method trim — trim","text":"trim(x)","code":""},{"path":[]},{"path":"/reference/trim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method trim — trim","text":"FLR Team","code":""},{"path":"/reference/trim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method trim — trim","text":"","code":"flq <- FLQuant(rnorm(90), dimnames=list(age=1:10, year=2000:2016))  trim(flq, year=2000:2005) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  2000      2001      2002      2003      2004      2005      #>   1  -0.280422 -0.430205  0.120662 -0.848278  1.440049  1.352135 #>   2   0.052818  0.344476  0.121017  0.735323 -0.484485 -1.057141 #>   3  -1.922824 -0.471077  1.227001  0.371304  0.328686 -0.062179 #>   4  -0.488962 -0.550618 -1.540746 -1.541355 -0.266258 -0.359563 #>   5   0.650278  0.554343 -0.128456  0.064827  0.503252 -0.843722 #>   6  -0.178181  0.725959  0.378941 -2.254289 -0.465968  0.359364 #>   7   1.802803 -1.568867  0.306811  1.782011  0.492407 -0.342467 #>   8   1.042206 -0.014456  0.185899  0.815925  0.789373 -0.141715 #>   9   0.591269 -0.591412  0.851600 -0.313564 -0.123026  2.520258 #>   10  0.512747 -1.203682  0.165703  1.138641  0.337176  1.847825 #>  #> units:  NA  # which is equivalent to window(flq, start=2000, end=2005) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  2000      2001      2002      2003      2004      2005      #>   1  -0.280422 -0.430205  0.120662 -0.848278  1.440049  1.352135 #>   2   0.052818  0.344476  0.121017  0.735323 -0.484485 -1.057141 #>   3  -1.922824 -0.471077  1.227001  0.371304  0.328686 -0.062179 #>   4  -0.488962 -0.550618 -1.540746 -1.541355 -0.266258 -0.359563 #>   5   0.650278  0.554343 -0.128456  0.064827  0.503252 -0.843722 #>   6  -0.178181  0.725959  0.378941 -2.254289 -0.465968  0.359364 #>   7   1.802803 -1.568867  0.306811  1.782011  0.492407 -0.342467 #>   8   1.042206 -0.014456  0.185899  0.815925  0.789373 -0.141715 #>   9   0.591269 -0.591412  0.851600 -0.313564 -0.123026  2.520258 #>   10  0.512747 -1.203682  0.165703  1.138641  0.337176  1.847825 #>  #> units:  NA   trim(flq, year=2000:2005, age=1:2) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2000      2001      2002      2003      2004      2005      #>   1 -0.280422 -0.430205  0.120662 -0.848278  1.440049  1.352135 #>   2  0.052818  0.344476  0.121017  0.735323 -0.484485 -1.057141 #>  #> units:  NA    # Now on an FLStock data(ple4) summary(trim(ple4, year=1990:1995)) #> An object of class \"FLStock\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t10\t6\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t1\t10\t10\t1990\t1995\t2\t6\t #>  #> Metrics:  #>   rec: 550376 - 1083810  (1000)  #>   ssb: 222203 - 396458  (t)  #>   catch: 132629 - 250604  (t)  #>   fbar: 0.60 - 0.61  (f)   # If 'age' is trimmed in ple4, catch, landings and discards need to be # recalculated   shpl4 <- trim(ple4, age=1:4)   landings(shpl4) <- computeLandings(shpl4)   discards(shpl4) <- computeDiscards(shpl4)   catch(shpl4) <- computeCatch(shpl4)   summary(shpl4) #> An object of class \"FLStock\" #>  #> Name: PLE  #> Description: Plaice in IV. ICES WGNSSK 2018. FLAAP  #> Quant: age  #> Dims:  age \tyear\tunit\tseason\tarea\titer #> \t4\t61\t1\t1\t1\t1\t #>  #> Range:  min\tmax\tpgroup\tminyear\tmaxyear\tminfbar\tmaxfbar  #> \t1\t4\tNA\t1957\t2017\t2\t4\t #>  #> Metrics:  #>   rec: 367450 - 4303680  (1000)  #>   ssb: 91016 - 316967  (t)  #>   catch: 36219 - 253152  (t)  #>   fbar: 0.22 - 0.71  (f)"},{"path":"/reference/units-FLCore.html","id":null,"dir":"Reference","previous_headings":"","what":"Method units — units-FLCore","title":"Method units — units-FLCore","text":"units attribute FLQuant FLArray-derived objects","code":""},{"path":"/reference/units-FLCore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method units — units-FLCore","text":"","code":"# S4 method for FLArray units(x)  # S4 method for FLArray,character units(x) <- value  setunits(x, value)  # S4 method for FLPar units(x)  # S4 method for FLPar,character units(x) <- value  # S4 method for FLComp units(x)  # S4 method for FLComp,list units(x) <- value  # S4 method for FLComp,character units(x) <- value  # S4 method for FLComp,`function` units(x) <- value"},{"path":"/reference/units-FLCore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method units — units-FLCore","text":"Objects FLArray-based classes (e.g. FLQuant) contain units attribute class character. used store corresponding units measurement.  attribute can directly accessed modified using units units<- methods. complex objects, units return named list containing attributes FLQuant slots. units complex object can modified slots subset , passing named list new values. See examples . complete set units complex object can obtained named list. Assignment units FLQuant slots complex object can carried passing named list character vector containing units slots modified.","code":""},{"path":"/reference/units-FLCore.html","id":"generic-function","dir":"Reference","previous_headings":"","what":"Generic function","title":"Method units — units-FLCore","text":"units(x) units<-(x,value)","code":""},{"path":[]},{"path":"/reference/units-FLCore.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method units — units-FLCore","text":"FLR Team","code":""},{"path":"/reference/units-FLCore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method units — units-FLCore","text":"","code":"flq <- FLQuant(rnorm(100), dim=c(5,20), units='kg') units(flq) #> [1] \"kg\" units(flq) <- 't' summary(flq) #> An object of class \"FLQuant\" with: #> dim  :  5 20 1 1 1 1  #> quant:  quant  #> units:  t  #>  #> Min    :  -2.98825  #> 1st Qu.:  -0.8110214  #> Mean   :  -0.1188892  #> Median :  -0.1521434  #> 3rd Qu.:  0.5963365  #> Max    :  2.389801  #> NAs    :  0 %  # units for a complex object   data(ple4)   units(ple4) #> $catch #> [1] \"t\" #>  #> $catch.n #> [1] \"1000\" #>  #> $catch.wt #> [1] \"kg\" #>  #> $discards #> [1] \"t\" #>  #> $discards.n #> [1] \"1000\" #>  #> $discards.wt #> [1] \"kg\" #>  #> $landings #> [1] \"t\" #>  #> $landings.n #> [1] \"1000\" #>  #> $landings.wt #> [1] \"kg\" #>  #> $stock #> [1] \"t\" #>  #> $stock.n #> [1] \"1000\" #>  #> $stock.wt #> [1] \"kg\" #>  #> $m #> [1] \"m\" #>  #> $mat #> [1] \"\" #>  #> $harvest #> [1] \"f\" #>  #> $harvest.spwn #> [1] \"\" #>  #> $m.spwn #> [1] \"\" #>    units(ple4) <- list(harvest='hr')  data(ple4) units(ple4) <- list(harvest=\"hr\") units(ple4) <- c(harvest=\"hr\")"},{"path":"/reference/uom.html","id":null,"dir":"Reference","previous_headings":"","what":"uom Units of Measurement — uom","title":"uom Units of Measurement — uom","text":"'units' attribute FLQuant objects provides mechanism keeping track units measurement particular piece data.","code":""},{"path":"/reference/uom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uom Units of Measurement — uom","text":"","code":"uom(op, u1, u2)  uomUnits(unit = missing)"},{"path":"/reference/uom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"uom Units of Measurement — uom","text":"op arithmetic operator used, one '+', '-', '*' '/' u1 units measurement string first object u2 units measurement string second object unit character vector one units compared known uom.","code":""},{"path":"/reference/uom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"uom Units of Measurement — uom","text":"uom returns string corresponding units measurement, character vector, showing operation carried , units known uom compatible, e.g. \"100 * d\". uomUnits returns TRUE FALSE unit given, otherwise character vector units known uom.","code":""},{"path":"/reference/uom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uom Units of Measurement — uom","text":"Arithmetic operators 'FLQuant' objects aware limited set units measurement output right unit two object arithmetically combined. example, product object units 'kg' '1000' output object 'units' 't' (metric tonnes). Operations involving combinations units defined issue warning, resulting 'units' attribute simply keep string indicating input units measurement operation carried , '10 * 1000'. Note scaling modification values object takes place. Conversion across units carried uom() function list units known uom stored internally can queried calling uomUnits() arguments. character vector provided, logical returned telling whether string included table.","code":""},{"path":[]},{"path":"/reference/uom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"uom Units of Measurement — uom","text":"FLR Team","code":""},{"path":"/reference/uom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uom Units of Measurement — uom","text":"","code":"# Conversion between weights FLQuant(1, units='kg') * FLQuant(1000, units='1') #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1    #>   all 1000 #>  #> units:  kg   # Conversion between mortalities FLQuant(0.2, units='m') + FLQuant(0.34, units='f') #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>      year #> quant 1    #>   all 0.54 #>  #> units:  z   # Check if units are known uomUnits('kg') #> [1] TRUE uomUnits('kell') #> [1] FALSE"},{"path":"/reference/uomTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Table for conversions and operations between units of measurement — uomTable","title":"Table for conversions and operations between units of measurement — uomTable","text":"uom defaults NA unless defined . unit +/- , returns unit (e.g. kg + kg = kg) numeric unit * 1 returns unit (e.g. 1e4 * 1 = 1e4) numeric unit * numeric unit returns product (e.g. 10 * 100 = 1000) unit / unit returns \"\" (e.g. 100 / 100 = \"\") numeric unit / smaller numeric unit returns division (e.g. 100 / 10 = 10) 100 times kg returns t numeric unit * 'kg' returns product tonnes (e.g. kg * 1e4 = t * 10) units divisions parsed (e.g. days/boat * boat = days)","code":""},{"path":"/reference/uomTable.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table for conversions and operations between units of measurement — uomTable","text":"object class array","code":""},{"path":"/reference/upperlower-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and modify the lower and upper FLModel attibutes. — upperlower","title":"Extract and modify the lower and upper FLModel attibutes. — upperlower","text":"Description: Lorem ipsum dolor sit amet, consectetur adipiscing elit.","code":""},{"path":"/reference/upperlower-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and modify the lower and upper FLModel attibutes. — upperlower","text":"","code":"lower(object, ...)  # S4 method for FLModel lower(object)  # S4 method for FLModel upper(object)"},{"path":"/reference/upperlower-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and modify the lower and upper FLModel attibutes. — upperlower","text":"object Object extract modify ... arguments value New value","code":""},{"path":"/reference/upperlower-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and modify the lower and upper FLModel attibutes. — upperlower","text":"RETURN Lorem ipsum dolor sit amet","code":""},{"path":"/reference/upperlower-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract and modify the lower and upper FLModel attibutes. — upperlower","text":"Details: Aliquam sagittis feugiat felis eget consequat.","code":""},{"path":[]},{"path":"/reference/upperlower-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract and modify the lower and upper FLModel attibutes. — upperlower","text":"FLR Team","code":""},{"path":"/reference/verify.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify FLR objects — verify","title":"Verify FLR objects — verify","text":"Verifies content FLR objects according set rules","code":""},{"path":"/reference/verify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify FLR objects — verify","text":"","code":"verify(object, ...)  # S4 method for FLComp verify(object, ..., report = TRUE)  # S4 method for FLStock verify(object, rules = ruleset(object), ..., report = TRUE)"},{"path":"/reference/verify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify FLR objects — verify","text":"object object FLR class method defined ... Additional rules tested, formula list. See details report standard data.frame report output (TRUE) single logical value tests? rules Basic set rules given class, returned ruleset().","code":""},{"path":"/reference/verify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify FLR objects — verify","text":"data.frame results applying rules, single logical value, report=FALSE","code":""},{"path":"/reference/verify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Verify FLR objects — verify","text":"Classes' validity functions generally check structure dimensions objects component slots. checks data content objects often required. various verify methods implement system create rules object expected pass, minimum standard set rules defined class data.frame output method report=TRUE contains one row per rule following columns: name, rule name items, number comparisons carried passes, number TRUE values fails, number FALSE values NAs, number logical NAs valid, values TRUE? rule, expression evaluated Additional rules can specify call verify, one two forms. Simple rules can defined formula involving methods defined class. rule highm = ~ m < 2 check values m slot higher 2 return logical FLQuant. rules simply use existing methods functions, example operating slots object, requiring additional computations. case, argument verify can list, element named rule class formula test defined. test calls new function, defined another element list, used verify evaluating set rules. See examples. set rules defined FLStock class, available calling ruleset method. verify method FLStock default evaluate rules, well defined call.","code":""},{"path":[]},{"path":"/reference/verify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Verify FLR objects — verify","text":"FLR Team","code":""},{"path":"/reference/verify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verify FLR objects — verify","text":"","code":"# Verifying a new rule for an FLSR object data(nsher) # rule: are all recruitment values greater than 0? verify(nsher, rec=~rec > 0) #>   name items passes fails NAs valid    rule #> 1  rec    45     45     0   0  TRUE rec > 0  # Define rule calling its own function data(ple4) # rule: ssb is less verify(ple4, ssbstock = ~ssb < stock) #>            name items passes fails NAs valid #> 1         anyna    17     17     0   0  TRUE #> 2      catch.wt   610    610     0   0  TRUE #> 3   landings.wt   610    594    16   0 FALSE #> 4   discards.wt   610    431   179   0 FALSE #> 5      stock.wt   610    610     0   0  TRUE #> 6           mat   610    610     0   0  TRUE #> 7  harvest.spwn   610    610     0   0  TRUE #> 8        m.spwn   610    610     0   0  TRUE #> 9       harvest   610    610     0   0  TRUE #> 10      cohorts   336    336     0   0  TRUE #> 11         uoms    17     17     0   0  TRUE #> 12     ssbstock    61     61     0   0  TRUE #>                                     rule #> 1                                 !anyna #> 2                           catch.wt > 0 #> 3                        landings.wt > 0 #> 4                        discards.wt > 0 #> 5                           stock.wt > 0 #> 6                    mat <= 1 & mat >= 0 #> 7  harvest.spwn <= 1 & harvest.spwn >= 0 #> 8              m.spwn <= 1 & m.spwn >= 0 #> 9                           harvest >= 0 #> 10                     ccohorts(stock.n) #> 11                                  uoms #> 12                           ssb < stock data(ple4) # verify for the standard set of rules for FLStock verify(ple4) #>            name items passes fails NAs valid #> 1         anyna    17     17     0   0  TRUE #> 2      catch.wt   610    610     0   0  TRUE #> 3   landings.wt   610    594    16   0 FALSE #> 4   discards.wt   610    431   179   0 FALSE #> 5      stock.wt   610    610     0   0  TRUE #> 6           mat   610    610     0   0  TRUE #> 7  harvest.spwn   610    610     0   0  TRUE #> 8        m.spwn   610    610     0   0  TRUE #> 9       harvest   610    610     0   0  TRUE #> 10      cohorts   336    336     0   0  TRUE #> 11         uoms    17     17     0   0  TRUE #>                                     rule #> 1                                 !anyna #> 2                           catch.wt > 0 #> 3                        landings.wt > 0 #> 4                        discards.wt > 0 #> 5                           stock.wt > 0 #> 6                    mat <= 1 & mat >= 0 #> 7  harvest.spwn <= 1 & harvest.spwn >= 0 #> 8              m.spwn <= 1 & m.spwn >= 0 #> 9                           harvest >= 0 #> 10                     ccohorts(stock.n) #> 11                                  uoms # verify a single rule from set verify(ple4, rules=ruleset(ple4, 'anyna'), report=FALSE) #> [1] TRUE  # add own rule to set verify(ple4, m = ~m >=0) #>            name items passes fails NAs valid #> 1         anyna    17     17     0   0  TRUE #> 2      catch.wt   610    610     0   0  TRUE #> 3   landings.wt   610    594    16   0 FALSE #> 4   discards.wt   610    431   179   0 FALSE #> 5      stock.wt   610    610     0   0  TRUE #> 6           mat   610    610     0   0  TRUE #> 7  harvest.spwn   610    610     0   0  TRUE #> 8        m.spwn   610    610     0   0  TRUE #> 9       harvest   610    610     0   0  TRUE #> 10      cohorts   336    336     0   0  TRUE #> 11         uoms    17     17     0   0  TRUE #> 12            m   610    610     0   0  TRUE #>                                     rule #> 1                                 !anyna #> 2                           catch.wt > 0 #> 3                        landings.wt > 0 #> 4                        discards.wt > 0 #> 5                           stock.wt > 0 #> 6                    mat <= 1 & mat >= 0 #> 7  harvest.spwn <= 1 & harvest.spwn >= 0 #> 8              m.spwn <= 1 & m.spwn >= 0 #> 9                           harvest >= 0 #> 10                     ccohorts(stock.n) #> 11                                  uoms #> 12                                m >= 0"},{"path":"/reference/weighted.mean-FLQuants-FLQuants-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted means along a FLQuants. — weighted.mean,FLQuants,FLQuants-method","title":"Weighted means along a FLQuants. — weighted.mean,FLQuants,FLQuants-method","text":"Facilitates calculation weighted means across FLQuants object.","code":""},{"path":"/reference/weighted.mean-FLQuants-FLQuants-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted means along a FLQuants. — weighted.mean,FLQuants,FLQuants-method","text":"","code":"# S4 method for FLQuants,FLQuants weighted.mean(x, w)"},{"path":"/reference/weighted.mean-FLQuants-FLQuants-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted means along a FLQuants. — weighted.mean,FLQuants,FLQuants-method","text":"x Values averaged, object class FLQuants. w weights used, object class FLQuants.","code":""},{"path":"/reference/weighted.mean-FLQuants-FLQuants-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted means along a FLQuants. — weighted.mean,FLQuants,FLQuants-method","text":"single FLQuant object.","code":""},{"path":"/reference/weighted.mean-FLQuants-FLQuants-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted means along a FLQuants. — weighted.mean,FLQuants,FLQuants-method","text":"object class FLQuants containing elements average computed, combined another one, length, containing values used weights. overall weighted mean calculated computing product element corresponding weight, dividing sum weights. NAs value elements substituted zeroes, influence mean.","code":""},{"path":[]},{"path":"/reference/weighted.mean-FLQuants-FLQuants-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Weighted means along a FLQuants. — weighted.mean,FLQuants,FLQuants-method","text":"FLR Team","code":""},{"path":"/reference/weighted.mean-FLQuants-FLQuants-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted means along a FLQuants. — weighted.mean,FLQuants,FLQuants-method","text":"","code":"data(ple4) # Weighted mean of landings and discards weights-at-age weighted.mean(FLQuants(L=landings.wt(ple4), D=discards.wt(ple4)),   FLQuants(L=landings.n(ple4), D=discards.n(ple4))) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957     1958     1959     1960     1961     1962     1963     1964     #>   1  0.043999 0.047000 0.051000 0.045000 0.044000 0.042000 0.048000 0.032000 #>   2  0.109801 0.105531 0.119977 0.115036 0.101425 0.099279 0.109657 0.125989 #>   3  0.194296 0.189472 0.191506 0.203724 0.180139 0.181375 0.174760 0.203920 #>   4  0.256615 0.256336 0.260406 0.287076 0.301163 0.273064 0.304230 0.271018 #>   5  0.349100 0.329376 0.345271 0.377377 0.402368 0.396960 0.391876 0.378894 #>   6  0.455454 0.452345 0.471905 0.479940 0.506119 0.538035 0.531254 0.484717 #>   7  0.532988 0.512971 0.591979 0.600988 0.603987 0.569980 0.623985 0.627988 #>   8  0.588982 0.614964 0.622952 0.682962 0.670966 0.691974 0.666969 0.699965 #>   9  0.395964 0.664949 0.749944 0.723929 0.811933 0.776924 0.714950 0.736908 #>   10 0.997959 0.991965 0.999970 1.093964 1.070964 1.126954 1.027970 1.004970 #>     year #> age  1965     1966     1967     1968     1969     1970     1971     1972     #>   1  0.038000 0.038000 0.035999 0.060000 0.052007 0.049160 0.057058 0.066877 #>   2  0.075866 0.104304 0.110549 0.116347 0.174246 0.131116 0.159854 0.207158 #>   3  0.214406 0.148098 0.189574 0.223414 0.271611 0.268303 0.276554 0.289992 #>   4  0.313280 0.314817 0.234828 0.274537 0.283588 0.352160 0.388422 0.407373 #>   5  0.381437 0.427637 0.422016 0.339914 0.356021 0.393751 0.444319 0.486404 #>   6  0.468814 0.482866 0.543256 0.516098 0.408318 0.440916 0.512235 0.539756 #>   7  0.538992 0.558990 0.596989 0.589983 0.572974 0.498998 0.541984 0.607979 #>   8  0.662961 0.623983 0.661974 0.595971 0.654967 0.671964 0.606994 0.645971 #>   9  0.725914 0.689948 0.737946 0.685915 0.657962 0.743909 0.698947 0.673982 #>   10 0.886975 0.932969 0.977957 0.910967 0.892974 0.891969 0.890974 0.938971 #>     year #> age  1973     1974     1975     1976     1977     1978     1979     1980     #>   1  0.045283 0.056495 0.068767 0.087787 0.071297 0.069846 0.066755 0.055802 #>   2  0.205176 0.120785 0.151806 0.180926 0.217858 0.190274 0.190466 0.196997 #>   3  0.333995 0.343206 0.204961 0.261605 0.245025 0.315341 0.295421 0.342960 #>   4  0.403174 0.403747 0.392940 0.347254 0.318061 0.364251 0.337713 0.399370 #>   5  0.478238 0.472376 0.492452 0.509426 0.395996 0.432299 0.426454 0.471181 #>   6  0.537635 0.552275 0.585128 0.591583 0.551315 0.486444 0.472122 0.542439 #>   7  0.604968 0.608978 0.635984 0.640979 0.646945 0.608967 0.549993 0.587979 #>   8  0.626970 0.692947 0.702944 0.704946 0.720928 0.686894 0.674948 0.661962 #>   9  0.676947 0.706939 0.782910 0.740877 0.714912 0.775834 0.795858 0.771797 #>   10 0.841983 0.925980 1.018976 0.979962 0.977947 0.949934 0.959948 1.012908 #>     year #> age  1981     1982     1983     1984     1985     1986     1987     1988     #>   1  0.048365 0.055830 0.051689 0.053062 0.054057 0.049257 0.043000 0.043000 #>   2  0.183437 0.152001 0.152694 0.149910 0.169134 0.141397 0.113402 0.101804 #>   3  0.326828 0.308248 0.274762 0.265457 0.267967 0.275409 0.218606 0.197485 #>   4  0.414729 0.420607 0.379126 0.321042 0.333496 0.310525 0.343365 0.275873 #>   5  0.501685 0.511917 0.506954 0.470452 0.443875 0.402396 0.375422 0.415128 #>   6  0.555582 0.605900 0.601997 0.588348 0.561543 0.471807 0.470664 0.476689 #>   7  0.603969 0.663973 0.676959 0.676968 0.666955 0.667978 0.573979 0.589985 #>   8  0.641961 0.711936 0.770909 0.725935 0.729903 0.749920 0.727922 0.679945 #>   9  0.724928 0.737919 0.814865 0.838846 0.806857 0.855849 0.834822 0.807882 #>   10 1.006917 0.983944 0.983941 1.035921 1.020912 1.013928 0.992912 1.016921 #>     year #> age  1989     1990     1991     1992     1993     1994     1995     1996     #>   1  0.047111 0.053316 0.056328 0.054789 0.062608 0.063660 0.071146 0.053846 #>   2  0.117643 0.129659 0.149493 0.145431 0.160205 0.179072 0.182859 0.140176 #>   3  0.215080 0.210649 0.210932 0.225705 0.249957 0.256510 0.282589 0.267965 #>   4  0.291297 0.290494 0.272753 0.275225 0.303272 0.331360 0.333654 0.336259 #>   5  0.364309 0.359634 0.349364 0.324154 0.339674 0.372247 0.372883 0.412679 #>   6  0.512269 0.439763 0.449276 0.410348 0.406913 0.416102 0.419083 0.463592 #>   7  0.590975 0.585968 0.525990 0.529995 0.511991 0.490993 0.473992 0.489980 #>   8  0.667958 0.689926 0.665960 0.606975 0.629973 0.609971 0.592967 0.552953 #>   9  0.784831 0.760900 0.742884 0.718891 0.719903 0.730933 0.733853 0.711873 #>   10 0.939919 1.009880 0.923918 0.890936 0.855927 0.905917 0.905884 0.857914 #>     year #> age  1997     1998     1999     2000     2001     2002     2003     2004     #>   1  0.045137 0.047196 0.053825 0.063148 0.090053 0.056714 0.065718 0.054372 #>   2  0.128986 0.093865 0.103245 0.123154 0.135808 0.130844 0.123961 0.124949 #>   3  0.220379 0.208050 0.198554 0.209624 0.196628 0.221728 0.226407 0.220420 #>   4  0.353209 0.298684 0.266515 0.274163 0.233921 0.285107 0.283692 0.296929 #>   5  0.408398 0.449011 0.413306 0.371930 0.303216 0.326126 0.335699 0.375498 #>   6  0.472671 0.544009 0.414278 0.452321 0.409800 0.426357 0.385257 0.421241 #>   7  0.540972 0.612968 0.537933 0.564982 0.576465 0.469180 0.419098 0.505507 #>   8  0.573943 0.672883 0.636879 0.600437 0.700436 0.643572 0.634464 0.559824 #>   9  0.615899 0.686827 0.747766 0.751606 0.795388 0.759522 0.762447 0.796136 #>   10 0.911896 0.898866 0.803876 0.887791 0.798831 0.903724 0.856513 0.871236 #>     year #> age  2005     2006     2007     2008     2009     2010     2011     2012     #>   1  0.067422 0.060317 0.058775 0.056569 0.061207 0.061822 0.047647 0.052327 #>   2  0.117393 0.139368 0.113666 0.123499 0.124699 0.131690 0.114740 0.096187 #>   3  0.212930 0.211812 0.222959 0.247632 0.232112 0.226039 0.211950 0.195563 #>   4  0.297902 0.293315 0.310085 0.324622 0.326594 0.311303 0.277422 0.294436 #>   5  0.351575 0.374795 0.351229 0.389383 0.399101 0.395925 0.369451 0.348424 #>   6  0.347476 0.383401 0.375268 0.436803 0.465827 0.442379 0.453226 0.425402 #>   7  0.453163 0.428475 0.490651 0.368272 0.518436 0.462564 0.595436 0.509182 #>   8  0.554110 0.456878 0.357361 0.468685 0.440965 0.573445 0.444870 0.557246 #>   9  0.616866 0.530799 0.586515 0.639565 0.667432 0.681865 0.555780 0.557920 #>   10 0.909298 0.747735 0.631758 0.637659 0.791518 0.648744 0.803854 0.679823 #>     year #> age  2013     2014     2015     2016     2017     #>   1  0.050915 0.025005 0.026000 0.048000 0.051034 #>   2  0.091130 0.093435 0.080271 0.083793 0.085895 #>   3  0.178565 0.171657 0.161845 0.157402 0.158552 #>   4  0.273559 0.253256 0.257901 0.243039 0.218409 #>   5  0.344682 0.317605 0.325621 0.298878 0.314393 #>   6  0.409448 0.396089 0.393707 0.352469 0.386271 #>   7  0.490250 0.472624 0.461250 0.422309 0.437717 #>   8  0.599009 0.541619 0.480815 0.465186 0.531501 #>   9  0.606877 0.627925 0.581978 0.555971 0.641979 #>   10 0.679910 0.649906 0.599938 0.683933 0.734886 #>  #> units:  NA"},{"path":"/reference/wireframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Method wireframe — wireframe","title":"Method wireframe — wireframe","text":"3D plot FLQuant objects","code":""},{"path":"/reference/wireframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method wireframe — wireframe","text":"","code":"# S4 method for formula,FLQuant wireframe(x, data, ...)"},{"path":"/reference/wireframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method wireframe — wireframe","text":"x formula formula lattice data FLQuant object values ... Additional argument list passed wireframe","code":""},{"path":"/reference/wireframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method wireframe — wireframe","text":"wireframe plot","code":""},{"path":"/reference/wireframe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method wireframe — wireframe","text":"Method plot 3D representations FLQuant objects","code":""},{"path":"/reference/wireframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method wireframe — wireframe","text":"","code":"data(ple4) wireframe(data~age+year, data=harvest(ple4))"},{"path":"/reference/yearSample.html","id":null,"dir":"Reference","previous_headings":"","what":"Samples along the year dimension — yearSample","title":"Samples along the year dimension — yearSample","text":"resample FLQuant object along 'year' dimension returned. 'year' dimnames output object can specified, although needed resample assigned slot.","code":""},{"path":"/reference/yearSample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Samples along the year dimension — yearSample","text":"","code":"yearSample(x, size = length(years), years, replace = TRUE, prob = NULL)"},{"path":"/reference/yearSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Samples along the year dimension — yearSample","text":"x FLQuant object. size Number samples (years), non-negative integer. years Optional vector set 'year' dimnames output. replace sampling replacement? Defaults TRUE. prob vector probability weights.","code":""},{"path":"/reference/yearSample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Samples along the year dimension — yearSample","text":"RETURN Description, class","code":""},{"path":[]},{"path":"/reference/yearSample.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Samples along the year dimension — yearSample","text":"Iago Mosqueira (WMR)","code":""},{"path":"/reference/yearSample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Samples along the year dimension — yearSample","text":"","code":"data(ple4) # Take 20 samples of recent recruitment  yearSample(rec(ple4)[, ac(2013:2017)], 20) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2016    2017    2017    2013    2013    2013    2016    2014    2017    #>   1 1211320 1823000 1823000 1455050 1455050 1455050 1211320 1640700 1823000 #>    year #> age 2015    2017    2015    2015    2016    2015    2014    2014    2015    #>   1  895620 1823000  895620  895620 1211320  895620 1640700 1640700  895620 #>    year #> age 2015    2014    #>   1  895620 1640700 #>  #> units:  1000  # Providing 'years' sets the output object dimnames yearSample(rec(ple4)[, ac(2013:2017)], 20, year=2000:2019) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>    year #> age 2000    2001    2002    2003    2004    2005    2006    2007    2008    #>   1 1455050 1640700 1455050 1823000 1455050  895620 1455050 1823000 1640700 #>    year #> age 2009    2010    2011    2012    2013    2014    2015    2016    2017    #>   1 1823000 1823000 1823000  895620 1823000 1640700 1823000 1455050 1640700 #>    year #> age 2018    2019    #>   1 1211320  895620 #>  #> units:  1000"},{"path":"/reference/z-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Total mortality z — z","title":"Total mortality z — z","text":"Returns calculation total mortality, z, usually sum fishing mortality, f, natural mortality, m.","code":""},{"path":"/reference/z-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total mortality z — z","text":"","code":"z(object, ...)  # S4 method for FLS z(object, ...)"},{"path":"/reference/z-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total mortality z — z","text":"object Object calculate . ... extra arguments.","code":""},{"path":"/reference/z-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total mortality z — z","text":"object corresponding class, usually FLQuant.","code":""},{"path":[]},{"path":"/reference/z-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Total mortality z — z","text":"FLR Team","code":""},{"path":"/reference/z-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total mortality z — z","text":"","code":"data(ple4)  z(ple4) #> An object of class \"FLQuant\" #> , , unit = unique, season = all, area = unique #>  #>     year #> age  1957    1958    1959    1960    1961    1962    1963    1964    1965    #>   1  0.19870 0.21365 0.22783 0.23708 0.23562 0.21903 0.19365 0.17462 0.16825 #>   2  0.27086 0.31223 0.34887 0.36159 0.35486 0.35402 0.36995 0.37938 0.35853 #>   3  0.36151 0.41008 0.44974 0.45911 0.45168 0.46891 0.53097 0.58899 0.57128 #>   4  0.40882 0.42889 0.44462 0.45025 0.45073 0.45967 0.48326 0.50741 0.51404 #>   5  0.35628 0.39233 0.42428 0.44117 0.44569 0.45338 0.47277 0.49289 0.49961 #>   6  0.31094 0.34975 0.38669 0.41030 0.42299 0.44197 0.47568 0.50218 0.49506 #>   7  0.32540 0.32609 0.33037 0.34195 0.36164 0.38743 0.41368 0.42610 0.41259 #>   8  0.32773 0.32274 0.31858 0.31606 0.31856 0.33191 0.35659 0.37475 0.36611 #>   9  0.29867 0.33277 0.35097 0.33147 0.29744 0.28907 0.32035 0.36149 0.36326 #>   10 0.29867 0.33277 0.35097 0.33147 0.29744 0.28907 0.32035 0.36149 0.36326 #>     year #> age  1966    1967    1968    1969    1970    1971    1972    1973    1974    #>   1  0.17465 0.19774 0.24156 0.28898 0.30371 0.29494 0.29163 0.30513 0.33698 #>   2  0.33270 0.33829 0.38235 0.42813 0.43004 0.41262 0.41717 0.44766 0.47866 #>   3  0.51109 0.47683 0.48170 0.49480 0.49244 0.49309 0.52456 0.57933 0.60832 #>   4  0.50195 0.47953 0.45703 0.44543 0.45313 0.48365 0.54170 0.61160 0.64506 #>   5  0.49314 0.48121 0.46954 0.46101 0.45962 0.47548 0.52200 0.58629 0.61667 #>   6  0.47146 0.46447 0.47999 0.49206 0.48098 0.47026 0.49000 0.53293 0.55323 #>   7  0.39201 0.39173 0.41671 0.44342 0.44864 0.44500 0.45410 0.47491 0.48674 #>   8  0.34577 0.34040 0.35726 0.38316 0.40385 0.41948 0.43526 0.45092 0.46085 #>   9  0.33546 0.31658 0.31965 0.33819 0.36662 0.40016 0.43209 0.45645 0.46932 #>   10 0.33546 0.31658 0.31965 0.33819 0.36662 0.40016 0.43209 0.45645 0.46932 #>     year #> age  1975    1976    1977    1978    1979    1980    1981    1982    1983    #>   1  0.38748 0.44345 0.47857 0.47127 0.41715 0.35065 0.31639 0.32981 0.37186 #>   2  0.49117 0.49939 0.52161 0.55308 0.57531 0.57755 0.56445 0.54402 0.52806 #>   3  0.58315 0.55094 0.55543 0.59864 0.66808 0.74099 0.77471 0.73907 0.67963 #>   4  0.61613 0.57586 0.56993 0.59760 0.64224 0.68819 0.72080 0.72827 0.71929 #>   5  0.58613 0.55211 0.56409 0.60687 0.63252 0.62135 0.60423 0.60711 0.62975 #>   6  0.52797 0.50634 0.53187 0.58614 0.61096 0.58192 0.53865 0.51374 0.51874 #>   7  0.47907 0.47110 0.48188 0.50738 0.53163 0.53960 0.52207 0.48265 0.45565 #>   8  0.46145 0.45523 0.44631 0.44276 0.45407 0.47667 0.48613 0.46500 0.43790 #>   9  0.46813 0.45293 0.42688 0.40305 0.39522 0.40592 0.42559 0.44312 0.44735 #>   10 0.46813 0.45293 0.42688 0.40305 0.39522 0.40592 0.42559 0.44312 0.44735 #>     year #> age  1984    1985    1986    1987    1988    1989    1990    1991    1992    #>   1  0.40912 0.41985 0.40628 0.37835 0.34982 0.33022 0.32160 0.32426 0.33089 #>   2  0.52728 0.54164 0.56324 0.58183 0.58309 0.55748 0.52744 0.52285 0.54274 #>   3  0.64699 0.65196 0.68640 0.73690 0.76756 0.74311 0.69619 0.67994 0.70285 #>   4  0.70823 0.70501 0.71645 0.74140 0.75802 0.74450 0.71494 0.69670 0.69887 #>   5  0.66654 0.70877 0.74302 0.76071 0.77054 0.78272 0.79197 0.78589 0.76547 #>   6  0.56480 0.64520 0.72235 0.75939 0.77044 0.78093 0.79696 0.81509 0.82752 #>   7  0.47272 0.53470 0.61240 0.66720 0.67918 0.64582 0.61430 0.64230 0.73714 #>   8  0.43263 0.45624 0.50564 0.56911 0.60161 0.56049 0.50933 0.53139 0.64500 #>   9  0.42997 0.41099 0.42665 0.49347 0.55838 0.53998 0.48961 0.50078 0.59291 #>   10 0.42997 0.41099 0.42665 0.49347 0.55838 0.53998 0.48961 0.50078 0.59291 #>     year #> age  1993    1994    1995    1996    1997    1998    1999    2000    2001    #>   1  0.32241 0.28970 0.25411 0.23198 0.22502 0.23193 0.25120 0.27111 0.27573 #>   2  0.54722 0.51124 0.48238 0.51046 0.57523 0.57555 0.48164 0.41899 0.45783 #>   3  0.72399 0.71472 0.72487 0.82405 0.97402 0.96885 0.76099 0.61747 0.65524 #>   4  0.71108 0.72592 0.75264 0.80504 0.86753 0.89096 0.84959 0.78545 0.73628 #>   5  0.74811 0.74706 0.76089 0.78523 0.81601 0.84889 0.87166 0.85542 0.78122 #>   6  0.82085 0.79123 0.76910 0.78687 0.82920 0.83735 0.78630 0.73473 0.72746 #>   7  0.81309 0.77978 0.71487 0.71340 0.75239 0.72067 0.59888 0.52005 0.55361 #>   8  0.75055 0.71565 0.63227 0.61637 0.64798 0.61938 0.50630 0.42281 0.41883 #>   9  0.67366 0.63134 0.55041 0.52852 0.55526 0.55764 0.49418 0.40842 0.33641 #>   10 0.67366 0.63134 0.55041 0.52852 0.55526 0.55764 0.49418 0.40842 0.33641 #>     year #> age  2002    2003    2004    2005    2006    2007    2008    2009    2010    #>   1  0.27438 0.28953 0.32301 0.33492 0.29592 0.25698 0.25526 0.27566 0.26394 #>   2  0.56848 0.62481 0.55932 0.48172 0.45244 0.43646 0.39440 0.33803 0.29788 #>   3  0.80043 0.83642 0.69080 0.56215 0.52670 0.51465 0.45521 0.37627 0.33543 #>   4  0.69588 0.64566 0.58133 0.51163 0.44569 0.39461 0.36404 0.34975 0.34410 #>   5  0.68268 0.59948 0.53408 0.46556 0.39001 0.32891 0.29325 0.27912 0.28056 #>   6  0.72212 0.64750 0.51933 0.41323 0.35008 0.30648 0.26635 0.23549 0.22415 #>   7  0.63370 0.59666 0.44316 0.33101 0.28847 0.27119 0.24868 0.22057 0.19839 #>   8  0.44573 0.41566 0.32710 0.25617 0.22085 0.20254 0.18889 0.17602 0.16363 #>   9  0.28562 0.25370 0.23044 0.20232 0.16971 0.14662 0.13591 0.13259 0.13211 #>   10 0.28562 0.25370 0.23044 0.20232 0.16971 0.14662 0.13591 0.13259 0.13211 #>     year #> age  2011    2012    2013    2014    2015    2016    2017    #>   1  0.21287 0.18408 0.19808 0.24334 0.26224 0.21847 0.16858 #>   2  0.28164 0.28157 0.29207 0.30395 0.30423 0.28918 0.26823 #>   3  0.34138 0.36238 0.36396 0.34943 0.34013 0.34397 0.35514 #>   4  0.34229 0.34246 0.34317 0.34302 0.34065 0.33588 0.32999 #>   5  0.29270 0.30435 0.30325 0.29388 0.28778 0.28921 0.29475 #>   6  0.23275 0.24616 0.24612 0.23655 0.23142 0.23568 0.24544 #>   7  0.18571 0.18116 0.18393 0.18994 0.19249 0.18865 0.18186 #>   8  0.15313 0.14778 0.14940 0.15437 0.15546 0.14976 0.14171 #>   9  0.13223 0.13234 0.13205 0.13086 0.12835 0.12485 0.12127 #>   10 0.13223 0.13234 0.13205 0.13086 0.12835 0.12485 0.12127 #>  #> units:  z"},{"path":[]},{"path":"/news/index.html","id":"new-features-2-6-20","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.20","text":"ffwd projects FLStock mean fishing mortality (fbar) target. yearMedians method calculate median across years. setunits setquant inline functions change units quant FLQuant. tb(FLStock) use time argument valkue stored range(object, ‘wtime’) available. control generic moved FLCore.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-2-6-19","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.19","text":"New method vb(FLBiol, sel=FLQuant) mbar(FLStock) returns mean natural mortality, M, fully selected age range. window(FLlst) lapply window elements. computeQ(FLindices, FLStock, FLQuants) computes index.q indices fit. comine() method now available () classes. New SRR model, bevholtisg, implements sigmoidal Beverton-Holt model. Class FLStockR contains slots reference points (@refpts, FLPar) stock recruitment relationship (@sr, predictModel).","code":""},{"path":"/news/index.html","id":"bug-fixes-2-6-19","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.19","text":"simplify(FLStock) recoded simpler way supported noseason/unit/area functions. Ensure harvest(FLQuant) returns 0 catch n 0. improvements simplify. nounit, noseason noarea nmot call harvest(). qapply now works properly noseason. fwdWindow(FLBiol) respect residuals FLQuant sometimes.","code":""},{"path":"/news/index.html","id":"user-visible-changes-2-6-19","dir":"Changelog","previous_headings":"","what":"USER-VISIBLE CHANGES","title":"FLCore 2.6.19","text":"FLStock() constructor defaults ‘age’ quant. append(FLQuant, FLQuant) propagate first object required. noseason() can either use weighted unweighted wt means. Accessor replacement methods sr sr<- operate directly predictModel FLBiol@rec. rec() returns observation, @n[1,], rec.hat prediction model params.","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-2-6-18","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.18","text":"survey(FLStock, FLIndex) returns full FLIndex object. rbind(FLPar, FLPar) keep dimnames names first element, e.g. ‘refpts’","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-2-6-17","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.17","text":"qname data.frame FLPars now factor brake geom_flpar. sel argument survey(FLStock, FLIndex). vb(FLStock) now uses directly catch.sel(). segreg simplified play better plots.","code":""},{"path":"/news/index.html","id":"user-visible-changes-2-6-17","dir":"Changelog","previous_headings":"","what":"USER-VISIBLE CHANGES","title":"FLCore 2.6.17","text":"Added g (gram) recognized uom Added uoms operations g (gram). New fwd(FLStock) method projects first year N F M. Renamed fwd(FLStock) adjust. Reformulated survey() methods, now works FLIndex FLIndexBiomass. oem(biomass=TRUE) returns aggregated index ib biomass.","code":""},{"path":[]},{"path":"/news/index.html","id":"bug-fixes-2-6-16","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.16","text":"uom() strip spaces inside string, makes ‘1000 t’ work. Products t multiples 10 return correct units #62 getPlural ignored derived classes, like FLIndexBiomass, now dispatches FLI FLS. harvest(FLQ) now runs optimize one year objects, handles well iters. computeCatch(FLStock) propagates slots matching. Logical subsetting fails otherwise. runstest made safer. vb(FLStock) now uses directly catch.sel().","code":""},{"path":"/news/index.html","id":"user-visible-changes-2-6-16","dir":"Changelog","previous_headings":"","what":"USER-VISIBLE CHANGES","title":"FLCore 2.6.16","text":"uom() called anymore FLQuant - numeric operations.","code":""},{"path":"/news/index.html","id":"new-features-2-6-16","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.16","text":"survivors(FLStock) function calculates population survivors returns FLQuant. sr(FLBiol) access full @rec slot. Methods defined aithmetic operations element element two FLQuants objects, dividing FLQuants FLPars length. fwdWindow(FLStock) method extend syntax classes. fwd(FLStock) method projects forward iniial timestep reconstruct abundances F M.","code":""},{"path":[]},{"path":"/news/index.html","id":"user-visible-changes-2-6-15","dir":"Changelog","previous_headings":"","what":"USER-VISIBLE CHANGES","title":"FLCore 2.6.15","text":"FLCore now imports ggplot2 avoid clash %+% operator veings defined packages. FLCore now uses ggplot::%+% basis method generic. function imported, FLCore use ggplot2 method. qapply() now simplify argument call unlist() output return vector. Deafults simplify=FALSE windows accepts negative value end substract number years object. metrics() can now handle formulas combining object functions vector FLPar elements, e.g. metrics(ple4, ~ssb/Blim, FLPar(Blim=300000))","code":""},{"path":"/news/index.html","id":"new-features-2-6-15","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.15","text":"mohnMatrix construct table metrics compute Mohn’s rho FLStocks object obtained restrospective analysis. readVPAInterCatch creates FLQuant VPA file format exported ICES Intercatch system. fwd(FLQuant) move one year forward population vector. fwd(FLStock) calculates survivors places one year one age ahead. qapply can simplify output, calling unlist. divide() separates object along iters list. cv(FLQuantPoint) returns std/mean. New .data.frame method FLQuantPoint. ‘1000 t’ now accepted uom().","code":""},{"path":"/news/index.html","id":"bug-fixes-2-6-15","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.15","text":"iter<- method FLBiol predictModel. logrstandard can now deal NaN","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-2-6-14","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.14","text":"intersect method called two FLQuants returns subset common dimension names. standardUnits provides possible set standard units measurement complex object. Set now FLS/FLStock, using 1000, kg, t, m, f, data(ple4). append method FLQuant FLStock adss object another year dimnames ar year specified ‘’.","code":""},{"path":[]},{"path":"/news/index.html","id":"deprecated--defunct-2-6-12","dir":"Changelog","previous_headings":"","what":"DEPRECATED & DEFUNCT","title":"FLCore 2.6.12","text":"flc2flq deprecated. Use (object, ‘FLQuant’) instead.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-6-12","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.12","text":"Fix iter(vector) addition iterators dependency.","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-2-6-11","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.11","text":"dimnames(FLComp) method defined, returns dimnames corresponding maximum length per dimension.","code":""},{"path":"/news/index.html","id":"user-visible-changes-2-6-11","dir":"Changelog","previous_headings":"","what":"USER-VISIBLE CHANGES","title":"FLCore 2.6.11","text":"combine(FLQuant) combine (FLComp) can now accept multiple objects, useful using foreach’s .multicombine. Replacement method FLlst elements ([[<-) now allows extending . Dependency added iterators package. iter() method overwritten iterators loaded.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-6-11","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.11","text":"FLStock@mat conversion FLBiol@mat/fec now works NAs","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-2-6-10","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.10","text":"window(FLQuantDistr) method added deal @var slot Method %*% FLQuants,FLPar added Better handling currency units, far EUR USD. Symbols accepted show() FLComp-derived classes call summary instead printDefault. print() still show full object","code":""},{"path":"/news/index.html","id":"bug-fixes-2-6-10","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.10","text":"propagate(FLPar) placed original object matching dimname$iter, instead iter=1 Methods %^% ^ deal properly units. Exponentation now returns units base","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-2-6-9","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.9","text":"survSRR implements Taylor et al (2013, doi: 10.1016/j.fishres.2012.04.018) model low fecundity species. ssf(FLStock) method returns Spawning Stock Fecundity, stock.n times mat, mat holds fecundity individual spread() function make available inside function list parameters","code":""},{"path":"/news/index.html","id":"user-visible-changes-2-6-9","dir":"Changelog","previous_headings":"","what":"USER-VISIBLE CHANGES","title":"FLCore 2.6.9","text":"Added calcF=TRUE simplify(), speed harvest needed","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-2-6-7","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.7","text":"Added iterProb(FLQuant) method","code":""},{"path":"/news/index.html","id":"user-visible-changes-2-6-7","dir":"Changelog","previous_headings":"","what":"USER-VISIBLE CHANGES","title":"FLCore 2.6.7","text":"writeADMB now accepts append=TRUE/FALSE Added generics mpb FLRP Improved simplify(FLStock) predict(predictModel) now accepts numeric vectors FLPar objects …","code":""},{"path":"/news/index.html","id":"bug-fixes-2-6-7","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.7","text":"Corrected simplify(FLStock) use unweighted means wts Added … msy et al generics Added numeric code 23 bevholtss3 BUG ‘[’, wrong pgroup =-1 Corrected simplify(FLStock) use unweighted means wt Bug uom FLQ,numeric numeric length > 1 Bug dims one unit area Convert numeric uom Arith length==1","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-2-6-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.6","text":"window(FLStocks) method apply window call across elements. combine(FLStocks) method collapses elements single FLStock object. many iters elements list, must 1 iter. combine(FLQuants, FLQuants) merges one element time. drop(FLQuant) returns result call base::drop @.Data. New verify() method complex classes evaluates object set rules. Checks content rather structure, validity functions . New ruleset method return standard verify rules per class. window() expand() methods FLPar. iter() method FLlst, lapplies along list","code":""},{"path":"/news/index.html","id":"user-visible-changes-2-6-6","dir":"Changelog","previous_headings":"","what":"USER-VISIBLE CHANGES","title":"FLCore 2.6.6","text":"propagate(FLPar) return object iter == iters #45. Ratios numbers written alternative ways now also return empty character.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-6-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.6","text":"dimnames<- FLStock ages failed changing age name #42. uom can now handle better products units containing divisions. coerce(FLBiol, FLBiolcpp) now extend srparam many years object, allow params per time period passed used. coerce(FLBiol, FLBiolcpp) now windows FLPar year given. trim(FLBiol) able handle predictModel slots. [[<- $<- FLlst now work extended classes, like predictModel. predict(predictModel) now handles correctly iters extra FLPar dimensions.","code":""},{"path":"/news/index.html","id":"deprecated--defunct-2-6-6","dir":"Changelog","previous_headings":"","what":"DEPRECATED & DEFUNCT","title":"FLCore 2.6.6","text":"catchSel substituted catch.sel, use later instead wt<-(FLStock) deprecated, use individual accessor methods instead","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-2-6-5","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.5","text":"New harvest method stock.n, catch.n m, minimizing diff catch. survey cpue methods generate observations operating model knit_print.FLQuant method printr package, better printing FLQuant objects knitr documents","code":""},{"path":"/news/index.html","id":"user-visible-changes-2-6-5","dir":"Changelog","previous_headings":"","what":"USER-VISIBLE CHANGES","title":"FLCore 2.6.5","text":"FLStock creator uses empty object sizing, keeps iters drops object(s) named.","code":""},{"path":"/news/index.html","id":"bug-fixes-2-6-5","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.5","text":"Add tiny value landings discards ensure division zero computeCatch. Added reduced version print(FLPar, reduced=TRUE) reuse summary methods","code":""},{"path":[]},{"path":"/news/index.html","id":"new-features-2-6-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"FLCore 2.6.4","text":"%=% operator modify thed fly content FLQuant/FLArray. Object structure can reused contents changed, e.g. FLQuant(2, dim=c(3,10)) %=% 0 return object zeros. FLModelSim FLModelSims new classes [<- FLArray now accepts input FLQuant keeps structure, still recyling appropriate. New FLStockLen class length-based stock data results. New tS tS<- method extract replace individual time steps object years seasons tsp method FLQuant returns ‘tsp’ attribute: start, end frequency (seasons) Arith method FLQuant now unit-aware, see ?units wireframe method lattice now available FLQuant [ method FLQuantDistr FLIndexBiomass class biomass-based indices abundance. Class FLBiolcpp interfacing CPP New catch.sel method FLStock, computed proportion across ages harvest predictMosdel class use FLBiol set aliases class creators now available. used working interactively. Added dim method FLQuant FLStock, ensures unnamed vector returned Added $ method FLQuant, operates along ‘quant’ dimension New method metrics compute list function Added vb method vulnerable biomass","code":""},{"path":"/news/index.html","id":"user-visible-changes-2-6-4","dir":"Changelog","previous_headings":"","what":"USER-VISIBLE CHANGES","title":"FLCore 2.6.4","text":"model.frame(FLComp) now mcf=TRUE argument correct slots different dim computeLogLik method added FLModel. return logLik object calculated data params object New iterMedians(FLQuant) method applky median along iter dim coerce method data.frame FLPar now assumes 2D structure iters rows params columns rlnorm(FLPar, …) rnorm(FLPar, …) now available mvrnorm(numeric, FLQuant) mvrnorm(numeric, FLQuant, matrix) now available propagate(FLComp) now propagates FLPar slots well FLFleet, FLMetier FLCatch classes (plus plurals) methods moved FLFleet package ifelse now definedx test=“FLQuant” .data.frame FLQuant(s) FLComp now option cohort=FALSE return column named cohort, calculated year-age. Ony age-quanted objects getPlural now S4 method dispatching singular classes returning name corresponding FLlst-based class .data.frame(FLQuants) returns qname factor levels order input object modified quantile(FLQuant) dimnames iter follow quantile(array), e.g. 50% tail method FLQuant, operates default along year dimension. deprecated sr function now method return aligned stock/recruits FLQuants FLStock propagate(FLComp) accepts extending object existing nu mber iters slots length 1. trim(FLS) u[pdates min/maxfbar needed transform(FLComp) now accepts named FLQuants object substitution argument (…) FLQuants() now accepts FLCOMP object list names/functions used extract individual FLQuant(s) FLPar validity now checks content numeric. Default frist dimname now ‘params’ FLIndices class can take FLIndex FLIndexBiomass objects mean.lifespan renamed meanLifespan avoid S3 conflict uom() returns kg 1 * kg expand() now stops new dimnames contain old ones length greater 1 seasonSums now based colSums aperm, 75 times faster new lattice-based plot(FLStocks) Added dimensions line summary(FLComp) Defining fwd generic can used mpb Flash(er) Validity FLlst now flexible accomodate children classes like FLIndexBiomass Dropped redundant Sums Products methods FLQuants, use Reduce(“+”, …) instead","code":""},{"path":"/news/index.html","id":"bug-fixes-2-6-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"FLCore 2.6.4","text":"coerce data.frame FLPar deals rightly multiple params iters wide format. iterMeans(FLQuant) operating along 6th dim coerce FLPar data.frame now works expected Added check range names FLComp class validity. Elements must named non-empty strings contain, least, min, max, minyear maxyear coerce data.frame FLPar now handles correctly iters apply(FLArray) keep object units rnorm, rlnorm rpois keep tje object units code2name FLSR reocngize properly bevholtSV fmle() can now use method=“Brent” one parameter problems New ple4.biol data 2008. integer value prototype object FLComp VIRTUAl class name character(1) .FLQuant(df) failed objects ‘year’ column propagate(FLQuant) now accepts iter == dim[6] Faulty comparison expand(FLArray) fixed #7 Wrong test validity FLModelSim Fixed bug FLPar %% FLPar objects actually equal dims, always returned product quantile(FLQuant) returned oject wrong dimensions FLPar(missing) now creates objects right number iters, works used call() lapply(FLst) works zero length object, nothing square operators FLlst return right names, desc lock Attributes FLPar maintained [ [<- (data.frame, ‘FLPar’) transposed objects without need [<- FLlst now respects names list elements added rbind(FLPar) work better now predictModel@model slot now default emptyenv() uom now safer non-strings using sprintf() conversion Quick fix readIndicesAdapt dimensions apply(FLArray) return FLQuant function change dimensions object","code":""},{"path":"/news/index.html","id":"documentation-2-6-4","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"FLCore 2.6.4","text":"documentation converted roxygen2.","code":""},{"path":"/news/index.html","id":"deprecated--defunct-2-6-4","dir":"Changelog","previous_headings":"","what":"DEPRECATED & DEFUNCT","title":"FLCore 2.6.4","text":"FLFleet, FLMetier FLCatch classes (plus plurals) methods moved FLFleet package","code":""}]
