% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genericMethods.R, R/FLS.R
\docType{methods}
\name{compute}
\alias{compute}
\alias{computeLandings}
\alias{computeLandings-methods}
\alias{computeDiscards}
\alias{computeDiscards-methods}
\alias{computeCatch}
\alias{computeCatch-methods}
\alias{computeStock}
\alias{computeStock-methods}
\alias{computeHarvest}
\alias{computeHarvest-methods}
\alias{computeLandings,FLS-method}
\alias{computeLandings,FLStock-method}
\alias{computeLandings,FLStockLen-method}
\alias{computeDiscards,FLS-method}
\alias{computeDiscards,FLStock-method}
\alias{computeCatch,FLS-method}
\alias{computeCatch,FLStock-method}
\alias{computeCatch,FLStockLen-method}
\alias{computeStock,FLS-method}
\alias{computeStock,FLStock-method}
\alias{computeStock,FLStockLen-method}
\title{Methods to compute quantities}
\usage{
computeLandings(object, ...)

computeDiscards(object, ...)

computeCatch(object, ...)

computeStock(object, ...)

computeHarvest(object, catch, ...)

computeLandings(object, ...)

computeDiscards(object, ...)

computeCatch(object, ...)

computeStock(object, ...)

\S4method{computeLandings}{FLS}(object, na.rm = TRUE)

\S4method{computeDiscards}{FLS}(object, na.rm = TRUE)

\S4method{computeCatch}{FLS}(object, slot = "catch", na.rm = TRUE)

\S4method{computeStock}{FLS}(object, na.rm = TRUE)
}
\description{
Methods to compute total quant-aggregated catch, landings, discards and
stock biomass from age or length-structured numbers and mean weights.

Methods to compute total quant-aggregated catch, landings, discards and
stock biomass from age or length-structured numbers and mean weights.
}
\details{
These methods compute the total catch, landings, discards and stock biomass
from the quant-structured values in numbers and weight per individual. The
calculation for landings, discards and stock involves the product of the
landings/discards/stock in numbers (\code{landings.n}, \code{discards.n} or
\code{stock.n}) by the individual weight-at-quant (\code{landings.wt},
\code{discards.wt} or \code{stock.wt}), as in

\deqn{L=L_n * L_{wt}}{landings = landings.n * landings.wt}

By selecting \code{slot="catch"}, \code{computeCatch} can calculate in the
same way the total catch from the catch-at-quant and weight in the catch.
Those two values (in slots \code{catch.n} and \code{catch.wt}) can also be
calculated (from landings and discards) by specifying \code{slot="n"} and
\code{slot="wt"} respectively. Calling \code{computeCatch} with option
\code{slot="all"} will carry out the three calculations. In this case, the
returned object will be of class \code{\link{FLQuants}}, with element names
\code{catch}, \code{catch.n} and \code{catch.wt}, which can then be passed
directly to the \code{\link{catch<-}} replacement method.

These methods compute the total catch, landings, discards and stock biomass
from the quant-structured values in numbers and weight per individual. The
calculation for landings, discards and stock involves the product of the
landings/discards/stock in numbers (\code{landings.n}, \code{discards.n} or
\code{stock.n}) by the individual weight-at-quant (\code{landings.wt},
\code{discards.wt} or \code{stock.wt}), as in

\deqn{L=L_n * L_{wt}}{landings = landings.n * landings.wt}

By selecting \code{slot="catch"}, \code{computeCatch} can calculate in the
same way the total catch from the catch-at-quant and weight in the catch.
Those two values (in slots \code{catch.n} and \code{catch.wt}) can also be
calculated (from landings and discards) by specifying \code{slot="n"} and
\code{slot="wt"} respectively. Calling \code{computeCatch} with option
\code{slot="all"} will carry out the three calculations. In this case, the
returned object will be of class \code{\link{FLQuants}}, with element names
\code{catch}, \code{catch.n} and \code{catch.wt}, which can then be passed
directly to the \code{\link{catch<-}} replacement method.
}
\section{Generic function}{

computeCatch(object, ...)

computeLandings(object, ...)

computeDiscards(object, ...)

computeStock(object, ...)


computeCatch(object, ...)

computeLandings(object, ...)

computeDiscards(object, ...)

computeStock(object, ...)
}

\examples{

data(ple4)
summary(computeLandings(ple4))
summary(computeCatch(ple4, slot="all"))
stock(ple4) <- computeStock(ple4)
landings(ple4) <- computeLandings(ple4)
catch.n(ple4) <- computeCatch(ple4, slot="n")
catch(ple4) <- computeCatch(ple4, slot="all")


data(ple4)
summary(computeLandings(ple4))
summary(computeCatch(ple4, slot="all"))
stock(ple4) <- computeStock(ple4)
landings(ple4) <- computeLandings(ple4)
catch.n(ple4) <- computeCatch(ple4, slot="n")
catch(ple4) <- computeCatch(ple4, slot="all")

}
\seealso{
\link{FLComp}

\link{FLComp}
}
\author{
The FLR Team
}
\keyword{methods}
